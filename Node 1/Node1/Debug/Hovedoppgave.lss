
Hovedoppgave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000016a6  0000173a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080013e  0080013e  00001778  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001895  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e4  00000000  00000000  00003299  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d11  00000000  00000000  00003c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  00004990  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000669  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ce1  00000000  00000000  000056a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  0000638a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__vector_2>
       c:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 ea       	ldi	r30, 0xA6	; 166
      84:	f6 e1       	ldi	r31, 0x16	; 22
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 33       	cpi	r26, 0x3E	; 62
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	ae e3       	ldi	r26, 0x3E	; 62
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ac 34       	cpi	r26, 0x4C	; 76
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 a9 02 	call	0x552	; 0x552 <main>
      a6:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
 */ 
#include <stdint.h>
#include "CAN.h"
#include "MCP2515_adresses.h"

void CAN_init(){
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
	mcp2515_reset();
      b6:	0e 94 a4 01 	call	0x348	; 0x348 <mcp2515_reset>
	mcp2515_bit_modify(MCP_CANCTRL, 0b11110000, 0b01000000);	//cancrl set loopback
      ba:	40 e4       	ldi	r20, 0x40	; 64
      bc:	50 e0       	ldi	r21, 0x00	; 0
      be:	60 ef       	ldi	r22, 0xF0	; 240
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	8f e0       	ldi	r24, 0x0F	; 15
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 85 01 	call	0x30a	; 0x30a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTE, 0b10011111, 0b10011111);	//sets interrupts
      ca:	4f e9       	ldi	r20, 0x9F	; 159
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	6f e9       	ldi	r22, 0x9F	; 159
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	8b e2       	ldi	r24, 0x2B	; 43
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 85 01 	call	0x30a	; 0x30a <mcp2515_bit_modify>
}
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	08 95       	ret

000000e0 <CAN_send>:

void CAN_send(CAN_message message){
      e0:	ef 92       	push	r14
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	2c 97       	sbiw	r28, 0x0c	; 12
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	f8 94       	cli
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	ea 82       	std	Y+2, r14	; 0x02
      fe:	fb 82       	std	Y+3, r15	; 0x03
     100:	0c 83       	std	Y+4, r16	; 0x04
     102:	1d 83       	std	Y+5, r17	; 0x05
     104:	2e 83       	std	Y+6, r18	; 0x06
     106:	3f 83       	std	Y+7, r19	; 0x07
     108:	48 87       	std	Y+8, r20	; 0x08
     10a:	59 87       	std	Y+9, r21	; 0x09
     10c:	6a 87       	std	Y+10, r22	; 0x0a
     10e:	7b 87       	std	Y+11, r23	; 0x0b
     110:	8c 87       	std	Y+12, r24	; 0x0c
	for (uint8_t i = 0; i<message.length; i++){
     112:	19 82       	std	Y+1, r1	; 0x01
     114:	16 c0       	rjmp	.+44     	; 0x142 <CAN_send+0x62>
		mcp2515_write(MCP_TXB0D0 + i, message.data[i]);			//writes data to transmit buffers
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	88 2f       	mov	r24, r24
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	9e 01       	movw	r18, r28
     11e:	2b 5f       	subi	r18, 0xFB	; 251
     120:	3f 4f       	sbci	r19, 0xFF	; 255
     122:	82 0f       	add	r24, r18
     124:	93 1f       	adc	r25, r19
     126:	fc 01       	movw	r30, r24
     128:	80 81       	ld	r24, Z
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	88 2f       	mov	r24, r24
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	c6 96       	adiw	r24, 0x36	; 54
     136:	b9 01       	movw	r22, r18
     138:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <mcp2515_write>
	mcp2515_bit_modify(MCP_CANCTRL, 0b11110000, 0b01000000);	//cancrl set loopback
	mcp2515_bit_modify(MCP_CANINTE, 0b10011111, 0b10011111);	//sets interrupts
}

void CAN_send(CAN_message message){
	for (uint8_t i = 0; i<message.length; i++){
     13c:	89 81       	ldd	r24, Y+1	; 0x01
     13e:	8f 5f       	subi	r24, 0xFF	; 255
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	9c 81       	ldd	r25, Y+4	; 0x04
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	89 17       	cp	r24, r25
     148:	30 f3       	brcs	.-52     	; 0x116 <CAN_send+0x36>
		mcp2515_write(MCP_TXB0D0 + i, message.data[i]);			//writes data to transmit buffers
	}
	mcp2515_write(MCP_TXB0DLC, message.length);					//writes length to DLC register
     14a:	8c 81       	ldd	r24, Y+4	; 0x04
     14c:	88 2f       	mov	r24, r24
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	bc 01       	movw	r22, r24
     152:	85 e3       	ldi	r24, 0x35	; 53
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDH, message.ID >> 3);				//shifts ID 3 to right and writes to IDhigh
     15a:	8a 81       	ldd	r24, Y+2	; 0x02
     15c:	9b 81       	ldd	r25, Y+3	; 0x03
     15e:	96 95       	lsr	r25
     160:	87 95       	ror	r24
     162:	96 95       	lsr	r25
     164:	87 95       	ror	r24
     166:	96 95       	lsr	r25
     168:	87 95       	ror	r24
     16a:	bc 01       	movw	r22, r24
     16c:	81 e3       	ldi	r24, 0x31	; 49
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, message.ID << 5);				// shifts ID 5 to left and writes to IDlow
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	82 95       	swap	r24
     17e:	92 95       	swap	r25
     180:	90 7f       	andi	r25, 0xF0	; 240
     182:	98 27       	eor	r25, r24
     184:	80 7f       	andi	r24, 0xF0	; 240
     186:	98 27       	eor	r25, r24
     188:	bc 01       	movw	r22, r24
     18a:	82 e3       	ldi	r24, 0x32	; 50
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <mcp2515_write>

	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001000, 0b00001000);	//request sending
     192:	48 e0       	ldi	r20, 0x08	; 8
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	68 e0       	ldi	r22, 0x08	; 8
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	80 e3       	ldi	r24, 0x30	; 48
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 85 01 	call	0x30a	; 0x30a <mcp2515_bit_modify>
}
     1a2:	2c 96       	adiw	r28, 0x0c	; 12
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	08 95       	ret

000001bc <CAN_receive>:

void CAN_receive(uint8_t adr, CAN_message* received){
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	28 97       	sbiw	r28, 0x08	; 8
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	8e 83       	std	Y+6, r24	; 0x06
     1d6:	78 87       	std	Y+8, r23	; 0x08
     1d8:	6f 83       	std	Y+7, r22	; 0x07
	received->length = 0b00001111 & mcp2515_read(adr-1);				//reads length from adr-1 and bitwise AND with value to mask out insignificant bits
     1da:	8e 81       	ldd	r24, Y+6	; 0x06
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <mcp2515_read>
     1e6:	28 2f       	mov	r18, r24
     1e8:	2f 70       	andi	r18, 0x0F	; 15
     1ea:	8f 81       	ldd	r24, Y+7	; 0x07
     1ec:	98 85       	ldd	r25, Y+8	; 0x08
     1ee:	fc 01       	movw	r30, r24
     1f0:	22 83       	std	Z+2, r18	; 0x02
	for (uint8_t i = 0; i<received->length; i++){
     1f2:	19 82       	std	Y+1, r1	; 0x01
     1f4:	18 c0       	rjmp	.+48     	; 0x226 <CAN_receive+0x6a>
		received->data[i] = mcp2515_read(adr+i);						//reads data from dataregisters
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	08 2f       	mov	r16, r24
     1fa:	10 e0       	ldi	r17, 0x00	; 0
     1fc:	8e 81       	ldd	r24, Y+6	; 0x06
     1fe:	28 2f       	mov	r18, r24
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	82 0f       	add	r24, r18
     20a:	93 1f       	adc	r25, r19
     20c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <mcp2515_read>
     210:	28 2f       	mov	r18, r24
     212:	8f 81       	ldd	r24, Y+7	; 0x07
     214:	98 85       	ldd	r25, Y+8	; 0x08
     216:	80 0f       	add	r24, r16
     218:	91 1f       	adc	r25, r17
     21a:	03 96       	adiw	r24, 0x03	; 3
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001000, 0b00001000);	//request sending
}

void CAN_receive(uint8_t adr, CAN_message* received){
	received->length = 0b00001111 & mcp2515_read(adr-1);				//reads length from adr-1 and bitwise AND with value to mask out insignificant bits
	for (uint8_t i = 0; i<received->length; i++){
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	8f 5f       	subi	r24, 0xFF	; 255
     224:	89 83       	std	Y+1, r24	; 0x01
     226:	8f 81       	ldd	r24, Y+7	; 0x07
     228:	98 85       	ldd	r25, Y+8	; 0x08
     22a:	fc 01       	movw	r30, r24
     22c:	92 81       	ldd	r25, Z+2	; 0x02
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	89 17       	cp	r24, r25
     232:	08 f3       	brcs	.-62     	; 0x1f6 <CAN_receive+0x3a>
		received->data[i] = mcp2515_read(adr+i);						//reads data from dataregisters
	}
	uint16_t ID_low = ((mcp2515_read(adr-4)>>5) & 0b00000111);	//finds low bits by right-shifting register 5 places and bitwise AND to mask out insignificant bits
     234:	8e 81       	ldd	r24, Y+6	; 0x06
     236:	88 2f       	mov	r24, r24
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	04 97       	sbiw	r24, 0x04	; 4
     23c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <mcp2515_read>
     240:	95 95       	asr	r25
     242:	87 95       	ror	r24
     244:	95 95       	asr	r25
     246:	87 95       	ror	r24
     248:	95 95       	asr	r25
     24a:	87 95       	ror	r24
     24c:	95 95       	asr	r25
     24e:	87 95       	ror	r24
     250:	95 95       	asr	r25
     252:	87 95       	ror	r24
     254:	87 70       	andi	r24, 0x07	; 7
     256:	99 27       	eor	r25, r25
     258:	9b 83       	std	Y+3, r25	; 0x03
     25a:	8a 83       	std	Y+2, r24	; 0x02
	uint16_t ID_high = mcp2515_read(adr-5)*8;					//reads high ID bits and left-shifts 3 places
     25c:	8e 81       	ldd	r24, Y+6	; 0x06
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	05 97       	sbiw	r24, 0x05	; 5
     264:	0e 94 52 01 	call	0x2a4	; 0x2a4 <mcp2515_read>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	9d 83       	std	Y+5, r25	; 0x05
     276:	8c 83       	std	Y+4, r24	; 0x04
	received->ID = ID_low+ID_high; 
     278:	2a 81       	ldd	r18, Y+2	; 0x02
     27a:	3b 81       	ldd	r19, Y+3	; 0x03
     27c:	8c 81       	ldd	r24, Y+4	; 0x04
     27e:	9d 81       	ldd	r25, Y+5	; 0x05
     280:	28 0f       	add	r18, r24
     282:	39 1f       	adc	r19, r25
     284:	8f 81       	ldd	r24, Y+7	; 0x07
     286:	98 85       	ldd	r25, Y+8	; 0x08
     288:	fc 01       	movw	r30, r24
     28a:	31 83       	std	Z+1, r19	; 0x01
     28c:	20 83       	st	Z, r18
	
     28e:	28 96       	adiw	r28, 0x08	; 8
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	08 95       	ret

000002a4 <mcp2515_read>:
#include "spi.h"




uint8_t mcp2515_read(uint8_t adr){
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <mcp2515_read+0x6>
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	8a 83       	std	Y+2, r24	; 0x02
	spi_select();
     2b0:	0e 94 8b 04 	call	0x916	; 0x916 <spi_select>
	spi_transmit(3);
     2b4:	83 e0       	ldi	r24, 0x03	; 3
     2b6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
	spi_transmit(adr);
     2ba:	8a 81       	ldd	r24, Y+2	; 0x02
     2bc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
	uint8_t read_value = spi_transmit(0);
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
     2c6:	89 83       	std	Y+1, r24	; 0x01
	spi_deselect();
     2c8:	0e 94 9b 04 	call	0x936	; 0x936 <spi_deselect>
	return read_value;
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <mcp2515_write>:
void mcp2515_write(uint8_t adr, uint8_t data){
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	00 d0       	rcall	.+0      	; 0x2de <mcp2515_write+0x6>
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	6a 83       	std	Y+2, r22	; 0x02
	spi_select();
     2e6:	0e 94 8b 04 	call	0x916	; 0x916 <spi_select>
	spi_transmit(2);
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
	spi_transmit(adr);
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
	spi_transmit(data);
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
	spi_deselect();
     2fc:	0e 94 9b 04 	call	0x936	; 0x936 <spi_deselect>
}
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <mcp2515_bit_modify>:
uint8_t mcp2515_request_to_send(uint8_t transmit_buffer){
	spi_select();
	spi_transmit(128+transmit_buffer);
	spi_deselect();
}
void mcp2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	00 d0       	rcall	.+0      	; 0x310 <mcp2515_bit_modify+0x6>
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	6a 83       	std	Y+2, r22	; 0x02
     31a:	4b 83       	std	Y+3, r20	; 0x03
		spi_select();
     31c:	0e 94 8b 04 	call	0x916	; 0x916 <spi_select>
		spi_transmit(5);
     320:	85 e0       	ldi	r24, 0x05	; 5
     322:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
		spi_transmit(adr);
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
		spi_transmit(mask);
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
		spi_transmit(data);
     332:	8b 81       	ldd	r24, Y+3	; 0x03
     334:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
		spi_deselect();
     338:	0e 94 9b 04 	call	0x936	; 0x936 <spi_deselect>
}
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <mcp2515_reset>:
void mcp2515_reset(){
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
	spi_select();
     350:	0e 94 8b 04 	call	0x916	; 0x916 <spi_select>
	spi_transmit(192);
     354:	80 ec       	ldi	r24, 0xC0	; 192
     356:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_transmit>
	spi_deselect();
     35a:	0e 94 9b 04 	call	0x936	; 0x936 <spi_deselect>
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <write_c>:
#include <util/delay.h>
#include <avr/pgmspace.h>
#include <stdio.h>


void write_c(uint8_t adr){
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	00 d0       	rcall	.+0      	; 0x36a <write_c+0x6>
     36a:	1f 92       	push	r1
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	8b 83       	std	Y+3, r24	; 0x03
	volatile char *ext_oled = (char *) 0x1000;
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e1       	ldi	r25, 0x10	; 16
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
	ext_oled[0] = adr;
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	2b 81       	ldd	r18, Y+3	; 0x03
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
}
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <write_d>:
void write_d(uint8_t adr){
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <write_d+0x6>
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	8b 83       	std	Y+3, r24	; 0x03
	volatile char *ext_oled = (char *) 0x1200;
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	92 e1       	ldi	r25, 0x12	; 18
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	89 83       	std	Y+1, r24	; 0x01
	
	ext_oled[0] = adr;
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	2b 81       	ldd	r18, Y+3	; 0x03
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 83       	st	Z, r18
}
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <oled_reset>:

void oled_reset(){
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	1f 92       	push	r1
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i<8;i++){
     3c6:	19 82       	std	Y+1, r1	; 0x01
     3c8:	08 c0       	rjmp	.+16     	; 0x3da <oled_reset+0x1e>
		oled_clear_line(i);
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 2b 02 	call	0x456	; 0x456 <oled_clear_line>
	
	ext_oled[0] = adr;
}

void oled_reset(){
	for (uint8_t i = 0; i<8;i++){
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	89 83       	std	Y+1, r24	; 0x01
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	88 30       	cpi	r24, 0x08	; 8
     3de:	a8 f3       	brcs	.-22     	; 0x3ca <oled_reset+0xe>
		oled_clear_line(i);
	}
	oled_home();
     3e0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <oled_home>
	
}
     3e4:	0f 90       	pop	r0
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <oled_home>:

void oled_home(){
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
	oled_pos(0,0);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 44 02 	call	0x488	; 0x488 <oled_pos>
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <oled_goto_line>:

void oled_goto_line(uint8_t line){
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	1f 92       	push	r1
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	89 83       	std	Y+1, r24	; 0x01
	current_line = line;
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	80 93 3f 01 	sts	0x013F, r24
	write_c(0xb0+line);
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	80 55       	subi	r24, 0x50	; 80
     41c:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
}
     420:	0f 90       	pop	r0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <oled_goto_column>:

void oled_goto_column(uint8_t column){
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	1f 92       	push	r1
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	89 83       	std	Y+1, r24	; 0x01
	current_column = column;
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	80 93 3e 01 	sts	0x013E, r24
	write_c(0x00+column%16);
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	8f 70       	andi	r24, 0x0F	; 15
     43e:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x10+column/16);
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	82 95       	swap	r24
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	80 5f       	subi	r24, 0xF0	; 240
     44a:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
}
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <oled_clear_line>:

void oled_clear_line(uint8_t line){
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	00 d0       	rcall	.+0      	; 0x45c <oled_clear_line+0x6>
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	8a 83       	std	Y+2, r24	; 0x02
	oled_goto_line(line);
     462:	8a 81       	ldd	r24, Y+2	; 0x02
     464:	0e 94 03 02 	call	0x406	; 0x406 <oled_goto_line>
	for(uint8_t i = 0; i<128;i++){
     468:	19 82       	std	Y+1, r1	; 0x01
     46a:	06 c0       	rjmp	.+12     	; 0x478 <oled_clear_line+0x22>
		write_d(0x0);
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 c8 01 	call	0x390	; 0x390 <write_d>
	write_c(0x10+column/16);
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(uint8_t i = 0; i<128;i++){
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	8f 5f       	subi	r24, 0xFF	; 255
     476:	89 83       	std	Y+1, r24	; 0x01
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	88 23       	and	r24, r24
     47c:	bc f7       	brge	.-18     	; 0x46c <oled_clear_line+0x16>
		write_d(0x0);
	}
}
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <oled_pos>:

void oled_pos(uint8_t line, uint8_t column){
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	00 d0       	rcall	.+0      	; 0x48e <oled_pos+0x6>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	6a 83       	std	Y+2, r22	; 0x02
	current_column = column;
     496:	8a 81       	ldd	r24, Y+2	; 0x02
     498:	80 93 3e 01 	sts	0x013E, r24
	current_line = line;
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	80 93 3f 01 	sts	0x013F, r24
	oled_goto_line(line);
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	0e 94 03 02 	call	0x406	; 0x406 <oled_goto_line>
	oled_goto_column(column);
     4a8:	8a 81       	ldd	r24, Y+2	; 0x02
     4aa:	0e 94 14 02 	call	0x428	; 0x428 <oled_goto_column>
}
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <oled_init>:
		}
	}
	return 0;
}

void oled_init(){
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	write_c(0xae); // display off
     4c0:	8e ea       	ldi	r24, 0xAE	; 174
     4c2:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xa1); //segment remap
     4c6:	81 ea       	ldi	r24, 0xA1	; 161
     4c8:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xda); //common pads hardware: alternative
     4cc:	8a ed       	ldi	r24, 0xDA	; 218
     4ce:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x12);
     4d2:	82 e1       	ldi	r24, 0x12	; 18
     4d4:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xc8); //common output scan direction:com63~com0
     4d8:	88 ec       	ldi	r24, 0xC8	; 200
     4da:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xa8); //multiplex ration mode:63
     4de:	88 ea       	ldi	r24, 0xA8	; 168
     4e0:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x3f);
     4e4:	8f e3       	ldi	r24, 0x3F	; 63
     4e6:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xd5); //display divide ratio/osc. freq. mode
     4ea:	85 ed       	ldi	r24, 0xD5	; 213
     4ec:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x80);
     4f0:	80 e8       	ldi	r24, 0x80	; 128
     4f2:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x81); //contrast control
     4f6:	81 e8       	ldi	r24, 0x81	; 129
     4f8:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x50);
     4fc:	80 e5       	ldi	r24, 0x50	; 80
     4fe:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xd9); //set pre-charge period
     502:	89 ed       	ldi	r24, 0xD9	; 217
     504:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x21);
     508:	81 e2       	ldi	r24, 0x21	; 33
     50a:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x20); //Set Memory Addressing Mode
     50e:	80 e2       	ldi	r24, 0x20	; 32
     510:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x02);
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xdb); //VCOM deselect level mode
     51a:	8b ed       	ldi	r24, 0xDB	; 219
     51c:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x30);
     520:	80 e3       	ldi	r24, 0x30	; 48
     522:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xad); //master configuration
     526:	8d ea       	ldi	r24, 0xAD	; 173
     528:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0x00);
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xa4); //out follows RAM content
     532:	84 ea       	ldi	r24, 0xA4	; 164
     534:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xa6); //set normal display
     538:	86 ea       	ldi	r24, 0xA6	; 166
     53a:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	write_c(0xaf); // display on
     53e:	8f ea       	ldi	r24, 0xAF	; 175
     540:	0e 94 b2 01 	call	0x364	; 0x364 <write_c>
	
	oled_home();
     544:	0e 94 f6 01 	call	0x3ec	; 0x3ec <oled_home>
	oled_reset();
     548:	0e 94 de 01 	call	0x3bc	; 0x3bc <oled_reset>
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <main>:

volatile uint8_t BUTTON_PRESSED = 0;
volatile uint8_t MCP_INTR = 0;


int main(void){
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	68 97       	sbiw	r28, 0x18	; 24
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
	uart_init(MYUBRR);
     56e:	8f e1       	ldi	r24, 0x1F	; 31
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 97 05 	call	0xb2e	; 0xb2e <uart_init>
	sram_init();
     576:	0e 94 ab 04 	call	0x956	; 0x956 <sram_init>
	oled_init();
     57a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <oled_init>
	mfcard_joy_button_init();
     57e:	0e 94 00 04 	call	0x800	; 0x800 <mfcard_joy_button_init>
	mfcard_interrupt_init();
     582:	0e 94 9d 03 	call	0x73a	; 0x73a <mfcard_interrupt_init>
	spi_init();
     586:	0e 94 19 04 	call	0x832	; 0x832 <spi_init>
	CAN_init();
     58a:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
		
	printf("\n\nStartup complete\n\n");
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 2b 07 	call	0xe56	; 0xe56 <puts>

	CAN_message duta = {20, 4, {3, 2, 3, 7, 6}};
     596:	2b e0       	ldi	r18, 0x0B	; 11
     598:	ce 01       	movw	r24, r28
     59a:	03 96       	adiw	r24, 0x03	; 3
     59c:	fc 01       	movw	r30, r24
     59e:	32 2f       	mov	r19, r18
     5a0:	11 92       	st	Z+, r1
     5a2:	3a 95       	dec	r19
     5a4:	e9 f7       	brne	.-6      	; 0x5a0 <main+0x4e>
     5a6:	84 e1       	ldi	r24, 0x14	; 20
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9c 83       	std	Y+4, r25	; 0x04
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	8d 83       	std	Y+5, r24	; 0x05
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	8e 83       	std	Y+6, r24	; 0x06
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	8f 83       	std	Y+7, r24	; 0x07
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	88 87       	std	Y+8, r24	; 0x08
     5be:	87 e0       	ldi	r24, 0x07	; 7
     5c0:	89 87       	std	Y+9, r24	; 0x09
     5c2:	86 e0       	ldi	r24, 0x06	; 6
     5c4:	8a 87       	std	Y+10, r24	; 0x0a
	while(1){	
		if (MCP_INTR){
     5c6:	80 91 41 01 	lds	r24, 0x0141
     5ca:	88 23       	and	r24, r24
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <main+0x7e>
     5ce:	58 c0       	rjmp	.+176    	; 0x680 <main+0x12e>
			CAN_message received;
			CAN_receive(MCP_RXB0D0, &received);
     5d0:	ce 01       	movw	r24, r28
     5d2:	0e 96       	adiw	r24, 0x0e	; 14
     5d4:	bc 01       	movw	r22, r24
     5d6:	86 e6       	ldi	r24, 0x66	; 102
     5d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <CAN_receive>
			printf("Data:");
     5dc:	8a e1       	ldi	r24, 0x1A	; 26
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	89 2f       	mov	r24, r25
     5e2:	8f 93       	push	r24
     5e4:	8a e1       	ldi	r24, 0x1A	; 26
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	8f 93       	push	r24
     5ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <printf>
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
			for(int i = 0; i<received.length; i++){
     5f2:	1a 82       	std	Y+2, r1	; 0x02
     5f4:	19 82       	std	Y+1, r1	; 0x01
     5f6:	20 c0       	rjmp	.+64     	; 0x638 <main+0xe6>
				printf(" %i", received.data[i]);
     5f8:	9e 01       	movw	r18, r28
     5fa:	2f 5e       	subi	r18, 0xEF	; 239
     5fc:	3f 4f       	sbci	r19, 0xFF	; 255
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	82 0f       	add	r24, r18
     604:	93 1f       	adc	r25, r19
     606:	fc 01       	movw	r30, r24
     608:	80 81       	ld	r24, Z
     60a:	88 2f       	mov	r24, r24
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	29 2f       	mov	r18, r25
     610:	2f 93       	push	r18
     612:	8f 93       	push	r24
     614:	80 e2       	ldi	r24, 0x20	; 32
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	89 2f       	mov	r24, r25
     61a:	8f 93       	push	r24
     61c:	80 e2       	ldi	r24, 0x20	; 32
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	8f 93       	push	r24
     622:	0e 94 17 07 	call	0xe2e	; 0xe2e <printf>
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
	while(1){	
		if (MCP_INTR){
			CAN_message received;
			CAN_receive(MCP_RXB0D0, &received);
			printf("Data:");
			for(int i = 0; i<received.length; i++){
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	9a 83       	std	Y+2, r25	; 0x02
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	88 89       	ldd	r24, Y+16	; 0x10
     63a:	28 2f       	mov	r18, r24
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	82 17       	cp	r24, r18
     644:	93 07       	cpc	r25, r19
     646:	c4 f2       	brlt	.-80     	; 0x5f8 <main+0xa6>
				printf(" %i", received.data[i]);
			}
			printf("\nLength: %i    ID: %i\n \n", received.length, received.ID);
     648:	2e 85       	ldd	r18, Y+14	; 0x0e
     64a:	3f 85       	ldd	r19, Y+15	; 0x0f
     64c:	88 89       	ldd	r24, Y+16	; 0x10
     64e:	88 2f       	mov	r24, r24
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	43 2f       	mov	r20, r19
     654:	4f 93       	push	r20
     656:	2f 93       	push	r18
     658:	29 2f       	mov	r18, r25
     65a:	2f 93       	push	r18
     65c:	8f 93       	push	r24
     65e:	84 e2       	ldi	r24, 0x24	; 36
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	89 2f       	mov	r24, r25
     664:	8f 93       	push	r24
     666:	84 e2       	ldi	r24, 0x24	; 36
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	8f 93       	push	r24
     66c:	0e 94 17 07 	call	0xe2e	; 0xe2e <printf>
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
			MCP_INTR = 0;
     67c:	10 92 41 01 	sts	0x0141, r1
		}
		CAN_send(duta);
     680:	eb 80       	ldd	r14, Y+3	; 0x03
     682:	fc 80       	ldd	r15, Y+4	; 0x04
     684:	0d 81       	ldd	r16, Y+5	; 0x05
     686:	1e 81       	ldd	r17, Y+6	; 0x06
     688:	2f 81       	ldd	r18, Y+7	; 0x07
     68a:	38 85       	ldd	r19, Y+8	; 0x08
     68c:	49 85       	ldd	r20, Y+9	; 0x09
     68e:	5a 85       	ldd	r21, Y+10	; 0x0a
     690:	6b 85       	ldd	r22, Y+11	; 0x0b
     692:	7c 85       	ldd	r23, Y+12	; 0x0c
     694:	8d 85       	ldd	r24, Y+13	; 0x0d
     696:	0e 94 70 00 	call	0xe0	; 0xe0 <CAN_send>
		our_delay(1000);
     69a:	88 ee       	ldi	r24, 0xE8	; 232
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <our_delay>
	}
     6a2:	91 cf       	rjmp	.-222    	; 0x5c6 <main+0x74>

000006a4 <__vector_3>:
			}
		}
	}*/	
}

ISR(INT2_vect){
     6a4:	1f 92       	push	r1
     6a6:	0f 92       	push	r0
     6a8:	00 90 5f 00 	lds	r0, 0x005F
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	8f 93       	push	r24
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
	BUTTON_PRESSED = 1; // Wake up the CPU!
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 40 01 	sts	0x0140, r24
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	8f 91       	pop	r24
     6c6:	0f 90       	pop	r0
     6c8:	00 92 5f 00 	sts	0x005F, r0
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

000006d2 <__vector_2>:
ISR(INT1_vect){
     6d2:	1f 92       	push	r1
     6d4:	0f 92       	push	r0
     6d6:	00 90 5f 00 	lds	r0, 0x005F
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
	MCP_INTR = mcp2515_read(MCP_CANINTF);						//reads interrupt register into global variable MCP_INTR to determine what's going on?
     6fe:	8c e2       	ldi	r24, 0x2C	; 44
     700:	0e 94 52 01 	call	0x2a4	; 0x2a4 <mcp2515_read>
     704:	80 93 41 01 	sts	0x0141, r24
	mcp2515_bit_modify(MCP_CANINTF, 0b11111111, 0b00000000);	//clears interrupt flags
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	6f ef       	ldi	r22, 0xFF	; 255
     70c:	8c e2       	ldi	r24, 0x2C	; 44
     70e:	0e 94 85 01 	call	0x30a	; 0x30a <mcp2515_bit_modify>
}
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	ff 91       	pop	r31
     718:	ef 91       	pop	r30
     71a:	bf 91       	pop	r27
     71c:	af 91       	pop	r26
     71e:	9f 91       	pop	r25
     720:	8f 91       	pop	r24
     722:	7f 91       	pop	r23
     724:	6f 91       	pop	r22
     726:	5f 91       	pop	r21
     728:	4f 91       	pop	r20
     72a:	3f 91       	pop	r19
     72c:	2f 91       	pop	r18
     72e:	0f 90       	pop	r0
     730:	00 92 5f 00 	sts	0x005F, r0
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <mfcard_interrupt_init>:
#include <stdbool.h>
#include <avr/interrupt.h>
#include "mfcard.h"
#include "bit.h"

void mfcard_interrupt_init(void){
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
	cli();
     742:	f8 94       	cli
	clear_bit(GICR, INT2); 
     744:	8b e5       	ldi	r24, 0x5B	; 91
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	2b e5       	ldi	r18, 0x5B	; 91
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	2f 7d       	andi	r18, 0xDF	; 223
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
	clear_bit(EMCUCR,ISC2);		//Falling edge activates interrupt on INT2
     756:	86 e5       	ldi	r24, 0x56	; 86
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	26 e5       	ldi	r18, 0x56	; 86
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	f9 01       	movw	r30, r18
     760:	20 81       	ld	r18, Z
     762:	2e 7f       	andi	r18, 0xFE	; 254
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
	clear_bit(GIFR,INTF2);		//Makes the MCU jump to corresponding interrupt vector
     768:	8a e5       	ldi	r24, 0x5A	; 90
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	2a e5       	ldi	r18, 0x5A	; 90
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	2f 7d       	andi	r18, 0xDF	; 223
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
	set_bit(MCUCR,ISC11);
     77a:	85 e5       	ldi	r24, 0x55	; 85
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	25 e5       	ldi	r18, 0x55	; 85
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	28 60       	ori	r18, 0x08	; 8
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
	clear_bit(MCUCR,ISC10);		//Falling edge activates interrupt on INT1
     78c:	85 e5       	ldi	r24, 0x55	; 85
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	25 e5       	ldi	r18, 0x55	; 85
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	2b 7f       	andi	r18, 0xFB	; 251
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
	clear_bit(GIFR,INTF1);
     79e:	8a e5       	ldi	r24, 0x5A	; 90
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	2a e5       	ldi	r18, 0x5A	; 90
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	f9 01       	movw	r30, r18
     7a8:	20 81       	ld	r18, Z
     7aa:	2f 77       	andi	r18, 0x7F	; 127
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
	set_bit(MCUCR,ISC00);
     7b0:	85 e5       	ldi	r24, 0x55	; 85
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	25 e5       	ldi	r18, 0x55	; 85
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	f9 01       	movw	r30, r18
     7ba:	20 81       	ld	r18, Z
     7bc:	21 60       	ori	r18, 0x01	; 1
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
	set_bit(MCUCR,ISC01);
     7c2:	85 e5       	ldi	r24, 0x55	; 85
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	25 e5       	ldi	r18, 0x55	; 85
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	20 81       	ld	r18, Z
     7ce:	22 60       	ori	r18, 0x02	; 2
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
	set_bit(GICR, INT2);		//INT2 enabled as interrupt
     7d4:	8b e5       	ldi	r24, 0x5B	; 91
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	2b e5       	ldi	r18, 0x5B	; 91
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	20 81       	ld	r18, Z
     7e0:	20 62       	ori	r18, 0x20	; 32
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
	set_bit(GICR, INT1);
     7e6:	8b e5       	ldi	r24, 0x5B	; 91
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	2b e5       	ldi	r18, 0x5B	; 91
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	20 81       	ld	r18, Z
     7f2:	20 68       	ori	r18, 0x80	; 128
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
	sei();
     7f8:	78 94       	sei
	//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <mfcard_joy_button_init>:

void mfcard_joy_button_init(void){
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
	set_bit(DDRE, PE0);			//sets joystick button pin to input
     808:	86 e2       	ldi	r24, 0x26	; 38
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	26 e2       	ldi	r18, 0x26	; 38
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	20 81       	ld	r18, Z
     814:	21 60       	ori	r18, 0x01	; 1
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
	set_bit(PORTE, PORTE0);		//enables pull up resistor
     81a:	87 e2       	ldi	r24, 0x27	; 39
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	27 e2       	ldi	r18, 0x27	; 39
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	f9 01       	movw	r30, r18
     824:	20 81       	ld	r18, Z
     826:	21 60       	ori	r18, 0x01	; 1
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <spi_init>:
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	87 e3       	ldi	r24, 0x37	; 55
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	27 e3       	ldi	r18, 0x37	; 55
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	f9 01       	movw	r30, r18
     844:	20 81       	ld	r18, Z
     846:	20 61       	ori	r18, 0x10	; 16
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
     84c:	87 e3       	ldi	r24, 0x37	; 55
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	27 e3       	ldi	r18, 0x37	; 55
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	f9 01       	movw	r30, r18
     856:	20 81       	ld	r18, Z
     858:	20 62       	ori	r18, 0x20	; 32
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
     85e:	87 e3       	ldi	r24, 0x37	; 55
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	27 e3       	ldi	r18, 0x37	; 55
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	f9 01       	movw	r30, r18
     868:	20 81       	ld	r18, Z
     86a:	2f 7b       	andi	r18, 0xBF	; 191
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
     870:	88 e3       	ldi	r24, 0x38	; 56
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	28 e3       	ldi	r18, 0x38	; 56
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	f9 01       	movw	r30, r18
     87a:	20 81       	ld	r18, Z
     87c:	20 64       	ori	r18, 0x40	; 64
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
     882:	87 e3       	ldi	r24, 0x37	; 55
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	27 e3       	ldi	r18, 0x37	; 55
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	f9 01       	movw	r30, r18
     88c:	20 81       	ld	r18, Z
     88e:	20 68       	ori	r18, 0x80	; 128
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
     894:	8d e2       	ldi	r24, 0x2D	; 45
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	2d e2       	ldi	r18, 0x2D	; 45
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	f9 01       	movw	r30, r18
     89e:	20 81       	ld	r18, Z
     8a0:	20 64       	ori	r18, 0x40	; 64
     8a2:	fc 01       	movw	r30, r24
     8a4:	20 83       	st	Z, r18
     8a6:	8d e2       	ldi	r24, 0x2D	; 45
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	2d e2       	ldi	r18, 0x2D	; 45
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	f9 01       	movw	r30, r18
     8b0:	20 81       	ld	r18, Z
     8b2:	21 60       	ori	r18, 0x01	; 1
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 83       	st	Z, r18
     8b8:	88 e3       	ldi	r24, 0x38	; 56
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	28 e3       	ldi	r18, 0x38	; 56
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	f9 01       	movw	r30, r18
     8c2:	20 81       	ld	r18, Z
     8c4:	20 61       	ori	r18, 0x10	; 16
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
     8ca:	8d e2       	ldi	r24, 0x2D	; 45
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	2d e2       	ldi	r18, 0x2D	; 45
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	20 61       	ori	r18, 0x10	; 16
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <spi_transmit>:
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	1f 92       	push	r1
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	8f e2       	ldi	r24, 0x2F	; 47
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	29 81       	ldd	r18, Y+1	; 0x01
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 83       	st	Z, r18
     8f8:	00 00       	nop
     8fa:	8e e2       	ldi	r24, 0x2E	; 46
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	80 81       	ld	r24, Z
     902:	88 23       	and	r24, r24
     904:	d4 f7       	brge	.-12     	; 0x8fa <spi_transmit+0x18>
     906:	8f e2       	ldi	r24, 0x2F	; 47
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	fc 01       	movw	r30, r24
     90c:	80 81       	ld	r24, Z
     90e:	0f 90       	pop	r0
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <spi_select>:
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	88 e3       	ldi	r24, 0x38	; 56
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	28 e3       	ldi	r18, 0x38	; 56
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	f9 01       	movw	r30, r18
     928:	20 81       	ld	r18, Z
     92a:	2f 7e       	andi	r18, 0xEF	; 239
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <spi_deselect>:
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	88 e3       	ldi	r24, 0x38	; 56
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	28 e3       	ldi	r18, 0x38	; 56
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	f9 01       	movw	r30, r18
     948:	20 81       	ld	r18, Z
     94a:	20 61       	ori	r18, 0x10	; 16
     94c:	fc 01       	movw	r30, r24
     94e:	20 83       	st	Z, r18
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <sram_init>:

#include <avr/io.h>
#include "bit.h"


void sram_init(void){
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
	set_bit(SFIOR,XMM2);
     95e:	80 e5       	ldi	r24, 0x50	; 80
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	20 e5       	ldi	r18, 0x50	; 80
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	20 62       	ori	r18, 0x20	; 32
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
	clear_bit(SFIOR,XMM1);
     970:	80 e5       	ldi	r24, 0x50	; 80
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	20 e5       	ldi	r18, 0x50	; 80
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	f9 01       	movw	r30, r18
     97a:	20 81       	ld	r18, Z
     97c:	2f 7e       	andi	r18, 0xEF	; 239
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
	clear_bit(SFIOR,XMM0);
     982:	80 e5       	ldi	r24, 0x50	; 80
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	20 e5       	ldi	r18, 0x50	; 80
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	27 7f       	andi	r18, 0xF7	; 247
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
	set_bit(MCUCR,SRE);
     994:	85 e5       	ldi	r24, 0x55	; 85
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	25 e5       	ldi	r18, 0x55	; 85
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f9 01       	movw	r30, r18
     99e:	20 81       	ld	r18, Z
     9a0:	20 68       	ori	r18, 0x80	; 128
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <our_delay>:
		
	}
	
}

void our_delay(int time){
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	62 97       	sbiw	r28, 0x12	; 18
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	9a 8b       	std	Y+18, r25	; 0x12
     9c2:	89 8b       	std	Y+17, r24	; 0x11
	for (int i =0;i<time;i++){
     9c4:	1a 82       	std	Y+2, r1	; 0x02
     9c6:	19 82       	std	Y+1, r1	; 0x01
     9c8:	77 c0       	rjmp	.+238    	; 0xab8 <our_delay+0x10c>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	a0 e8       	ldi	r26, 0x80	; 128
     9d0:	bf e3       	ldi	r27, 0x3F	; 63
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	ad 83       	std	Y+5, r26	; 0x05
     9d8:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	4a e7       	ldi	r20, 0x7A	; 122
     9e0:	53 e4       	ldi	r21, 0x43	; 67
     9e2:	6b 81       	ldd	r22, Y+3	; 0x03
     9e4:	7c 81       	ldd	r23, Y+4	; 0x04
     9e6:	8d 81       	ldd	r24, Y+5	; 0x05
     9e8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ea:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	8f 83       	std	Y+7, r24	; 0x07
     9f4:	98 87       	std	Y+8, r25	; 0x08
     9f6:	a9 87       	std	Y+9, r26	; 0x09
     9f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e8       	ldi	r20, 0x80	; 128
     a00:	5f e3       	ldi	r21, 0x3F	; 63
     a02:	6f 81       	ldd	r22, Y+7	; 0x07
     a04:	78 85       	ldd	r23, Y+8	; 0x08
     a06:	89 85       	ldd	r24, Y+9	; 0x09
     a08:	9a 85       	ldd	r25, Y+10	; 0x0a
     a0a:	0e 94 c0 05 	call	0xb80	; 0xb80 <__cmpsf2>
     a0e:	88 23       	and	r24, r24
     a10:	2c f4       	brge	.+10     	; 0xa1c <our_delay+0x70>
		__ticks = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9c 87       	std	Y+12, r25	; 0x0c
     a18:	8b 87       	std	Y+11, r24	; 0x0b
     a1a:	3f c0       	rjmp	.+126    	; 0xa9a <our_delay+0xee>
	else if (__tmp > 65535)
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	3f ef       	ldi	r19, 0xFF	; 255
     a20:	4f e7       	ldi	r20, 0x7F	; 127
     a22:	57 e4       	ldi	r21, 0x47	; 71
     a24:	6f 81       	ldd	r22, Y+7	; 0x07
     a26:	78 85       	ldd	r23, Y+8	; 0x08
     a28:	89 85       	ldd	r24, Y+9	; 0x09
     a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2c:	0e 94 65 06 	call	0xcca	; 0xcca <__gesf2>
     a30:	18 16       	cp	r1, r24
     a32:	4c f5       	brge	.+82     	; 0xa86 <our_delay+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e2       	ldi	r20, 0x20	; 32
     a3a:	51 e4       	ldi	r21, 0x41	; 65
     a3c:	6b 81       	ldd	r22, Y+3	; 0x03
     a3e:	7c 81       	ldd	r23, Y+4	; 0x04
     a40:	8d 81       	ldd	r24, Y+5	; 0x05
     a42:	9e 81       	ldd	r25, Y+6	; 0x06
     a44:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fixunssfsi>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	9c 87       	std	Y+12, r25	; 0x0c
     a5a:	8b 87       	std	Y+11, r24	; 0x0b
     a5c:	0f c0       	rjmp	.+30     	; 0xa7c <our_delay+0xd0>
     a5e:	89 e1       	ldi	r24, 0x19	; 25
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	9e 87       	std	Y+14, r25	; 0x0e
     a64:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a66:	8d 85       	ldd	r24, Y+13	; 0x0d
     a68:	9e 85       	ldd	r25, Y+14	; 0x0e
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <our_delay+0xbe>
     a6e:	9e 87       	std	Y+14, r25	; 0x0e
     a70:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a72:	8b 85       	ldd	r24, Y+11	; 0x0b
     a74:	9c 85       	ldd	r25, Y+12	; 0x0c
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	9c 87       	std	Y+12, r25	; 0x0c
     a7a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a80:	00 97       	sbiw	r24, 0x00	; 0
     a82:	69 f7       	brne	.-38     	; 0xa5e <our_delay+0xb2>
     a84:	14 c0       	rjmp	.+40     	; 0xaae <our_delay+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a86:	6f 81       	ldd	r22, Y+7	; 0x07
     a88:	78 85       	ldd	r23, Y+8	; 0x08
     a8a:	89 85       	ldd	r24, Y+9	; 0x09
     a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a8e:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fixunssfsi>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	9c 87       	std	Y+12, r25	; 0x0c
     a98:	8b 87       	std	Y+11, r24	; 0x0b
     a9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a9e:	98 8b       	std	Y+16, r25	; 0x10
     aa0:	8f 87       	std	Y+15, r24	; 0x0f
     aa2:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa4:	98 89       	ldd	r25, Y+16	; 0x10
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <our_delay+0xfa>
     aaa:	98 8b       	std	Y+16, r25	; 0x10
     aac:	8f 87       	std	Y+15, r24	; 0x0f
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	9a 81       	ldd	r25, Y+2	; 0x02
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	9a 83       	std	Y+2, r25	; 0x02
     ab6:	89 83       	std	Y+1, r24	; 0x01
     ab8:	29 81       	ldd	r18, Y+1	; 0x01
     aba:	3a 81       	ldd	r19, Y+2	; 0x02
     abc:	89 89       	ldd	r24, Y+17	; 0x11
     abe:	9a 89       	ldd	r25, Y+18	; 0x12
     ac0:	28 17       	cp	r18, r24
     ac2:	39 07       	cpc	r19, r25
     ac4:	0c f4       	brge	.+2      	; 0xac8 <our_delay+0x11c>
     ac6:	81 cf       	rjmp	.-254    	; 0x9ca <our_delay+0x1e>
		_delay_ms(1);
	}
}
     ac8:	62 96       	adiw	r28, 0x12	; 18
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <uart_transmit>:
#include <avr/io.h>




void uart_transmit(unsigned char data){
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	1f 92       	push	r1
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	89 83       	std	Y+1, r24	; 0x01
	loop_until_bit_is_set(UCSR0A, UDRE0);		//wait for empty transmit buffer
     ae6:	8b e2       	ldi	r24, 0x2B	; 43
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	88 2f       	mov	r24, r24
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	80 72       	andi	r24, 0x20	; 32
     af4:	99 27       	eor	r25, r25
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	b1 f3       	breq	.-20     	; 0xae6 <uart_transmit+0xc>
	UDR0 = data;								//puts data into buffer to be sendt
     afa:	8c e2       	ldi	r24, 0x2C	; 44
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	29 81       	ldd	r18, Y+1	; 0x01
     b00:	fc 01       	movw	r30, r24
     b02:	20 83       	st	Z, r18
}
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <uart_receive>:

uint8_t uart_receive(void){
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
	loop_until_bit_is_set(UCSR0A, RXC0);		//wait for data to be recieved
     b14:	8b e2       	ldi	r24, 0x2B	; 43
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	fc 01       	movw	r30, r24
     b1a:	80 81       	ld	r24, Z
     b1c:	88 23       	and	r24, r24
     b1e:	d4 f7       	brge	.-12     	; 0xb14 <uart_receive+0x8>
	return UDR0;								// return received value
     b20:	8c e2       	ldi	r24, 0x2C	; 44
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <uart_init>:

void uart_init(unsigned int ubrr){
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	00 d0       	rcall	.+0      	; 0xb34 <uart_init+0x6>
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	9a 83       	std	Y+2, r25	; 0x02
     b3a:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char)(ubrr>>8);
     b3c:	80 e4       	ldi	r24, 0x40	; 64
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	29 81       	ldd	r18, Y+1	; 0x01
     b42:	3a 81       	ldd	r19, Y+2	; 0x02
     b44:	23 2f       	mov	r18, r19
     b46:	33 27       	eor	r19, r19
     b48:	fc 01       	movw	r30, r24
     b4a:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)ubrr;				//sets baud rate = 9600bps
     b4c:	89 e2       	ldi	r24, 0x29	; 41
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	29 81       	ldd	r18, Y+1	; 0x01
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				//enable reciever and tranciever
     b56:	8a e2       	ldi	r24, 0x2A	; 42
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	28 e1       	ldi	r18, 0x18	; 24
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 83       	st	Z, r18
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);// set frame format: 8 data bit, 2 stop bit
     b60:	80 e4       	ldi	r24, 0x40	; 64
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	2e e8       	ldi	r18, 0x8E	; 142
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
	
	fdevopen(&uart_transmit,&uart_receive);	//makes uart work as printf
     b6a:	66 e8       	ldi	r22, 0x86	; 134
     b6c:	75 e0       	ldi	r23, 0x05	; 5
     b6e:	8d e6       	ldi	r24, 0x6D	; 109
     b70:	95 e0       	ldi	r25, 0x05	; 5
     b72:	0e 94 cc 06 	call	0xd98	; 0xd98 <fdevopen>
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <__cmpsf2>:
     b80:	2f d0       	rcall	.+94     	; 0xbe0 <__fp_cmp>
     b82:	08 f4       	brcc	.+2      	; 0xb86 <__cmpsf2+0x6>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	08 95       	ret

00000b88 <__fixunssfsi>:
     b88:	7f d0       	rcall	.+254    	; 0xc88 <__fp_splitA>
     b8a:	88 f0       	brcs	.+34     	; 0xbae <__fixunssfsi+0x26>
     b8c:	9f 57       	subi	r25, 0x7F	; 127
     b8e:	90 f0       	brcs	.+36     	; 0xbb4 <__fixunssfsi+0x2c>
     b90:	b9 2f       	mov	r27, r25
     b92:	99 27       	eor	r25, r25
     b94:	b7 51       	subi	r27, 0x17	; 23
     b96:	a0 f0       	brcs	.+40     	; 0xbc0 <__fixunssfsi+0x38>
     b98:	d1 f0       	breq	.+52     	; 0xbce <__fixunssfsi+0x46>
     b9a:	66 0f       	add	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	88 1f       	adc	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	1a f0       	brmi	.+6      	; 0xbaa <__fixunssfsi+0x22>
     ba4:	ba 95       	dec	r27
     ba6:	c9 f7       	brne	.-14     	; 0xb9a <__fixunssfsi+0x12>
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__fixunssfsi+0x46>
     baa:	b1 30       	cpi	r27, 0x01	; 1
     bac:	81 f0       	breq	.+32     	; 0xbce <__fixunssfsi+0x46>
     bae:	86 d0       	rcall	.+268    	; 0xcbc <__fp_zero>
     bb0:	b1 e0       	ldi	r27, 0x01	; 1
     bb2:	08 95       	ret
     bb4:	83 c0       	rjmp	.+262    	; 0xcbc <__fp_zero>
     bb6:	67 2f       	mov	r22, r23
     bb8:	78 2f       	mov	r23, r24
     bba:	88 27       	eor	r24, r24
     bbc:	b8 5f       	subi	r27, 0xF8	; 248
     bbe:	39 f0       	breq	.+14     	; 0xbce <__fixunssfsi+0x46>
     bc0:	b9 3f       	cpi	r27, 0xF9	; 249
     bc2:	cc f3       	brlt	.-14     	; 0xbb6 <__fixunssfsi+0x2e>
     bc4:	86 95       	lsr	r24
     bc6:	77 95       	ror	r23
     bc8:	67 95       	ror	r22
     bca:	b3 95       	inc	r27
     bcc:	d9 f7       	brne	.-10     	; 0xbc4 <__fixunssfsi+0x3c>
     bce:	3e f4       	brtc	.+14     	; 0xbde <__fixunssfsi+0x56>
     bd0:	90 95       	com	r25
     bd2:	80 95       	com	r24
     bd4:	70 95       	com	r23
     bd6:	61 95       	neg	r22
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	8f 4f       	sbci	r24, 0xFF	; 255
     bdc:	9f 4f       	sbci	r25, 0xFF	; 255
     bde:	08 95       	ret

00000be0 <__fp_cmp>:
     be0:	99 0f       	add	r25, r25
     be2:	00 08       	sbc	r0, r0
     be4:	55 0f       	add	r21, r21
     be6:	aa 0b       	sbc	r26, r26
     be8:	e0 e8       	ldi	r30, 0x80	; 128
     bea:	fe ef       	ldi	r31, 0xFE	; 254
     bec:	16 16       	cp	r1, r22
     bee:	17 06       	cpc	r1, r23
     bf0:	e8 07       	cpc	r30, r24
     bf2:	f9 07       	cpc	r31, r25
     bf4:	c0 f0       	brcs	.+48     	; 0xc26 <__fp_cmp+0x46>
     bf6:	12 16       	cp	r1, r18
     bf8:	13 06       	cpc	r1, r19
     bfa:	e4 07       	cpc	r30, r20
     bfc:	f5 07       	cpc	r31, r21
     bfe:	98 f0       	brcs	.+38     	; 0xc26 <__fp_cmp+0x46>
     c00:	62 1b       	sub	r22, r18
     c02:	73 0b       	sbc	r23, r19
     c04:	84 0b       	sbc	r24, r20
     c06:	95 0b       	sbc	r25, r21
     c08:	39 f4       	brne	.+14     	; 0xc18 <__fp_cmp+0x38>
     c0a:	0a 26       	eor	r0, r26
     c0c:	61 f0       	breq	.+24     	; 0xc26 <__fp_cmp+0x46>
     c0e:	23 2b       	or	r18, r19
     c10:	24 2b       	or	r18, r20
     c12:	25 2b       	or	r18, r21
     c14:	21 f4       	brne	.+8      	; 0xc1e <__fp_cmp+0x3e>
     c16:	08 95       	ret
     c18:	0a 26       	eor	r0, r26
     c1a:	09 f4       	brne	.+2      	; 0xc1e <__fp_cmp+0x3e>
     c1c:	a1 40       	sbci	r26, 0x01	; 1
     c1e:	a6 95       	lsr	r26
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	81 1d       	adc	r24, r1
     c24:	81 1d       	adc	r24, r1
     c26:	08 95       	ret

00000c28 <__fp_inf>:
     c28:	97 f9       	bld	r25, 7
     c2a:	9f 67       	ori	r25, 0x7F	; 127
     c2c:	80 e8       	ldi	r24, 0x80	; 128
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	08 95       	ret

00000c34 <__fp_nan>:
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	80 ec       	ldi	r24, 0xC0	; 192
     c38:	08 95       	ret

00000c3a <__fp_pscA>:
     c3a:	00 24       	eor	r0, r0
     c3c:	0a 94       	dec	r0
     c3e:	16 16       	cp	r1, r22
     c40:	17 06       	cpc	r1, r23
     c42:	18 06       	cpc	r1, r24
     c44:	09 06       	cpc	r0, r25
     c46:	08 95       	ret

00000c48 <__fp_pscB>:
     c48:	00 24       	eor	r0, r0
     c4a:	0a 94       	dec	r0
     c4c:	12 16       	cp	r1, r18
     c4e:	13 06       	cpc	r1, r19
     c50:	14 06       	cpc	r1, r20
     c52:	05 06       	cpc	r0, r21
     c54:	08 95       	ret

00000c56 <__fp_round>:
     c56:	09 2e       	mov	r0, r25
     c58:	03 94       	inc	r0
     c5a:	00 0c       	add	r0, r0
     c5c:	11 f4       	brne	.+4      	; 0xc62 <__fp_round+0xc>
     c5e:	88 23       	and	r24, r24
     c60:	52 f0       	brmi	.+20     	; 0xc76 <__fp_round+0x20>
     c62:	bb 0f       	add	r27, r27
     c64:	40 f4       	brcc	.+16     	; 0xc76 <__fp_round+0x20>
     c66:	bf 2b       	or	r27, r31
     c68:	11 f4       	brne	.+4      	; 0xc6e <__fp_round+0x18>
     c6a:	60 ff       	sbrs	r22, 0
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <__fp_round+0x20>
     c6e:	6f 5f       	subi	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	8f 4f       	sbci	r24, 0xFF	; 255
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	08 95       	ret

00000c78 <__fp_split3>:
     c78:	57 fd       	sbrc	r21, 7
     c7a:	90 58       	subi	r25, 0x80	; 128
     c7c:	44 0f       	add	r20, r20
     c7e:	55 1f       	adc	r21, r21
     c80:	59 f0       	breq	.+22     	; 0xc98 <__fp_splitA+0x10>
     c82:	5f 3f       	cpi	r21, 0xFF	; 255
     c84:	71 f0       	breq	.+28     	; 0xca2 <__fp_splitA+0x1a>
     c86:	47 95       	ror	r20

00000c88 <__fp_splitA>:
     c88:	88 0f       	add	r24, r24
     c8a:	97 fb       	bst	r25, 7
     c8c:	99 1f       	adc	r25, r25
     c8e:	61 f0       	breq	.+24     	; 0xca8 <__fp_splitA+0x20>
     c90:	9f 3f       	cpi	r25, 0xFF	; 255
     c92:	79 f0       	breq	.+30     	; 0xcb2 <__fp_splitA+0x2a>
     c94:	87 95       	ror	r24
     c96:	08 95       	ret
     c98:	12 16       	cp	r1, r18
     c9a:	13 06       	cpc	r1, r19
     c9c:	14 06       	cpc	r1, r20
     c9e:	55 1f       	adc	r21, r21
     ca0:	f2 cf       	rjmp	.-28     	; 0xc86 <__fp_split3+0xe>
     ca2:	46 95       	lsr	r20
     ca4:	f1 df       	rcall	.-30     	; 0xc88 <__fp_splitA>
     ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <__fp_splitA+0x30>
     ca8:	16 16       	cp	r1, r22
     caa:	17 06       	cpc	r1, r23
     cac:	18 06       	cpc	r1, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	f1 cf       	rjmp	.-30     	; 0xc94 <__fp_splitA+0xc>
     cb2:	86 95       	lsr	r24
     cb4:	71 05       	cpc	r23, r1
     cb6:	61 05       	cpc	r22, r1
     cb8:	08 94       	sec
     cba:	08 95       	ret

00000cbc <__fp_zero>:
     cbc:	e8 94       	clt

00000cbe <__fp_szero>:
     cbe:	bb 27       	eor	r27, r27
     cc0:	66 27       	eor	r22, r22
     cc2:	77 27       	eor	r23, r23
     cc4:	cb 01       	movw	r24, r22
     cc6:	97 f9       	bld	r25, 7
     cc8:	08 95       	ret

00000cca <__gesf2>:
     cca:	8a df       	rcall	.-236    	; 0xbe0 <__fp_cmp>
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <__gesf2+0x6>
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	08 95       	ret

00000cd2 <__mulsf3>:
     cd2:	0b d0       	rcall	.+22     	; 0xcea <__mulsf3x>
     cd4:	c0 cf       	rjmp	.-128    	; 0xc56 <__fp_round>
     cd6:	b1 df       	rcall	.-158    	; 0xc3a <__fp_pscA>
     cd8:	28 f0       	brcs	.+10     	; 0xce4 <__mulsf3+0x12>
     cda:	b6 df       	rcall	.-148    	; 0xc48 <__fp_pscB>
     cdc:	18 f0       	brcs	.+6      	; 0xce4 <__mulsf3+0x12>
     cde:	95 23       	and	r25, r21
     ce0:	09 f0       	breq	.+2      	; 0xce4 <__mulsf3+0x12>
     ce2:	a2 cf       	rjmp	.-188    	; 0xc28 <__fp_inf>
     ce4:	a7 cf       	rjmp	.-178    	; 0xc34 <__fp_nan>
     ce6:	11 24       	eor	r1, r1
     ce8:	ea cf       	rjmp	.-44     	; 0xcbe <__fp_szero>

00000cea <__mulsf3x>:
     cea:	c6 df       	rcall	.-116    	; 0xc78 <__fp_split3>
     cec:	a0 f3       	brcs	.-24     	; 0xcd6 <__mulsf3+0x4>

00000cee <__mulsf3_pse>:
     cee:	95 9f       	mul	r25, r21
     cf0:	d1 f3       	breq	.-12     	; 0xce6 <__mulsf3+0x14>
     cf2:	95 0f       	add	r25, r21
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	55 1f       	adc	r21, r21
     cf8:	62 9f       	mul	r22, r18
     cfa:	f0 01       	movw	r30, r0
     cfc:	72 9f       	mul	r23, r18
     cfe:	bb 27       	eor	r27, r27
     d00:	f0 0d       	add	r31, r0
     d02:	b1 1d       	adc	r27, r1
     d04:	63 9f       	mul	r22, r19
     d06:	aa 27       	eor	r26, r26
     d08:	f0 0d       	add	r31, r0
     d0a:	b1 1d       	adc	r27, r1
     d0c:	aa 1f       	adc	r26, r26
     d0e:	64 9f       	mul	r22, r20
     d10:	66 27       	eor	r22, r22
     d12:	b0 0d       	add	r27, r0
     d14:	a1 1d       	adc	r26, r1
     d16:	66 1f       	adc	r22, r22
     d18:	82 9f       	mul	r24, r18
     d1a:	22 27       	eor	r18, r18
     d1c:	b0 0d       	add	r27, r0
     d1e:	a1 1d       	adc	r26, r1
     d20:	62 1f       	adc	r22, r18
     d22:	73 9f       	mul	r23, r19
     d24:	b0 0d       	add	r27, r0
     d26:	a1 1d       	adc	r26, r1
     d28:	62 1f       	adc	r22, r18
     d2a:	83 9f       	mul	r24, r19
     d2c:	a0 0d       	add	r26, r0
     d2e:	61 1d       	adc	r22, r1
     d30:	22 1f       	adc	r18, r18
     d32:	74 9f       	mul	r23, r20
     d34:	33 27       	eor	r19, r19
     d36:	a0 0d       	add	r26, r0
     d38:	61 1d       	adc	r22, r1
     d3a:	23 1f       	adc	r18, r19
     d3c:	84 9f       	mul	r24, r20
     d3e:	60 0d       	add	r22, r0
     d40:	21 1d       	adc	r18, r1
     d42:	82 2f       	mov	r24, r18
     d44:	76 2f       	mov	r23, r22
     d46:	6a 2f       	mov	r22, r26
     d48:	11 24       	eor	r1, r1
     d4a:	9f 57       	subi	r25, 0x7F	; 127
     d4c:	50 40       	sbci	r21, 0x00	; 0
     d4e:	8a f0       	brmi	.+34     	; 0xd72 <__mulsf3_pse+0x84>
     d50:	e1 f0       	breq	.+56     	; 0xd8a <__mulsf3_pse+0x9c>
     d52:	88 23       	and	r24, r24
     d54:	4a f0       	brmi	.+18     	; 0xd68 <__mulsf3_pse+0x7a>
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	bb 1f       	adc	r27, r27
     d5c:	66 1f       	adc	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	88 1f       	adc	r24, r24
     d62:	91 50       	subi	r25, 0x01	; 1
     d64:	50 40       	sbci	r21, 0x00	; 0
     d66:	a9 f7       	brne	.-22     	; 0xd52 <__mulsf3_pse+0x64>
     d68:	9e 3f       	cpi	r25, 0xFE	; 254
     d6a:	51 05       	cpc	r21, r1
     d6c:	70 f0       	brcs	.+28     	; 0xd8a <__mulsf3_pse+0x9c>
     d6e:	5c cf       	rjmp	.-328    	; 0xc28 <__fp_inf>
     d70:	a6 cf       	rjmp	.-180    	; 0xcbe <__fp_szero>
     d72:	5f 3f       	cpi	r21, 0xFF	; 255
     d74:	ec f3       	brlt	.-6      	; 0xd70 <__mulsf3_pse+0x82>
     d76:	98 3e       	cpi	r25, 0xE8	; 232
     d78:	dc f3       	brlt	.-10     	; 0xd70 <__mulsf3_pse+0x82>
     d7a:	86 95       	lsr	r24
     d7c:	77 95       	ror	r23
     d7e:	67 95       	ror	r22
     d80:	b7 95       	ror	r27
     d82:	f7 95       	ror	r31
     d84:	e7 95       	ror	r30
     d86:	9f 5f       	subi	r25, 0xFF	; 255
     d88:	c1 f7       	brne	.-16     	; 0xd7a <__mulsf3_pse+0x8c>
     d8a:	fe 2b       	or	r31, r30
     d8c:	88 0f       	add	r24, r24
     d8e:	91 1d       	adc	r25, r1
     d90:	96 95       	lsr	r25
     d92:	87 95       	ror	r24
     d94:	97 f9       	bld	r25, 7
     d96:	08 95       	ret

00000d98 <fdevopen>:
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	ec 01       	movw	r28, r24
     da2:	8b 01       	movw	r16, r22
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	31 f4       	brne	.+12     	; 0xdb4 <fdevopen+0x1c>
     da8:	61 15       	cp	r22, r1
     daa:	71 05       	cpc	r23, r1
     dac:	19 f4       	brne	.+6      	; 0xdb4 <fdevopen+0x1c>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	38 c0       	rjmp	.+112    	; 0xe24 <fdevopen+0x8c>
     db4:	6e e0       	ldi	r22, 0x0E	; 14
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 2a 09 	call	0x1254	; 0x1254 <calloc>
     dc0:	fc 01       	movw	r30, r24
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	a1 f3       	breq	.-24     	; 0xdae <fdevopen+0x16>
     dc6:	80 e8       	ldi	r24, 0x80	; 128
     dc8:	83 83       	std	Z+3, r24	; 0x03
     dca:	01 15       	cp	r16, r1
     dcc:	11 05       	cpc	r17, r1
     dce:	71 f0       	breq	.+28     	; 0xdec <fdevopen+0x54>
     dd0:	13 87       	std	Z+11, r17	; 0x0b
     dd2:	02 87       	std	Z+10, r16	; 0x0a
     dd4:	81 e8       	ldi	r24, 0x81	; 129
     dd6:	83 83       	std	Z+3, r24	; 0x03
     dd8:	80 91 42 01 	lds	r24, 0x0142
     ddc:	90 91 43 01 	lds	r25, 0x0143
     de0:	89 2b       	or	r24, r25
     de2:	21 f4       	brne	.+8      	; 0xdec <fdevopen+0x54>
     de4:	f0 93 43 01 	sts	0x0143, r31
     de8:	e0 93 42 01 	sts	0x0142, r30
     dec:	20 97       	sbiw	r28, 0x00	; 0
     dee:	c9 f0       	breq	.+50     	; 0xe22 <fdevopen+0x8a>
     df0:	d1 87       	std	Z+9, r29	; 0x09
     df2:	c0 87       	std	Z+8, r28	; 0x08
     df4:	83 81       	ldd	r24, Z+3	; 0x03
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	83 83       	std	Z+3, r24	; 0x03
     dfa:	80 91 44 01 	lds	r24, 0x0144
     dfe:	90 91 45 01 	lds	r25, 0x0145
     e02:	89 2b       	or	r24, r25
     e04:	71 f4       	brne	.+28     	; 0xe22 <fdevopen+0x8a>
     e06:	f0 93 45 01 	sts	0x0145, r31
     e0a:	e0 93 44 01 	sts	0x0144, r30
     e0e:	80 91 46 01 	lds	r24, 0x0146
     e12:	90 91 47 01 	lds	r25, 0x0147
     e16:	89 2b       	or	r24, r25
     e18:	21 f4       	brne	.+8      	; 0xe22 <fdevopen+0x8a>
     e1a:	f0 93 47 01 	sts	0x0147, r31
     e1e:	e0 93 46 01 	sts	0x0146, r30
     e22:	cf 01       	movw	r24, r30
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	08 95       	ret

00000e2e <printf>:
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ed e1       	ldi	r30, 0x1D	; 29
     e34:	f7 e0       	ldi	r31, 0x07	; 7
     e36:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__prologue_saves__+0x20>
     e3a:	fe 01       	movw	r30, r28
     e3c:	35 96       	adiw	r30, 0x05	; 5
     e3e:	61 91       	ld	r22, Z+
     e40:	71 91       	ld	r23, Z+
     e42:	af 01       	movw	r20, r30
     e44:	80 91 44 01 	lds	r24, 0x0144
     e48:	90 91 45 01 	lds	r25, 0x0145
     e4c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <vfprintf>
     e50:	e2 e0       	ldi	r30, 0x02	; 2
     e52:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__epilogue_restores__+0x20>

00000e56 <puts>:
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	e0 91 44 01 	lds	r30, 0x0144
     e62:	f0 91 45 01 	lds	r31, 0x0145
     e66:	23 81       	ldd	r18, Z+3	; 0x03
     e68:	21 ff       	sbrs	r18, 1
     e6a:	1b c0       	rjmp	.+54     	; 0xea2 <puts+0x4c>
     e6c:	ec 01       	movw	r28, r24
     e6e:	00 e0       	ldi	r16, 0x00	; 0
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	89 91       	ld	r24, Y+
     e74:	60 91 44 01 	lds	r22, 0x0144
     e78:	70 91 45 01 	lds	r23, 0x0145
     e7c:	db 01       	movw	r26, r22
     e7e:	18 96       	adiw	r26, 0x08	; 8
     e80:	ed 91       	ld	r30, X+
     e82:	fc 91       	ld	r31, X
     e84:	19 97       	sbiw	r26, 0x09	; 9
     e86:	88 23       	and	r24, r24
     e88:	31 f0       	breq	.+12     	; 0xe96 <puts+0x40>
     e8a:	09 95       	icall
     e8c:	89 2b       	or	r24, r25
     e8e:	89 f3       	breq	.-30     	; 0xe72 <puts+0x1c>
     e90:	0f ef       	ldi	r16, 0xFF	; 255
     e92:	1f ef       	ldi	r17, 0xFF	; 255
     e94:	ee cf       	rjmp	.-36     	; 0xe72 <puts+0x1c>
     e96:	8a e0       	ldi	r24, 0x0A	; 10
     e98:	09 95       	icall
     e9a:	89 2b       	or	r24, r25
     e9c:	11 f4       	brne	.+4      	; 0xea2 <puts+0x4c>
     e9e:	c8 01       	movw	r24, r16
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <puts+0x50>
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	9f ef       	ldi	r25, 0xFF	; 255
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <vfprintf>:
     eb0:	ac e0       	ldi	r26, 0x0C	; 12
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ee e5       	ldi	r30, 0x5E	; 94
     eb6:	f7 e0       	ldi	r31, 0x07	; 7
     eb8:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__prologue_saves__>
     ebc:	7c 01       	movw	r14, r24
     ebe:	6b 01       	movw	r12, r22
     ec0:	8a 01       	movw	r16, r20
     ec2:	fc 01       	movw	r30, r24
     ec4:	17 82       	std	Z+7, r1	; 0x07
     ec6:	16 82       	std	Z+6, r1	; 0x06
     ec8:	83 81       	ldd	r24, Z+3	; 0x03
     eca:	81 ff       	sbrs	r24, 1
     ecc:	bd c1       	rjmp	.+890    	; 0x1248 <vfprintf+0x398>
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	4c 01       	movw	r8, r24
     ed4:	f7 01       	movw	r30, r14
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	f6 01       	movw	r30, r12
     eda:	93 fd       	sbrc	r25, 3
     edc:	85 91       	lpm	r24, Z+
     ede:	93 ff       	sbrs	r25, 3
     ee0:	81 91       	ld	r24, Z+
     ee2:	6f 01       	movw	r12, r30
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <vfprintf+0x3a>
     ee8:	ab c1       	rjmp	.+854    	; 0x1240 <vfprintf+0x390>
     eea:	85 32       	cpi	r24, 0x25	; 37
     eec:	39 f4       	brne	.+14     	; 0xefc <vfprintf+0x4c>
     eee:	93 fd       	sbrc	r25, 3
     ef0:	85 91       	lpm	r24, Z+
     ef2:	93 ff       	sbrs	r25, 3
     ef4:	81 91       	ld	r24, Z+
     ef6:	6f 01       	movw	r12, r30
     ef8:	85 32       	cpi	r24, 0x25	; 37
     efa:	29 f4       	brne	.+10     	; 0xf06 <vfprintf+0x56>
     efc:	b7 01       	movw	r22, r14
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     f04:	e7 cf       	rjmp	.-50     	; 0xed4 <vfprintf+0x24>
     f06:	51 2c       	mov	r5, r1
     f08:	31 2c       	mov	r3, r1
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	20 32       	cpi	r18, 0x20	; 32
     f0e:	a0 f4       	brcc	.+40     	; 0xf38 <vfprintf+0x88>
     f10:	8b 32       	cpi	r24, 0x2B	; 43
     f12:	69 f0       	breq	.+26     	; 0xf2e <vfprintf+0x7e>
     f14:	30 f4       	brcc	.+12     	; 0xf22 <vfprintf+0x72>
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	59 f0       	breq	.+22     	; 0xf30 <vfprintf+0x80>
     f1a:	83 32       	cpi	r24, 0x23	; 35
     f1c:	69 f4       	brne	.+26     	; 0xf38 <vfprintf+0x88>
     f1e:	20 61       	ori	r18, 0x10	; 16
     f20:	2c c0       	rjmp	.+88     	; 0xf7a <vfprintf+0xca>
     f22:	8d 32       	cpi	r24, 0x2D	; 45
     f24:	39 f0       	breq	.+14     	; 0xf34 <vfprintf+0x84>
     f26:	80 33       	cpi	r24, 0x30	; 48
     f28:	39 f4       	brne	.+14     	; 0xf38 <vfprintf+0x88>
     f2a:	21 60       	ori	r18, 0x01	; 1
     f2c:	26 c0       	rjmp	.+76     	; 0xf7a <vfprintf+0xca>
     f2e:	22 60       	ori	r18, 0x02	; 2
     f30:	24 60       	ori	r18, 0x04	; 4
     f32:	23 c0       	rjmp	.+70     	; 0xf7a <vfprintf+0xca>
     f34:	28 60       	ori	r18, 0x08	; 8
     f36:	21 c0       	rjmp	.+66     	; 0xf7a <vfprintf+0xca>
     f38:	27 fd       	sbrc	r18, 7
     f3a:	27 c0       	rjmp	.+78     	; 0xf8a <vfprintf+0xda>
     f3c:	30 ed       	ldi	r19, 0xD0	; 208
     f3e:	38 0f       	add	r19, r24
     f40:	3a 30       	cpi	r19, 0x0A	; 10
     f42:	78 f4       	brcc	.+30     	; 0xf62 <vfprintf+0xb2>
     f44:	26 ff       	sbrs	r18, 6
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <vfprintf+0xa4>
     f48:	fa e0       	ldi	r31, 0x0A	; 10
     f4a:	5f 9e       	mul	r5, r31
     f4c:	30 0d       	add	r19, r0
     f4e:	11 24       	eor	r1, r1
     f50:	53 2e       	mov	r5, r19
     f52:	13 c0       	rjmp	.+38     	; 0xf7a <vfprintf+0xca>
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	38 9e       	mul	r3, r24
     f58:	30 0d       	add	r19, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	33 2e       	mov	r3, r19
     f5e:	20 62       	ori	r18, 0x20	; 32
     f60:	0c c0       	rjmp	.+24     	; 0xf7a <vfprintf+0xca>
     f62:	8e 32       	cpi	r24, 0x2E	; 46
     f64:	21 f4       	brne	.+8      	; 0xf6e <vfprintf+0xbe>
     f66:	26 fd       	sbrc	r18, 6
     f68:	6b c1       	rjmp	.+726    	; 0x1240 <vfprintf+0x390>
     f6a:	20 64       	ori	r18, 0x40	; 64
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <vfprintf+0xca>
     f6e:	8c 36       	cpi	r24, 0x6C	; 108
     f70:	11 f4       	brne	.+4      	; 0xf76 <vfprintf+0xc6>
     f72:	20 68       	ori	r18, 0x80	; 128
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <vfprintf+0xca>
     f76:	88 36       	cpi	r24, 0x68	; 104
     f78:	41 f4       	brne	.+16     	; 0xf8a <vfprintf+0xda>
     f7a:	f6 01       	movw	r30, r12
     f7c:	93 fd       	sbrc	r25, 3
     f7e:	85 91       	lpm	r24, Z+
     f80:	93 ff       	sbrs	r25, 3
     f82:	81 91       	ld	r24, Z+
     f84:	6f 01       	movw	r12, r30
     f86:	81 11       	cpse	r24, r1
     f88:	c1 cf       	rjmp	.-126    	; 0xf0c <vfprintf+0x5c>
     f8a:	98 2f       	mov	r25, r24
     f8c:	9f 7d       	andi	r25, 0xDF	; 223
     f8e:	95 54       	subi	r25, 0x45	; 69
     f90:	93 30       	cpi	r25, 0x03	; 3
     f92:	28 f4       	brcc	.+10     	; 0xf9e <vfprintf+0xee>
     f94:	0c 5f       	subi	r16, 0xFC	; 252
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	ff e3       	ldi	r31, 0x3F	; 63
     f9a:	f9 83       	std	Y+1, r31	; 0x01
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <vfprintf+0x108>
     f9e:	83 36       	cpi	r24, 0x63	; 99
     fa0:	31 f0       	breq	.+12     	; 0xfae <vfprintf+0xfe>
     fa2:	83 37       	cpi	r24, 0x73	; 115
     fa4:	71 f0       	breq	.+28     	; 0xfc2 <vfprintf+0x112>
     fa6:	83 35       	cpi	r24, 0x53	; 83
     fa8:	09 f0       	breq	.+2      	; 0xfac <vfprintf+0xfc>
     faa:	5b c0       	rjmp	.+182    	; 0x1062 <vfprintf+0x1b2>
     fac:	22 c0       	rjmp	.+68     	; 0xff2 <vfprintf+0x142>
     fae:	f8 01       	movw	r30, r16
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	0e 5f       	subi	r16, 0xFE	; 254
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	44 24       	eor	r4, r4
     fba:	43 94       	inc	r4
     fbc:	51 2c       	mov	r5, r1
     fbe:	54 01       	movw	r10, r8
     fc0:	15 c0       	rjmp	.+42     	; 0xfec <vfprintf+0x13c>
     fc2:	38 01       	movw	r6, r16
     fc4:	f2 e0       	ldi	r31, 0x02	; 2
     fc6:	6f 0e       	add	r6, r31
     fc8:	71 1c       	adc	r7, r1
     fca:	f8 01       	movw	r30, r16
     fcc:	a0 80       	ld	r10, Z
     fce:	b1 80       	ldd	r11, Z+1	; 0x01
     fd0:	26 ff       	sbrs	r18, 6
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <vfprintf+0x12a>
     fd4:	65 2d       	mov	r22, r5
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <vfprintf+0x12e>
     fda:	6f ef       	ldi	r22, 0xFF	; 255
     fdc:	7f ef       	ldi	r23, 0xFF	; 255
     fde:	c5 01       	movw	r24, r10
     fe0:	2c 87       	std	Y+12, r18	; 0x0c
     fe2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <strnlen>
     fe6:	2c 01       	movw	r4, r24
     fe8:	83 01       	movw	r16, r6
     fea:	2c 85       	ldd	r18, Y+12	; 0x0c
     fec:	2f 77       	andi	r18, 0x7F	; 127
     fee:	22 2e       	mov	r2, r18
     ff0:	17 c0       	rjmp	.+46     	; 0x1020 <vfprintf+0x170>
     ff2:	38 01       	movw	r6, r16
     ff4:	f2 e0       	ldi	r31, 0x02	; 2
     ff6:	6f 0e       	add	r6, r31
     ff8:	71 1c       	adc	r7, r1
     ffa:	f8 01       	movw	r30, r16
     ffc:	a0 80       	ld	r10, Z
     ffe:	b1 80       	ldd	r11, Z+1	; 0x01
    1000:	26 ff       	sbrs	r18, 6
    1002:	03 c0       	rjmp	.+6      	; 0x100a <vfprintf+0x15a>
    1004:	65 2d       	mov	r22, r5
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	02 c0       	rjmp	.+4      	; 0x100e <vfprintf+0x15e>
    100a:	6f ef       	ldi	r22, 0xFF	; 255
    100c:	7f ef       	ldi	r23, 0xFF	; 255
    100e:	c5 01       	movw	r24, r10
    1010:	2c 87       	std	Y+12, r18	; 0x0c
    1012:	0e 94 6d 0a 	call	0x14da	; 0x14da <strnlen_P>
    1016:	2c 01       	movw	r4, r24
    1018:	2c 85       	ldd	r18, Y+12	; 0x0c
    101a:	20 68       	ori	r18, 0x80	; 128
    101c:	22 2e       	mov	r2, r18
    101e:	83 01       	movw	r16, r6
    1020:	23 fc       	sbrc	r2, 3
    1022:	1b c0       	rjmp	.+54     	; 0x105a <vfprintf+0x1aa>
    1024:	83 2d       	mov	r24, r3
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	48 16       	cp	r4, r24
    102a:	59 06       	cpc	r5, r25
    102c:	b0 f4       	brcc	.+44     	; 0x105a <vfprintf+0x1aa>
    102e:	b7 01       	movw	r22, r14
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
    1038:	3a 94       	dec	r3
    103a:	f4 cf       	rjmp	.-24     	; 0x1024 <vfprintf+0x174>
    103c:	f5 01       	movw	r30, r10
    103e:	27 fc       	sbrc	r2, 7
    1040:	85 91       	lpm	r24, Z+
    1042:	27 fe       	sbrs	r2, 7
    1044:	81 91       	ld	r24, Z+
    1046:	5f 01       	movw	r10, r30
    1048:	b7 01       	movw	r22, r14
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
    1050:	31 10       	cpse	r3, r1
    1052:	3a 94       	dec	r3
    1054:	f1 e0       	ldi	r31, 0x01	; 1
    1056:	4f 1a       	sub	r4, r31
    1058:	51 08       	sbc	r5, r1
    105a:	41 14       	cp	r4, r1
    105c:	51 04       	cpc	r5, r1
    105e:	71 f7       	brne	.-36     	; 0x103c <vfprintf+0x18c>
    1060:	e5 c0       	rjmp	.+458    	; 0x122c <vfprintf+0x37c>
    1062:	84 36       	cpi	r24, 0x64	; 100
    1064:	11 f0       	breq	.+4      	; 0x106a <vfprintf+0x1ba>
    1066:	89 36       	cpi	r24, 0x69	; 105
    1068:	39 f5       	brne	.+78     	; 0x10b8 <vfprintf+0x208>
    106a:	f8 01       	movw	r30, r16
    106c:	27 ff       	sbrs	r18, 7
    106e:	07 c0       	rjmp	.+14     	; 0x107e <vfprintf+0x1ce>
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	0c 5f       	subi	r16, 0xFC	; 252
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
    107c:	08 c0       	rjmp	.+16     	; 0x108e <vfprintf+0x1de>
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	88 27       	eor	r24, r24
    1084:	77 fd       	sbrc	r23, 7
    1086:	80 95       	com	r24
    1088:	98 2f       	mov	r25, r24
    108a:	0e 5f       	subi	r16, 0xFE	; 254
    108c:	1f 4f       	sbci	r17, 0xFF	; 255
    108e:	2f 76       	andi	r18, 0x6F	; 111
    1090:	b2 2e       	mov	r11, r18
    1092:	97 ff       	sbrs	r25, 7
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <vfprintf+0x1f8>
    1096:	90 95       	com	r25
    1098:	80 95       	com	r24
    109a:	70 95       	com	r23
    109c:	61 95       	neg	r22
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	20 68       	ori	r18, 0x80	; 128
    10a6:	b2 2e       	mov	r11, r18
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	a4 01       	movw	r20, r8
    10ae:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ultoa_invert>
    10b2:	a8 2e       	mov	r10, r24
    10b4:	a8 18       	sub	r10, r8
    10b6:	44 c0       	rjmp	.+136    	; 0x1140 <vfprintf+0x290>
    10b8:	85 37       	cpi	r24, 0x75	; 117
    10ba:	29 f4       	brne	.+10     	; 0x10c6 <vfprintf+0x216>
    10bc:	2f 7e       	andi	r18, 0xEF	; 239
    10be:	b2 2e       	mov	r11, r18
    10c0:	2a e0       	ldi	r18, 0x0A	; 10
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	25 c0       	rjmp	.+74     	; 0x1110 <vfprintf+0x260>
    10c6:	f2 2f       	mov	r31, r18
    10c8:	f9 7f       	andi	r31, 0xF9	; 249
    10ca:	bf 2e       	mov	r11, r31
    10cc:	8f 36       	cpi	r24, 0x6F	; 111
    10ce:	c1 f0       	breq	.+48     	; 0x1100 <vfprintf+0x250>
    10d0:	18 f4       	brcc	.+6      	; 0x10d8 <vfprintf+0x228>
    10d2:	88 35       	cpi	r24, 0x58	; 88
    10d4:	79 f0       	breq	.+30     	; 0x10f4 <vfprintf+0x244>
    10d6:	b4 c0       	rjmp	.+360    	; 0x1240 <vfprintf+0x390>
    10d8:	80 37       	cpi	r24, 0x70	; 112
    10da:	19 f0       	breq	.+6      	; 0x10e2 <vfprintf+0x232>
    10dc:	88 37       	cpi	r24, 0x78	; 120
    10de:	21 f0       	breq	.+8      	; 0x10e8 <vfprintf+0x238>
    10e0:	af c0       	rjmp	.+350    	; 0x1240 <vfprintf+0x390>
    10e2:	2f 2f       	mov	r18, r31
    10e4:	20 61       	ori	r18, 0x10	; 16
    10e6:	b2 2e       	mov	r11, r18
    10e8:	b4 fe       	sbrs	r11, 4
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <vfprintf+0x256>
    10ec:	8b 2d       	mov	r24, r11
    10ee:	84 60       	ori	r24, 0x04	; 4
    10f0:	b8 2e       	mov	r11, r24
    10f2:	09 c0       	rjmp	.+18     	; 0x1106 <vfprintf+0x256>
    10f4:	24 ff       	sbrs	r18, 4
    10f6:	0a c0       	rjmp	.+20     	; 0x110c <vfprintf+0x25c>
    10f8:	9f 2f       	mov	r25, r31
    10fa:	96 60       	ori	r25, 0x06	; 6
    10fc:	b9 2e       	mov	r11, r25
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <vfprintf+0x25c>
    1100:	28 e0       	ldi	r18, 0x08	; 8
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <vfprintf+0x260>
    1106:	20 e1       	ldi	r18, 0x10	; 16
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vfprintf+0x260>
    110c:	20 e1       	ldi	r18, 0x10	; 16
    110e:	32 e0       	ldi	r19, 0x02	; 2
    1110:	f8 01       	movw	r30, r16
    1112:	b7 fe       	sbrs	r11, 7
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <vfprintf+0x274>
    1116:	60 81       	ld	r22, Z
    1118:	71 81       	ldd	r23, Z+1	; 0x01
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	0c 5f       	subi	r16, 0xFC	; 252
    1120:	1f 4f       	sbci	r17, 0xFF	; 255
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <vfprintf+0x280>
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 5f       	subi	r16, 0xFE	; 254
    112e:	1f 4f       	sbci	r17, 0xFF	; 255
    1130:	a4 01       	movw	r20, r8
    1132:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ultoa_invert>
    1136:	a8 2e       	mov	r10, r24
    1138:	a8 18       	sub	r10, r8
    113a:	fb 2d       	mov	r31, r11
    113c:	ff 77       	andi	r31, 0x7F	; 127
    113e:	bf 2e       	mov	r11, r31
    1140:	b6 fe       	sbrs	r11, 6
    1142:	0b c0       	rjmp	.+22     	; 0x115a <vfprintf+0x2aa>
    1144:	2b 2d       	mov	r18, r11
    1146:	2e 7f       	andi	r18, 0xFE	; 254
    1148:	a5 14       	cp	r10, r5
    114a:	50 f4       	brcc	.+20     	; 0x1160 <vfprintf+0x2b0>
    114c:	b4 fe       	sbrs	r11, 4
    114e:	0a c0       	rjmp	.+20     	; 0x1164 <vfprintf+0x2b4>
    1150:	b2 fc       	sbrc	r11, 2
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <vfprintf+0x2b4>
    1154:	2b 2d       	mov	r18, r11
    1156:	2e 7e       	andi	r18, 0xEE	; 238
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <vfprintf+0x2b4>
    115a:	7a 2c       	mov	r7, r10
    115c:	2b 2d       	mov	r18, r11
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <vfprintf+0x2b6>
    1160:	7a 2c       	mov	r7, r10
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <vfprintf+0x2b6>
    1164:	75 2c       	mov	r7, r5
    1166:	24 ff       	sbrs	r18, 4
    1168:	0d c0       	rjmp	.+26     	; 0x1184 <vfprintf+0x2d4>
    116a:	fe 01       	movw	r30, r28
    116c:	ea 0d       	add	r30, r10
    116e:	f1 1d       	adc	r31, r1
    1170:	80 81       	ld	r24, Z
    1172:	80 33       	cpi	r24, 0x30	; 48
    1174:	11 f4       	brne	.+4      	; 0x117a <vfprintf+0x2ca>
    1176:	29 7e       	andi	r18, 0xE9	; 233
    1178:	09 c0       	rjmp	.+18     	; 0x118c <vfprintf+0x2dc>
    117a:	22 ff       	sbrs	r18, 2
    117c:	06 c0       	rjmp	.+12     	; 0x118a <vfprintf+0x2da>
    117e:	73 94       	inc	r7
    1180:	73 94       	inc	r7
    1182:	04 c0       	rjmp	.+8      	; 0x118c <vfprintf+0x2dc>
    1184:	82 2f       	mov	r24, r18
    1186:	86 78       	andi	r24, 0x86	; 134
    1188:	09 f0       	breq	.+2      	; 0x118c <vfprintf+0x2dc>
    118a:	73 94       	inc	r7
    118c:	23 fd       	sbrc	r18, 3
    118e:	13 c0       	rjmp	.+38     	; 0x11b6 <vfprintf+0x306>
    1190:	20 ff       	sbrs	r18, 0
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0x2f0>
    1194:	5a 2c       	mov	r5, r10
    1196:	73 14       	cp	r7, r3
    1198:	18 f4       	brcc	.+6      	; 0x11a0 <vfprintf+0x2f0>
    119a:	53 0c       	add	r5, r3
    119c:	57 18       	sub	r5, r7
    119e:	73 2c       	mov	r7, r3
    11a0:	73 14       	cp	r7, r3
    11a2:	68 f4       	brcc	.+26     	; 0x11be <vfprintf+0x30e>
    11a4:	b7 01       	movw	r22, r14
    11a6:	80 e2       	ldi	r24, 0x20	; 32
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	2c 87       	std	Y+12, r18	; 0x0c
    11ac:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
    11b0:	73 94       	inc	r7
    11b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b4:	f5 cf       	rjmp	.-22     	; 0x11a0 <vfprintf+0x2f0>
    11b6:	73 14       	cp	r7, r3
    11b8:	10 f4       	brcc	.+4      	; 0x11be <vfprintf+0x30e>
    11ba:	37 18       	sub	r3, r7
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <vfprintf+0x310>
    11be:	31 2c       	mov	r3, r1
    11c0:	24 ff       	sbrs	r18, 4
    11c2:	12 c0       	rjmp	.+36     	; 0x11e8 <vfprintf+0x338>
    11c4:	b7 01       	movw	r22, r14
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	2c 87       	std	Y+12, r18	; 0x0c
    11cc:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
    11d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11d2:	22 ff       	sbrs	r18, 2
    11d4:	17 c0       	rjmp	.+46     	; 0x1204 <vfprintf+0x354>
    11d6:	21 ff       	sbrs	r18, 1
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <vfprintf+0x330>
    11da:	88 e5       	ldi	r24, 0x58	; 88
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <vfprintf+0x334>
    11e0:	88 e7       	ldi	r24, 0x78	; 120
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	b7 01       	movw	r22, r14
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <vfprintf+0x350>
    11e8:	82 2f       	mov	r24, r18
    11ea:	86 78       	andi	r24, 0x86	; 134
    11ec:	59 f0       	breq	.+22     	; 0x1204 <vfprintf+0x354>
    11ee:	21 fd       	sbrc	r18, 1
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <vfprintf+0x346>
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <vfprintf+0x348>
    11f6:	8b e2       	ldi	r24, 0x2B	; 43
    11f8:	27 fd       	sbrc	r18, 7
    11fa:	8d e2       	ldi	r24, 0x2D	; 45
    11fc:	b7 01       	movw	r22, r14
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
    1204:	a5 14       	cp	r10, r5
    1206:	38 f4       	brcc	.+14     	; 0x1216 <vfprintf+0x366>
    1208:	b7 01       	movw	r22, r14
    120a:	80 e3       	ldi	r24, 0x30	; 48
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
    1212:	5a 94       	dec	r5
    1214:	f7 cf       	rjmp	.-18     	; 0x1204 <vfprintf+0x354>
    1216:	aa 94       	dec	r10
    1218:	f4 01       	movw	r30, r8
    121a:	ea 0d       	add	r30, r10
    121c:	f1 1d       	adc	r31, r1
    121e:	80 81       	ld	r24, Z
    1220:	b7 01       	movw	r22, r14
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
    1228:	a1 10       	cpse	r10, r1
    122a:	f5 cf       	rjmp	.-22     	; 0x1216 <vfprintf+0x366>
    122c:	33 20       	and	r3, r3
    122e:	09 f4       	brne	.+2      	; 0x1232 <vfprintf+0x382>
    1230:	51 ce       	rjmp	.-862    	; 0xed4 <vfprintf+0x24>
    1232:	b7 01       	movw	r22, r14
    1234:	80 e2       	ldi	r24, 0x20	; 32
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
    123c:	3a 94       	dec	r3
    123e:	f6 cf       	rjmp	.-20     	; 0x122c <vfprintf+0x37c>
    1240:	f7 01       	movw	r30, r14
    1242:	86 81       	ldd	r24, Z+6	; 0x06
    1244:	97 81       	ldd	r25, Z+7	; 0x07
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfprintf+0x39c>
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	9f ef       	ldi	r25, 0xFF	; 255
    124c:	2c 96       	adiw	r28, 0x0c	; 12
    124e:	e2 e1       	ldi	r30, 0x12	; 18
    1250:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__epilogue_restores__>

00001254 <calloc>:
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	86 9f       	mul	r24, r22
    125e:	80 01       	movw	r16, r0
    1260:	87 9f       	mul	r24, r23
    1262:	10 0d       	add	r17, r0
    1264:	96 9f       	mul	r25, r22
    1266:	10 0d       	add	r17, r0
    1268:	11 24       	eor	r1, r1
    126a:	c8 01       	movw	r24, r16
    126c:	0e 94 46 09 	call	0x128c	; 0x128c <malloc>
    1270:	ec 01       	movw	r28, r24
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	29 f0       	breq	.+10     	; 0x1280 <calloc+0x2c>
    1276:	a8 01       	movw	r20, r16
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <memset>
    1280:	ce 01       	movw	r24, r28
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <malloc>:
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	91 05       	cpc	r25, r1
    1294:	10 f4       	brcc	.+4      	; 0x129a <malloc+0xe>
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	e0 91 4a 01 	lds	r30, 0x014A
    129e:	f0 91 4b 01 	lds	r31, 0x014B
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	30 97       	sbiw	r30, 0x00	; 0
    12ac:	39 f1       	breq	.+78     	; 0x12fc <malloc+0x70>
    12ae:	40 81       	ld	r20, Z
    12b0:	51 81       	ldd	r21, Z+1	; 0x01
    12b2:	48 17       	cp	r20, r24
    12b4:	59 07       	cpc	r21, r25
    12b6:	b8 f0       	brcs	.+46     	; 0x12e6 <malloc+0x5a>
    12b8:	48 17       	cp	r20, r24
    12ba:	59 07       	cpc	r21, r25
    12bc:	71 f4       	brne	.+28     	; 0x12da <malloc+0x4e>
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	10 97       	sbiw	r26, 0x00	; 0
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <malloc+0x44>
    12c6:	13 96       	adiw	r26, 0x03	; 3
    12c8:	9c 93       	st	X, r25
    12ca:	8e 93       	st	-X, r24
    12cc:	12 97       	sbiw	r26, 0x02	; 2
    12ce:	2c c0       	rjmp	.+88     	; 0x1328 <malloc+0x9c>
    12d0:	90 93 4b 01 	sts	0x014B, r25
    12d4:	80 93 4a 01 	sts	0x014A, r24
    12d8:	27 c0       	rjmp	.+78     	; 0x1328 <malloc+0x9c>
    12da:	21 15       	cp	r18, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	31 f0       	breq	.+12     	; 0x12ec <malloc+0x60>
    12e0:	42 17       	cp	r20, r18
    12e2:	53 07       	cpc	r21, r19
    12e4:	18 f0       	brcs	.+6      	; 0x12ec <malloc+0x60>
    12e6:	a9 01       	movw	r20, r18
    12e8:	db 01       	movw	r26, r22
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <malloc+0x62>
    12ec:	ef 01       	movw	r28, r30
    12ee:	9a 01       	movw	r18, r20
    12f0:	bd 01       	movw	r22, r26
    12f2:	df 01       	movw	r26, r30
    12f4:	02 80       	ldd	r0, Z+2	; 0x02
    12f6:	f3 81       	ldd	r31, Z+3	; 0x03
    12f8:	e0 2d       	mov	r30, r0
    12fa:	d7 cf       	rjmp	.-82     	; 0x12aa <malloc+0x1e>
    12fc:	21 15       	cp	r18, r1
    12fe:	31 05       	cpc	r19, r1
    1300:	f9 f0       	breq	.+62     	; 0x1340 <malloc+0xb4>
    1302:	28 1b       	sub	r18, r24
    1304:	39 0b       	sbc	r19, r25
    1306:	24 30       	cpi	r18, 0x04	; 4
    1308:	31 05       	cpc	r19, r1
    130a:	80 f4       	brcc	.+32     	; 0x132c <malloc+0xa0>
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	61 15       	cp	r22, r1
    1312:	71 05       	cpc	r23, r1
    1314:	21 f0       	breq	.+8      	; 0x131e <malloc+0x92>
    1316:	fb 01       	movw	r30, r22
    1318:	93 83       	std	Z+3, r25	; 0x03
    131a:	82 83       	std	Z+2, r24	; 0x02
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <malloc+0x9a>
    131e:	90 93 4b 01 	sts	0x014B, r25
    1322:	80 93 4a 01 	sts	0x014A, r24
    1326:	fe 01       	movw	r30, r28
    1328:	32 96       	adiw	r30, 0x02	; 2
    132a:	44 c0       	rjmp	.+136    	; 0x13b4 <malloc+0x128>
    132c:	fe 01       	movw	r30, r28
    132e:	e2 0f       	add	r30, r18
    1330:	f3 1f       	adc	r31, r19
    1332:	81 93       	st	Z+, r24
    1334:	91 93       	st	Z+, r25
    1336:	22 50       	subi	r18, 0x02	; 2
    1338:	31 09       	sbc	r19, r1
    133a:	39 83       	std	Y+1, r19	; 0x01
    133c:	28 83       	st	Y, r18
    133e:	3a c0       	rjmp	.+116    	; 0x13b4 <malloc+0x128>
    1340:	20 91 48 01 	lds	r18, 0x0148
    1344:	30 91 49 01 	lds	r19, 0x0149
    1348:	23 2b       	or	r18, r19
    134a:	41 f4       	brne	.+16     	; 0x135c <malloc+0xd0>
    134c:	20 91 02 01 	lds	r18, 0x0102
    1350:	30 91 03 01 	lds	r19, 0x0103
    1354:	30 93 49 01 	sts	0x0149, r19
    1358:	20 93 48 01 	sts	0x0148, r18
    135c:	20 91 00 01 	lds	r18, 0x0100
    1360:	30 91 01 01 	lds	r19, 0x0101
    1364:	21 15       	cp	r18, r1
    1366:	31 05       	cpc	r19, r1
    1368:	41 f4       	brne	.+16     	; 0x137a <malloc+0xee>
    136a:	2d b7       	in	r18, 0x3d	; 61
    136c:	3e b7       	in	r19, 0x3e	; 62
    136e:	40 91 04 01 	lds	r20, 0x0104
    1372:	50 91 05 01 	lds	r21, 0x0105
    1376:	24 1b       	sub	r18, r20
    1378:	35 0b       	sbc	r19, r21
    137a:	e0 91 48 01 	lds	r30, 0x0148
    137e:	f0 91 49 01 	lds	r31, 0x0149
    1382:	e2 17       	cp	r30, r18
    1384:	f3 07       	cpc	r31, r19
    1386:	a0 f4       	brcc	.+40     	; 0x13b0 <malloc+0x124>
    1388:	2e 1b       	sub	r18, r30
    138a:	3f 0b       	sbc	r19, r31
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	78 f0       	brcs	.+30     	; 0x13b0 <malloc+0x124>
    1392:	ac 01       	movw	r20, r24
    1394:	4e 5f       	subi	r20, 0xFE	; 254
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	24 17       	cp	r18, r20
    139a:	35 07       	cpc	r19, r21
    139c:	48 f0       	brcs	.+18     	; 0x13b0 <malloc+0x124>
    139e:	4e 0f       	add	r20, r30
    13a0:	5f 1f       	adc	r21, r31
    13a2:	50 93 49 01 	sts	0x0149, r21
    13a6:	40 93 48 01 	sts	0x0148, r20
    13aa:	81 93       	st	Z+, r24
    13ac:	91 93       	st	Z+, r25
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <malloc+0x128>
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	cf 01       	movw	r24, r30
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <free>:
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <free+0xa>
    13c4:	87 c0       	rjmp	.+270    	; 0x14d4 <free+0x118>
    13c6:	fc 01       	movw	r30, r24
    13c8:	32 97       	sbiw	r30, 0x02	; 2
    13ca:	13 82       	std	Z+3, r1	; 0x03
    13cc:	12 82       	std	Z+2, r1	; 0x02
    13ce:	c0 91 4a 01 	lds	r28, 0x014A
    13d2:	d0 91 4b 01 	lds	r29, 0x014B
    13d6:	20 97       	sbiw	r28, 0x00	; 0
    13d8:	81 f4       	brne	.+32     	; 0x13fa <free+0x3e>
    13da:	20 81       	ld	r18, Z
    13dc:	31 81       	ldd	r19, Z+1	; 0x01
    13de:	28 0f       	add	r18, r24
    13e0:	39 1f       	adc	r19, r25
    13e2:	80 91 48 01 	lds	r24, 0x0148
    13e6:	90 91 49 01 	lds	r25, 0x0149
    13ea:	82 17       	cp	r24, r18
    13ec:	93 07       	cpc	r25, r19
    13ee:	79 f5       	brne	.+94     	; 0x144e <free+0x92>
    13f0:	f0 93 49 01 	sts	0x0149, r31
    13f4:	e0 93 48 01 	sts	0x0148, r30
    13f8:	6d c0       	rjmp	.+218    	; 0x14d4 <free+0x118>
    13fa:	de 01       	movw	r26, r28
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	ae 17       	cp	r26, r30
    1402:	bf 07       	cpc	r27, r31
    1404:	50 f4       	brcc	.+20     	; 0x141a <free+0x5e>
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	4d 91       	ld	r20, X+
    140a:	5c 91       	ld	r21, X
    140c:	13 97       	sbiw	r26, 0x03	; 3
    140e:	9d 01       	movw	r18, r26
    1410:	41 15       	cp	r20, r1
    1412:	51 05       	cpc	r21, r1
    1414:	09 f1       	breq	.+66     	; 0x1458 <free+0x9c>
    1416:	da 01       	movw	r26, r20
    1418:	f3 cf       	rjmp	.-26     	; 0x1400 <free+0x44>
    141a:	b3 83       	std	Z+3, r27	; 0x03
    141c:	a2 83       	std	Z+2, r26	; 0x02
    141e:	40 81       	ld	r20, Z
    1420:	51 81       	ldd	r21, Z+1	; 0x01
    1422:	84 0f       	add	r24, r20
    1424:	95 1f       	adc	r25, r21
    1426:	8a 17       	cp	r24, r26
    1428:	9b 07       	cpc	r25, r27
    142a:	71 f4       	brne	.+28     	; 0x1448 <free+0x8c>
    142c:	8d 91       	ld	r24, X+
    142e:	9c 91       	ld	r25, X
    1430:	11 97       	sbiw	r26, 0x01	; 1
    1432:	84 0f       	add	r24, r20
    1434:	95 1f       	adc	r25, r21
    1436:	02 96       	adiw	r24, 0x02	; 2
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	12 96       	adiw	r26, 0x02	; 2
    143e:	8d 91       	ld	r24, X+
    1440:	9c 91       	ld	r25, X
    1442:	13 97       	sbiw	r26, 0x03	; 3
    1444:	93 83       	std	Z+3, r25	; 0x03
    1446:	82 83       	std	Z+2, r24	; 0x02
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	29 f4       	brne	.+10     	; 0x1458 <free+0x9c>
    144e:	f0 93 4b 01 	sts	0x014B, r31
    1452:	e0 93 4a 01 	sts	0x014A, r30
    1456:	3e c0       	rjmp	.+124    	; 0x14d4 <free+0x118>
    1458:	d9 01       	movw	r26, r18
    145a:	13 96       	adiw	r26, 0x03	; 3
    145c:	fc 93       	st	X, r31
    145e:	ee 93       	st	-X, r30
    1460:	12 97       	sbiw	r26, 0x02	; 2
    1462:	4d 91       	ld	r20, X+
    1464:	5d 91       	ld	r21, X+
    1466:	a4 0f       	add	r26, r20
    1468:	b5 1f       	adc	r27, r21
    146a:	ea 17       	cp	r30, r26
    146c:	fb 07       	cpc	r31, r27
    146e:	79 f4       	brne	.+30     	; 0x148e <free+0xd2>
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	84 0f       	add	r24, r20
    1476:	95 1f       	adc	r25, r21
    1478:	02 96       	adiw	r24, 0x02	; 2
    147a:	d9 01       	movw	r26, r18
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	13 96       	adiw	r26, 0x03	; 3
    1488:	9c 93       	st	X, r25
    148a:	8e 93       	st	-X, r24
    148c:	12 97       	sbiw	r26, 0x02	; 2
    148e:	e0 e0       	ldi	r30, 0x00	; 0
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	19 f0       	breq	.+6      	; 0x14a0 <free+0xe4>
    149a:	fe 01       	movw	r30, r28
    149c:	ec 01       	movw	r28, r24
    149e:	f9 cf       	rjmp	.-14     	; 0x1492 <free+0xd6>
    14a0:	ce 01       	movw	r24, r28
    14a2:	02 96       	adiw	r24, 0x02	; 2
    14a4:	28 81       	ld	r18, Y
    14a6:	39 81       	ldd	r19, Y+1	; 0x01
    14a8:	82 0f       	add	r24, r18
    14aa:	93 1f       	adc	r25, r19
    14ac:	20 91 48 01 	lds	r18, 0x0148
    14b0:	30 91 49 01 	lds	r19, 0x0149
    14b4:	28 17       	cp	r18, r24
    14b6:	39 07       	cpc	r19, r25
    14b8:	69 f4       	brne	.+26     	; 0x14d4 <free+0x118>
    14ba:	30 97       	sbiw	r30, 0x00	; 0
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <free+0x10c>
    14be:	10 92 4b 01 	sts	0x014B, r1
    14c2:	10 92 4a 01 	sts	0x014A, r1
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <free+0x110>
    14c8:	13 82       	std	Z+3, r1	; 0x03
    14ca:	12 82       	std	Z+2, r1	; 0x02
    14cc:	d0 93 49 01 	sts	0x0149, r29
    14d0:	c0 93 48 01 	sts	0x0148, r28
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <strnlen_P>:
    14da:	fc 01       	movw	r30, r24
    14dc:	05 90       	lpm	r0, Z+
    14de:	61 50       	subi	r22, 0x01	; 1
    14e0:	70 40       	sbci	r23, 0x00	; 0
    14e2:	01 10       	cpse	r0, r1
    14e4:	d8 f7       	brcc	.-10     	; 0x14dc <strnlen_P+0x2>
    14e6:	80 95       	com	r24
    14e8:	90 95       	com	r25
    14ea:	8e 0f       	add	r24, r30
    14ec:	9f 1f       	adc	r25, r31
    14ee:	08 95       	ret

000014f0 <memset>:
    14f0:	dc 01       	movw	r26, r24
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <memset+0x6>
    14f4:	6d 93       	st	X+, r22
    14f6:	41 50       	subi	r20, 0x01	; 1
    14f8:	50 40       	sbci	r21, 0x00	; 0
    14fa:	e0 f7       	brcc	.-8      	; 0x14f4 <memset+0x4>
    14fc:	08 95       	ret

000014fe <strnlen>:
    14fe:	fc 01       	movw	r30, r24
    1500:	61 50       	subi	r22, 0x01	; 1
    1502:	70 40       	sbci	r23, 0x00	; 0
    1504:	01 90       	ld	r0, Z+
    1506:	01 10       	cpse	r0, r1
    1508:	d8 f7       	brcc	.-10     	; 0x1500 <strnlen+0x2>
    150a:	80 95       	com	r24
    150c:	90 95       	com	r25
    150e:	8e 0f       	add	r24, r30
    1510:	9f 1f       	adc	r25, r31
    1512:	08 95       	ret

00001514 <fputc>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	18 2f       	mov	r17, r24
    151e:	09 2f       	mov	r16, r25
    1520:	eb 01       	movw	r28, r22
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	81 fd       	sbrc	r24, 1
    1526:	03 c0       	rjmp	.+6      	; 0x152e <fputc+0x1a>
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	9f ef       	ldi	r25, 0xFF	; 255
    152c:	20 c0       	rjmp	.+64     	; 0x156e <fputc+0x5a>
    152e:	82 ff       	sbrs	r24, 2
    1530:	10 c0       	rjmp	.+32     	; 0x1552 <fputc+0x3e>
    1532:	4e 81       	ldd	r20, Y+6	; 0x06
    1534:	5f 81       	ldd	r21, Y+7	; 0x07
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	3d 81       	ldd	r19, Y+5	; 0x05
    153a:	42 17       	cp	r20, r18
    153c:	53 07       	cpc	r21, r19
    153e:	7c f4       	brge	.+30     	; 0x155e <fputc+0x4a>
    1540:	e8 81       	ld	r30, Y
    1542:	f9 81       	ldd	r31, Y+1	; 0x01
    1544:	9f 01       	movw	r18, r30
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	39 83       	std	Y+1, r19	; 0x01
    154c:	28 83       	st	Y, r18
    154e:	10 83       	st	Z, r17
    1550:	06 c0       	rjmp	.+12     	; 0x155e <fputc+0x4a>
    1552:	e8 85       	ldd	r30, Y+8	; 0x08
    1554:	f9 85       	ldd	r31, Y+9	; 0x09
    1556:	81 2f       	mov	r24, r17
    1558:	09 95       	icall
    155a:	89 2b       	or	r24, r25
    155c:	29 f7       	brne	.-54     	; 0x1528 <fputc+0x14>
    155e:	2e 81       	ldd	r18, Y+6	; 0x06
    1560:	3f 81       	ldd	r19, Y+7	; 0x07
    1562:	2f 5f       	subi	r18, 0xFF	; 255
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	3f 83       	std	Y+7, r19	; 0x07
    1568:	2e 83       	std	Y+6, r18	; 0x06
    156a:	81 2f       	mov	r24, r17
    156c:	90 2f       	mov	r25, r16
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <__ultoa_invert>:
    1578:	fa 01       	movw	r30, r20
    157a:	aa 27       	eor	r26, r26
    157c:	28 30       	cpi	r18, 0x08	; 8
    157e:	51 f1       	breq	.+84     	; 0x15d4 <__ultoa_invert+0x5c>
    1580:	20 31       	cpi	r18, 0x10	; 16
    1582:	81 f1       	breq	.+96     	; 0x15e4 <__ultoa_invert+0x6c>
    1584:	e8 94       	clt
    1586:	6f 93       	push	r22
    1588:	6e 7f       	andi	r22, 0xFE	; 254
    158a:	6e 5f       	subi	r22, 0xFE	; 254
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	8f 4f       	sbci	r24, 0xFF	; 255
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	af 4f       	sbci	r26, 0xFF	; 255
    1594:	b1 e0       	ldi	r27, 0x01	; 1
    1596:	3e d0       	rcall	.+124    	; 0x1614 <__ultoa_invert+0x9c>
    1598:	b4 e0       	ldi	r27, 0x04	; 4
    159a:	3c d0       	rcall	.+120    	; 0x1614 <__ultoa_invert+0x9c>
    159c:	67 0f       	add	r22, r23
    159e:	78 1f       	adc	r23, r24
    15a0:	89 1f       	adc	r24, r25
    15a2:	9a 1f       	adc	r25, r26
    15a4:	a1 1d       	adc	r26, r1
    15a6:	68 0f       	add	r22, r24
    15a8:	79 1f       	adc	r23, r25
    15aa:	8a 1f       	adc	r24, r26
    15ac:	91 1d       	adc	r25, r1
    15ae:	a1 1d       	adc	r26, r1
    15b0:	6a 0f       	add	r22, r26
    15b2:	71 1d       	adc	r23, r1
    15b4:	81 1d       	adc	r24, r1
    15b6:	91 1d       	adc	r25, r1
    15b8:	a1 1d       	adc	r26, r1
    15ba:	20 d0       	rcall	.+64     	; 0x15fc <__ultoa_invert+0x84>
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <__ultoa_invert+0x48>
    15be:	68 94       	set
    15c0:	3f 91       	pop	r19
    15c2:	2a e0       	ldi	r18, 0x0A	; 10
    15c4:	26 9f       	mul	r18, r22
    15c6:	11 24       	eor	r1, r1
    15c8:	30 19       	sub	r19, r0
    15ca:	30 5d       	subi	r19, 0xD0	; 208
    15cc:	31 93       	st	Z+, r19
    15ce:	de f6       	brtc	.-74     	; 0x1586 <__ultoa_invert+0xe>
    15d0:	cf 01       	movw	r24, r30
    15d2:	08 95       	ret
    15d4:	46 2f       	mov	r20, r22
    15d6:	47 70       	andi	r20, 0x07	; 7
    15d8:	40 5d       	subi	r20, 0xD0	; 208
    15da:	41 93       	st	Z+, r20
    15dc:	b3 e0       	ldi	r27, 0x03	; 3
    15de:	0f d0       	rcall	.+30     	; 0x15fe <__ultoa_invert+0x86>
    15e0:	c9 f7       	brne	.-14     	; 0x15d4 <__ultoa_invert+0x5c>
    15e2:	f6 cf       	rjmp	.-20     	; 0x15d0 <__ultoa_invert+0x58>
    15e4:	46 2f       	mov	r20, r22
    15e6:	4f 70       	andi	r20, 0x0F	; 15
    15e8:	40 5d       	subi	r20, 0xD0	; 208
    15ea:	4a 33       	cpi	r20, 0x3A	; 58
    15ec:	18 f0       	brcs	.+6      	; 0x15f4 <__ultoa_invert+0x7c>
    15ee:	49 5d       	subi	r20, 0xD9	; 217
    15f0:	31 fd       	sbrc	r19, 1
    15f2:	40 52       	subi	r20, 0x20	; 32
    15f4:	41 93       	st	Z+, r20
    15f6:	02 d0       	rcall	.+4      	; 0x15fc <__ultoa_invert+0x84>
    15f8:	a9 f7       	brne	.-22     	; 0x15e4 <__ultoa_invert+0x6c>
    15fa:	ea cf       	rjmp	.-44     	; 0x15d0 <__ultoa_invert+0x58>
    15fc:	b4 e0       	ldi	r27, 0x04	; 4
    15fe:	a6 95       	lsr	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	77 95       	ror	r23
    1606:	67 95       	ror	r22
    1608:	ba 95       	dec	r27
    160a:	c9 f7       	brne	.-14     	; 0x15fe <__ultoa_invert+0x86>
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	61 05       	cpc	r22, r1
    1610:	71 05       	cpc	r23, r1
    1612:	08 95       	ret
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	0a 2e       	mov	r0, r26
    161a:	06 94       	lsr	r0
    161c:	57 95       	ror	r21
    161e:	47 95       	ror	r20
    1620:	37 95       	ror	r19
    1622:	27 95       	ror	r18
    1624:	ba 95       	dec	r27
    1626:	c9 f7       	brne	.-14     	; 0x161a <__ultoa_invert+0xa2>
    1628:	62 0f       	add	r22, r18
    162a:	73 1f       	adc	r23, r19
    162c:	84 1f       	adc	r24, r20
    162e:	95 1f       	adc	r25, r21
    1630:	a0 1d       	adc	r26, r0
    1632:	08 95       	ret

00001634 <__prologue_saves__>:
    1634:	2f 92       	push	r2
    1636:	3f 92       	push	r3
    1638:	4f 92       	push	r4
    163a:	5f 92       	push	r5
    163c:	6f 92       	push	r6
    163e:	7f 92       	push	r7
    1640:	8f 92       	push	r8
    1642:	9f 92       	push	r9
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	ca 1b       	sub	r28, r26
    165e:	db 0b       	sbc	r29, r27
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	09 94       	ijmp

0000166c <__epilogue_restores__>:
    166c:	2a 88       	ldd	r2, Y+18	; 0x12
    166e:	39 88       	ldd	r3, Y+17	; 0x11
    1670:	48 88       	ldd	r4, Y+16	; 0x10
    1672:	5f 84       	ldd	r5, Y+15	; 0x0f
    1674:	6e 84       	ldd	r6, Y+14	; 0x0e
    1676:	7d 84       	ldd	r7, Y+13	; 0x0d
    1678:	8c 84       	ldd	r8, Y+12	; 0x0c
    167a:	9b 84       	ldd	r9, Y+11	; 0x0b
    167c:	aa 84       	ldd	r10, Y+10	; 0x0a
    167e:	b9 84       	ldd	r11, Y+9	; 0x09
    1680:	c8 84       	ldd	r12, Y+8	; 0x08
    1682:	df 80       	ldd	r13, Y+7	; 0x07
    1684:	ee 80       	ldd	r14, Y+6	; 0x06
    1686:	fd 80       	ldd	r15, Y+5	; 0x05
    1688:	0c 81       	ldd	r16, Y+4	; 0x04
    168a:	1b 81       	ldd	r17, Y+3	; 0x03
    168c:	aa 81       	ldd	r26, Y+2	; 0x02
    168e:	b9 81       	ldd	r27, Y+1	; 0x01
    1690:	ce 0f       	add	r28, r30
    1692:	d1 1d       	adc	r29, r1
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	ed 01       	movw	r28, r26
    16a0:	08 95       	ret

000016a2 <_exit>:
    16a2:	f8 94       	cli

000016a4 <__stop_program>:
    16a4:	ff cf       	rjmp	.-2      	; 0x16a4 <__stop_program>
