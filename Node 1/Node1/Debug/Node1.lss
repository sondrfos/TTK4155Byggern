
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  000016d4  00001768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800264  00800264  000018cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d0  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002119  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d09  00000000  00000000  00003d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000115f  00000000  00000000  00004a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000088c  00000000  00000000  00005b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007db  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001078  00000000  00000000  00006be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00007c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_2>
       c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 ed       	ldi	r30, 0xD4	; 212
      84:	f6 e1       	ldi	r31, 0x16	; 22
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 36       	cpi	r26, 0x64	; 100
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a4 e6       	ldi	r26, 0x64	; 100
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a2 37       	cpi	r26, 0x72	; 114
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 21 02 	call	0x442	; 0x442 <main>
      a6:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
	received->length = 0b00001111 & mcp2515_read(adr-1);		//reads length from adr-1 and bitwise AND with value to mask out insignificant bits
	for (uint8_t i = 0; i<received->length; i++){
		received->data[i] = mcp2515_read(adr+i);				//reads data from dataregisters
	}
	uint16_t ID_low = ((mcp2515_read(adr-4)>>5) & 0b00000111);	//finds low bits by right-shifting register 5 places and bitwise AND to mask out insignificant bits
	uint16_t ID_high = mcp2515_read(adr-5)*8;					//reads high ID bits and left-shifts 3 places
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	0e 94 20 01 	call	0x240	; 0x240 <mcp2515_reset>
      ba:	40 e0       	ldi	r20, 0x00	; 0
	received->ID = ID_low+ID_high;
      bc:	50 e0       	ldi	r21, 0x00	; 0
      be:	60 ef       	ldi	r22, 0xF0	; 240
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	8f e0       	ldi	r24, 0x0F	; 15
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 01 01 	call	0x202	; 0x202 <mcp2515_bit_modify>
      ca:	4f e9       	ldi	r20, 0x9F	; 159
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	6f e9       	ldi	r22, 0x9F	; 159
      d0:	70 e0       	ldi	r23, 0x00	; 0
	
}
      d2:	8b e2       	ldi	r24, 0x2B	; 43
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 01 01 	call	0x202	; 0x202 <mcp2515_bit_modify>
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	08 95       	ret

000000e0 <game_statemachine>:
#define F_CPU 4915200

volatile uint8_t mcp_intr = 0;


void game_statemachine(){
      e0:	ef 92       	push	r14
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	c4 5e       	subi	r28, 0xE4	; 228
      f2:	d1 09       	sbc	r29, r1
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t cursor = 0;
      fe:	19 82       	std	Y+1, r1	; 0x01
	uint8_t move_ready = 1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	8a 83       	std	Y+2, r24	; 0x02
	State state = PRINTMENU;
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t printing = 0;
     108:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t score = 0;
     10a:	1d 82       	std	Y+5, r1	; 0x05
	Menu playGame;
	Menu game1;
	Menu game2;
	Menu game1info;
	Menu game2info;
	Menu* currentMenu = &mainMenu;
     10c:	ce 01       	movw	r24, r28
     10e:	08 96       	adiw	r24, 0x08	; 8
     110:	9f 83       	std	Y+7, r25	; 0x07
     112:	8e 83       	std	Y+6, r24	; 0x06
	menu_make(&mainMenu, &playGame, &game1info, &game2info, &game1, &game2);
     114:	de 01       	movw	r26, r28
     116:	af 58       	subi	r26, 0x8F	; 143
     118:	bf 4f       	sbci	r27, 0xFF	; 255
     11a:	fe 01       	movw	r30, r28
     11c:	e2 5b       	subi	r30, 0xB2	; 178
     11e:	ff 4f       	sbci	r31, 0xFF	; 255
     120:	9e 01       	movw	r18, r28
     122:	29 54       	subi	r18, 0x49	; 73
     124:	3f 4f       	sbci	r19, 0xFF	; 255
     126:	ae 01       	movw	r20, r28
     128:	4c 56       	subi	r20, 0x6C	; 108
     12a:	5f 4f       	sbci	r21, 0xFF	; 255
     12c:	be 01       	movw	r22, r28
     12e:	65 5d       	subi	r22, 0xD5	; 213
     130:	7f 4f       	sbci	r23, 0xFF	; 255
     132:	ce 01       	movw	r24, r28
     134:	08 96       	adiw	r24, 0x08	; 8
     136:	7d 01       	movw	r14, r26
     138:	8f 01       	movw	r16, r30
     13a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <menu_make>
	CAN_message recieved;
	
	SRAM_test();
     13e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SRAM_test>
			default:
				break;
		}
	}*/
	
}
     142:	cc 51       	subi	r28, 0x1C	; 28
     144:	df 4f       	sbci	r29, 0xFF	; 255
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	1f 91       	pop	r17
     156:	0f 91       	pop	r16
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	08 95       	ret

0000015e <__vector_2>:

ISR(INT1_vect){
     15e:	1f 92       	push	r1
     160:	0f 92       	push	r0
     162:	00 90 5f 00 	lds	r0, 0x005F
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	2f 93       	push	r18
     16c:	3f 93       	push	r19
     16e:	4f 93       	push	r20
     170:	5f 93       	push	r21
     172:	6f 93       	push	r22
     174:	7f 93       	push	r23
     176:	8f 93       	push	r24
     178:	9f 93       	push	r25
     17a:	af 93       	push	r26
     17c:	bf 93       	push	r27
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
	mcp_intr = mcp2515_read(MCP_CANINTF);						//reads interrupt register into global variable mcp_intr to determine what's going on
     18a:	8c e2       	ldi	r24, 0x2C	; 44
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mcp2515_read>
     192:	80 93 64 02 	sts	0x0264, r24
	mcp2515_bit_modify(MCP_CANINTF, 0b11111111, 0b00000000);	//clears interrupt flags
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	6f ef       	ldi	r22, 0xFF	; 255
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	8c e2       	ldi	r24, 0x2C	; 44
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 01 01 	call	0x202	; 0x202 <mcp2515_bit_modify>
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	bf 91       	pop	r27
     1b0:	af 91       	pop	r26
     1b2:	9f 91       	pop	r25
     1b4:	8f 91       	pop	r24
     1b6:	7f 91       	pop	r23
     1b8:	6f 91       	pop	r22
     1ba:	5f 91       	pop	r21
     1bc:	4f 91       	pop	r20
     1be:	3f 91       	pop	r19
     1c0:	2f 91       	pop	r18
     1c2:	0f 90       	pop	r0
     1c4:	00 92 5f 00 	sts	0x005F, r0
     1c8:	0f 90       	pop	r0
     1ca:	1f 90       	pop	r1
     1cc:	18 95       	reti

000001ce <mcp2515_read>:
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	00 d0       	rcall	.+0      	; 0x1d4 <mcp2515_read+0x6>
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	8a 83       	std	Y+2, r24	; 0x02
     1da:	0e 94 a9 04 	call	0x952	; 0x952 <spi_select>
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	0e 94 89 04 	call	0x912	; 0x912 <spi_transmit>
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	0e 94 89 04 	call	0x912	; 0x912 <spi_transmit>
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 89 04 	call	0x912	; 0x912 <spi_transmit>
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	0e 94 b9 04 	call	0x972	; 0x972 <spi_deselect>
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <mcp2515_bit_modify>:
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	00 d0       	rcall	.+0      	; 0x208 <mcp2515_bit_modify+0x6>
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	6a 83       	std	Y+2, r22	; 0x02
     212:	4b 83       	std	Y+3, r20	; 0x03
     214:	0e 94 a9 04 	call	0x952	; 0x952 <spi_select>
     218:	85 e0       	ldi	r24, 0x05	; 5
     21a:	0e 94 89 04 	call	0x912	; 0x912 <spi_transmit>
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	0e 94 89 04 	call	0x912	; 0x912 <spi_transmit>
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	0e 94 89 04 	call	0x912	; 0x912 <spi_transmit>
     22a:	8b 81       	ldd	r24, Y+3	; 0x03
     22c:	0e 94 89 04 	call	0x912	; 0x912 <spi_transmit>
     230:	0e 94 b9 04 	call	0x972	; 0x972 <spi_deselect>
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <mcp2515_reset>:
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	0e 94 a9 04 	call	0x952	; 0x952 <spi_select>
     24c:	80 ec       	ldi	r24, 0xC0	; 192
     24e:	0e 94 89 04 	call	0x912	; 0x912 <spi_transmit>
     252:	0e 94 b9 04 	call	0x972	; 0x972 <spi_deselect>
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <write_c>:
#include <util/delay.h>
#include <avr/pgmspace.h>
#include <stdio.h>


void write_c(uint8_t adr){
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	00 d0       	rcall	.+0      	; 0x262 <write_c+0x6>
     262:	1f 92       	push	r1
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	8b 83       	std	Y+3, r24	; 0x03
	volatile char *ext_oled = (char *) 0x1000;
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e1       	ldi	r25, 0x10	; 16
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	89 83       	std	Y+1, r24	; 0x01
	ext_oled[0] = adr;
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	2b 81       	ldd	r18, Y+3	; 0x03
     278:	fc 01       	movw	r30, r24
     27a:	20 83       	st	Z, r18
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <write_d>:
void write_d(uint8_t adr){
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <write_d+0x6>
     28e:	1f 92       	push	r1
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	8b 83       	std	Y+3, r24	; 0x03
	volatile char *ext_oled = (char *) 0x1200;
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	92 e1       	ldi	r25, 0x12	; 18
     29a:	9a 83       	std	Y+2, r25	; 0x02
     29c:	89 83       	std	Y+1, r24	; 0x01
	
	ext_oled[0] = adr;
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
     2a2:	2b 81       	ldd	r18, Y+3	; 0x03
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
}
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <oled_reset>:
		fprintf(FONT8, "You lost");
	}
	return 1;	
}

void oled_reset(){
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	1f 92       	push	r1
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i<8;i++){
     2be:	19 82       	std	Y+1, r1	; 0x01
     2c0:	06 c0       	rjmp	.+12     	; 0x2ce <oled_reset+0x1a>
		oled_clear_line(i);
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	0e 94 a3 01 	call	0x346	; 0x346 <oled_clear_line>
	}
	return 1;	
}

void oled_reset(){
	for (uint8_t i = 0; i<8;i++){
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	89 83       	std	Y+1, r24	; 0x01
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	88 30       	cpi	r24, 0x08	; 8
     2d2:	b8 f3       	brcs	.-18     	; 0x2c2 <oled_reset+0xe>
		oled_clear_line(i);
	}
	oled_home();
     2d4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <oled_home>
	
}
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <oled_home>:

void oled_home(){
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	oled_pos(0,0);
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 bc 01 	call	0x378	; 0x378 <oled_pos>
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <oled_goto_line>:

void oled_goto_line(uint8_t line){
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	1f 92       	push	r1
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	89 83       	std	Y+1, r24	; 0x01
	current_line = line;
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	80 93 66 02 	sts	0x0266, r24
	write_c(0xb0+line);
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	80 55       	subi	r24, 0x50	; 80
     30c:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
}
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <oled_goto_column>:

void oled_goto_column(uint8_t column){
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	1f 92       	push	r1
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	89 83       	std	Y+1, r24	; 0x01
	current_column = column;
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	80 93 65 02 	sts	0x0265, r24
	write_c(0x00+column%16);
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	8f 70       	andi	r24, 0x0F	; 15
     32e:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x10+column/16);
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	82 95       	swap	r24
     336:	8f 70       	andi	r24, 0x0F	; 15
     338:	80 5f       	subi	r24, 0xF0	; 240
     33a:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
}
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <oled_clear_line>:

void oled_clear_line(uint8_t line){
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <oled_clear_line+0x6>
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	8a 83       	std	Y+2, r24	; 0x02
	oled_goto_line(line);
     352:	8a 81       	ldd	r24, Y+2	; 0x02
     354:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <oled_goto_line>
	for(uint8_t i = 0; i<128;i++){
     358:	19 82       	std	Y+1, r1	; 0x01
     35a:	06 c0       	rjmp	.+12     	; 0x368 <oled_clear_line+0x22>
		write_d(0x0);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 44 01 	call	0x288	; 0x288 <write_d>
	write_c(0x10+column/16);
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(uint8_t i = 0; i<128;i++){
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	89 83       	std	Y+1, r24	; 0x01
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	88 23       	and	r24, r24
     36c:	bc f7       	brge	.-18     	; 0x35c <oled_clear_line+0x16>
		write_d(0x0);
	}
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <oled_pos>:

void oled_pos(uint8_t line, uint8_t column){
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	00 d0       	rcall	.+0      	; 0x37e <oled_pos+0x6>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	89 83       	std	Y+1, r24	; 0x01
     384:	6a 83       	std	Y+2, r22	; 0x02
	current_column = column;
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	80 93 65 02 	sts	0x0265, r24
	current_line = line;
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	80 93 66 02 	sts	0x0266, r24
	oled_goto_line(line);
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <oled_goto_line>
	oled_goto_column(column);
     398:	8a 81       	ldd	r24, Y+2	; 0x02
     39a:	0e 94 8c 01 	call	0x318	; 0x318 <oled_goto_column>
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <oled_init>:
		}
	}
	return 0;
}

void oled_init(){
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
	write_c(0xae); // display off
     3b0:	8e ea       	ldi	r24, 0xAE	; 174
     3b2:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xa1); //segment remap
     3b6:	81 ea       	ldi	r24, 0xA1	; 161
     3b8:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xda); //common pads hardware: alternative
     3bc:	8a ed       	ldi	r24, 0xDA	; 218
     3be:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x12);
     3c2:	82 e1       	ldi	r24, 0x12	; 18
     3c4:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xc8); //common output scan direction:com63~com0
     3c8:	88 ec       	ldi	r24, 0xC8	; 200
     3ca:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xa8); //multiplex ration mode:63
     3ce:	88 ea       	ldi	r24, 0xA8	; 168
     3d0:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x3f);
     3d4:	8f e3       	ldi	r24, 0x3F	; 63
     3d6:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xd5); //display divide ratio/osc. freq. mode
     3da:	85 ed       	ldi	r24, 0xD5	; 213
     3dc:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x80);
     3e0:	80 e8       	ldi	r24, 0x80	; 128
     3e2:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x81); //contrast control
     3e6:	81 e8       	ldi	r24, 0x81	; 129
     3e8:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x50);
     3ec:	80 e5       	ldi	r24, 0x50	; 80
     3ee:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xd9); //set pre-charge period
     3f2:	89 ed       	ldi	r24, 0xD9	; 217
     3f4:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x21);
     3f8:	81 e2       	ldi	r24, 0x21	; 33
     3fa:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x20); //Set Memory Addressing Mode
     3fe:	80 e2       	ldi	r24, 0x20	; 32
     400:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x02);
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xdb); //VCOM deselect level mode
     40a:	8b ed       	ldi	r24, 0xDB	; 219
     40c:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x30);
     410:	80 e3       	ldi	r24, 0x30	; 48
     412:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xad); //master configuration
     416:	8d ea       	ldi	r24, 0xAD	; 173
     418:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0x00);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xa4); //out follows RAM content
     422:	84 ea       	ldi	r24, 0xA4	; 164
     424:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xa6); //set normal display
     428:	86 ea       	ldi	r24, 0xA6	; 166
     42a:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	write_c(0xaf); // display on
     42e:	8f ea       	ldi	r24, 0xAF	; 175
     430:	0e 94 2e 01 	call	0x25c	; 0x25c <write_c>
	
	oled_home();
     434:	0e 94 70 01 	call	0x2e0	; 0x2e0 <oled_home>
	oled_reset();
     438:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <oled_reset>
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <main>:

volatile uint8_t button_pressed = 0;
//volatile uint8_t mcp_intr = 0;


int main(void){
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
	uart_init(MYUBRR);
     44a:	8f e1       	ldi	r24, 0x1F	; 31
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <uart_init>
	sram_init();
     452:	0e 94 c9 04 	call	0x992	; 0x992 <sram_init>
	oled_init();
     456:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <oled_init>
	mfcard_init();
     45a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <mfcard_init>
	mfcard_interrupt_init();
     45e:	0e 94 93 03 	call	0x726	; 0x726 <mfcard_interrupt_init>
	spi_init();
     462:	0e 94 31 04 	call	0x862	; 0x862 <spi_init>
	CAN_init();
     466:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	solenoid_init();
     46a:	0e 94 18 04 	call	0x830	; 0x830 <solenoid_init>
	while(1){
		game_statemachine();
     46e:	0e 94 70 00 	call	0xe0	; 0xe0 <game_statemachine>
	}
     472:	fd cf       	rjmp	.-6      	; 0x46e <main+0x2c>

00000474 <__vector_3>:
			}
		}
	}*/	
}

ISR(INT2_vect){
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	00 90 5f 00 	lds	r0, 0x005F
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	8f 93       	push	r24
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	button_pressed = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 67 02 	sts	0x0267, r24
}
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	8f 91       	pop	r24
     496:	0f 90       	pop	r0
     498:	00 92 5f 00 	sts	0x005F, r0
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <menu_make>:
#include "menu.h"
#include "game.h"
#include <stdint.h>
#include <avr/interrupt.h>

void menu_make(Menu* mainMenu, Menu* playGame, Menu* game1info, Menu* game2info, Menu* game1, Menu* game2){
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	2c 97       	sbiw	r28, 0x0c	; 12
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	7c 83       	std	Y+4, r23	; 0x04
     4c4:	6b 83       	std	Y+3, r22	; 0x03
     4c6:	5e 83       	std	Y+6, r21	; 0x06
     4c8:	4d 83       	std	Y+5, r20	; 0x05
     4ca:	38 87       	std	Y+8, r19	; 0x08
     4cc:	2f 83       	std	Y+7, r18	; 0x07
     4ce:	1a 87       	std	Y+10, r17	; 0x0a
     4d0:	09 87       	std	Y+9, r16	; 0x09
     4d2:	fc 86       	std	Y+12, r15	; 0x0c
     4d4:	eb 86       	std	Y+11, r14	; 0x0b
	
	mainMenu->length = 2;
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	22 e0       	ldi	r18, 0x02	; 2
     4dc:	fc 01       	movw	r30, r24
     4de:	20 a3       	std	Z+32, r18	; 0x20
	mainMenu->selectionLength = 2;
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	9a 81       	ldd	r25, Y+2	; 0x02
     4e4:	22 e0       	ldi	r18, 0x02	; 2
     4e6:	fc 01       	movw	r30, r24
     4e8:	21 a3       	std	Z+33, r18	; 0x21
	mainMenu->names[0] = "Play game!";
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	9a 81       	ldd	r25, Y+2	; 0x02
     4ee:	2a e0       	ldi	r18, 0x0A	; 10
     4f0:	31 e0       	ldi	r19, 0x01	; 1
     4f2:	fc 01       	movw	r30, r24
     4f4:	31 83       	std	Z+1, r19	; 0x01
     4f6:	20 83       	st	Z, r18
	mainMenu->names[1] = "Exit";
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	25 e1       	ldi	r18, 0x15	; 21
     4fe:	31 e0       	ldi	r19, 0x01	; 1
     500:	fc 01       	movw	r30, r24
     502:	33 83       	std	Z+3, r19	; 0x03
     504:	22 83       	std	Z+2, r18	; 0x02

	
	
	playGame->length = 3;
     506:	8b 81       	ldd	r24, Y+3	; 0x03
     508:	9c 81       	ldd	r25, Y+4	; 0x04
     50a:	23 e0       	ldi	r18, 0x03	; 3
     50c:	fc 01       	movw	r30, r24
     50e:	20 a3       	std	Z+32, r18	; 0x20
	playGame->selectionLength = 3;
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	23 e0       	ldi	r18, 0x03	; 3
     516:	fc 01       	movw	r30, r24
     518:	21 a3       	std	Z+33, r18	; 0x21
	playGame->names[0] = "Mode 1";
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	9c 81       	ldd	r25, Y+4	; 0x04
     51e:	2a e1       	ldi	r18, 0x1A	; 26
     520:	31 e0       	ldi	r19, 0x01	; 1
     522:	fc 01       	movw	r30, r24
     524:	31 83       	std	Z+1, r19	; 0x01
     526:	20 83       	st	Z, r18
	playGame->names[1] = "Mode 2";
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	9c 81       	ldd	r25, Y+4	; 0x04
     52c:	21 e2       	ldi	r18, 0x21	; 33
     52e:	31 e0       	ldi	r19, 0x01	; 1
     530:	fc 01       	movw	r30, r24
     532:	33 83       	std	Z+3, r19	; 0x03
     534:	22 83       	std	Z+2, r18	; 0x02
	playGame->names[2] = "Exit";
     536:	8b 81       	ldd	r24, Y+3	; 0x03
     538:	9c 81       	ldd	r25, Y+4	; 0x04
     53a:	25 e1       	ldi	r18, 0x15	; 21
     53c:	31 e0       	ldi	r19, 0x01	; 1
     53e:	fc 01       	movw	r30, r24
     540:	35 83       	std	Z+5, r19	; 0x05
     542:	24 83       	std	Z+4, r18	; 0x04
	mainMenu->subMenu[0] = playGame;
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	2b 81       	ldd	r18, Y+3	; 0x03
     54a:	3c 81       	ldd	r19, Y+4	; 0x04
     54c:	fc 01       	movw	r30, r24
     54e:	31 8b       	std	Z+17, r19	; 0x11
     550:	20 8b       	std	Z+16, r18	; 0x10

	
	playGame->subMenu[0] = game1info;
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	9c 81       	ldd	r25, Y+4	; 0x04
     556:	2d 81       	ldd	r18, Y+5	; 0x05
     558:	3e 81       	ldd	r19, Y+6	; 0x06
     55a:	fc 01       	movw	r30, r24
     55c:	31 8b       	std	Z+17, r19	; 0x11
     55e:	20 8b       	std	Z+16, r18	; 0x10
	playGame->subMenu[1] = game2info;
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	2f 81       	ldd	r18, Y+7	; 0x07
     566:	38 85       	ldd	r19, Y+8	; 0x08
     568:	fc 01       	movw	r30, r24
     56a:	33 8b       	std	Z+19, r19	; 0x13
     56c:	22 8b       	std	Z+18, r18	; 0x12
	playGame->subMenu[2] = mainMenu;
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	29 81       	ldd	r18, Y+1	; 0x01
     574:	3a 81       	ldd	r19, Y+2	; 0x02
     576:	fc 01       	movw	r30, r24
     578:	35 8b       	std	Z+21, r19	; 0x15
     57a:	24 8b       	std	Z+20, r18	; 0x14
	
	game1info->length = 6;
     57c:	8d 81       	ldd	r24, Y+5	; 0x05
     57e:	9e 81       	ldd	r25, Y+6	; 0x06
     580:	26 e0       	ldi	r18, 0x06	; 6
     582:	fc 01       	movw	r30, r24
     584:	20 a3       	std	Z+32, r18	; 0x20
	game1info->selectionLength = 2;
     586:	8d 81       	ldd	r24, Y+5	; 0x05
     588:	9e 81       	ldd	r25, Y+6	; 0x06
     58a:	22 e0       	ldi	r18, 0x02	; 2
     58c:	fc 01       	movw	r30, r24
     58e:	21 a3       	std	Z+33, r18	; 0x21
	game1info->names[0] = "Play game!";
     590:	8d 81       	ldd	r24, Y+5	; 0x05
     592:	9e 81       	ldd	r25, Y+6	; 0x06
     594:	2a e0       	ldi	r18, 0x0A	; 10
     596:	31 e0       	ldi	r19, 0x01	; 1
     598:	fc 01       	movw	r30, r24
     59a:	31 83       	std	Z+1, r19	; 0x01
     59c:	20 83       	st	Z, r18
	game1info->names[1] = "Exit";
     59e:	8d 81       	ldd	r24, Y+5	; 0x05
     5a0:	9e 81       	ldd	r25, Y+6	; 0x06
     5a2:	25 e1       	ldi	r18, 0x15	; 21
     5a4:	31 e0       	ldi	r19, 0x01	; 1
     5a6:	fc 01       	movw	r30, r24
     5a8:	33 83       	std	Z+3, r19	; 0x03
     5aa:	22 83       	std	Z+2, r18	; 0x02
	game1info->names[2] = " ";
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	9e 81       	ldd	r25, Y+6	; 0x06
     5b0:	28 e2       	ldi	r18, 0x28	; 40
     5b2:	31 e0       	ldi	r19, 0x01	; 1
     5b4:	fc 01       	movw	r30, r24
     5b6:	35 83       	std	Z+5, r19	; 0x05
     5b8:	24 83       	std	Z+4, r18	; 0x04
	game1info->names[3] = "About: Control";
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	9e 81       	ldd	r25, Y+6	; 0x06
     5be:	2a e2       	ldi	r18, 0x2A	; 42
     5c0:	31 e0       	ldi	r19, 0x01	; 1
     5c2:	fc 01       	movw	r30, r24
     5c4:	37 83       	std	Z+7, r19	; 0x07
     5c6:	26 83       	std	Z+6, r18	; 0x06
	game1info->names[4] = "the position";
     5c8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ca:	9e 81       	ldd	r25, Y+6	; 0x06
     5cc:	29 e3       	ldi	r18, 0x39	; 57
     5ce:	31 e0       	ldi	r19, 0x01	; 1
     5d0:	fc 01       	movw	r30, r24
     5d2:	31 87       	std	Z+9, r19	; 0x09
     5d4:	20 87       	std	Z+8, r18	; 0x08
	game1info->names[5] = "of the shooter";
     5d6:	8d 81       	ldd	r24, Y+5	; 0x05
     5d8:	9e 81       	ldd	r25, Y+6	; 0x06
     5da:	26 e4       	ldi	r18, 0x46	; 70
     5dc:	31 e0       	ldi	r19, 0x01	; 1
     5de:	fc 01       	movw	r30, r24
     5e0:	33 87       	std	Z+11, r19	; 0x0b
     5e2:	22 87       	std	Z+10, r18	; 0x0a
	
	game1info->subMenu[2] = game1info;
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	9e 81       	ldd	r25, Y+6	; 0x06
     5e8:	2d 81       	ldd	r18, Y+5	; 0x05
     5ea:	3e 81       	ldd	r19, Y+6	; 0x06
     5ec:	fc 01       	movw	r30, r24
     5ee:	35 8b       	std	Z+21, r19	; 0x15
     5f0:	24 8b       	std	Z+20, r18	; 0x14
	game1info->subMenu[3] = game1info;
     5f2:	8d 81       	ldd	r24, Y+5	; 0x05
     5f4:	9e 81       	ldd	r25, Y+6	; 0x06
     5f6:	2d 81       	ldd	r18, Y+5	; 0x05
     5f8:	3e 81       	ldd	r19, Y+6	; 0x06
     5fa:	fc 01       	movw	r30, r24
     5fc:	37 8b       	std	Z+23, r19	; 0x17
     5fe:	26 8b       	std	Z+22, r18	; 0x16
	game1info->subMenu[4] = game1info;
     600:	8d 81       	ldd	r24, Y+5	; 0x05
     602:	9e 81       	ldd	r25, Y+6	; 0x06
     604:	2d 81       	ldd	r18, Y+5	; 0x05
     606:	3e 81       	ldd	r19, Y+6	; 0x06
     608:	fc 01       	movw	r30, r24
     60a:	31 8f       	std	Z+25, r19	; 0x19
     60c:	20 8f       	std	Z+24, r18	; 0x18
	game1info->subMenu[0] = game1;
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	9e 81       	ldd	r25, Y+6	; 0x06
     612:	29 85       	ldd	r18, Y+9	; 0x09
     614:	3a 85       	ldd	r19, Y+10	; 0x0a
     616:	fc 01       	movw	r30, r24
     618:	31 8b       	std	Z+17, r19	; 0x11
     61a:	20 8b       	std	Z+16, r18	; 0x10
	game1info->subMenu[1] = playGame;
     61c:	8d 81       	ldd	r24, Y+5	; 0x05
     61e:	9e 81       	ldd	r25, Y+6	; 0x06
     620:	2b 81       	ldd	r18, Y+3	; 0x03
     622:	3c 81       	ldd	r19, Y+4	; 0x04
     624:	fc 01       	movw	r30, r24
     626:	33 8b       	std	Z+19, r19	; 0x13
     628:	22 8b       	std	Z+18, r18	; 0x12
	
	game2info->length = 6;
     62a:	8f 81       	ldd	r24, Y+7	; 0x07
     62c:	98 85       	ldd	r25, Y+8	; 0x08
     62e:	26 e0       	ldi	r18, 0x06	; 6
     630:	fc 01       	movw	r30, r24
     632:	20 a3       	std	Z+32, r18	; 0x20
	game2info->selectionLength = 2;
     634:	8f 81       	ldd	r24, Y+7	; 0x07
     636:	98 85       	ldd	r25, Y+8	; 0x08
     638:	22 e0       	ldi	r18, 0x02	; 2
     63a:	fc 01       	movw	r30, r24
     63c:	21 a3       	std	Z+33, r18	; 0x21
	game2info->names[0] = "Play game!";
     63e:	8f 81       	ldd	r24, Y+7	; 0x07
     640:	98 85       	ldd	r25, Y+8	; 0x08
     642:	2a e0       	ldi	r18, 0x0A	; 10
     644:	31 e0       	ldi	r19, 0x01	; 1
     646:	fc 01       	movw	r30, r24
     648:	31 83       	std	Z+1, r19	; 0x01
     64a:	20 83       	st	Z, r18
	game2info->names[1] = "Exit";
     64c:	8f 81       	ldd	r24, Y+7	; 0x07
     64e:	98 85       	ldd	r25, Y+8	; 0x08
     650:	25 e1       	ldi	r18, 0x15	; 21
     652:	31 e0       	ldi	r19, 0x01	; 1
     654:	fc 01       	movw	r30, r24
     656:	33 83       	std	Z+3, r19	; 0x03
     658:	22 83       	std	Z+2, r18	; 0x02
	game2info->names[2] = " ";
     65a:	8f 81       	ldd	r24, Y+7	; 0x07
     65c:	98 85       	ldd	r25, Y+8	; 0x08
     65e:	28 e2       	ldi	r18, 0x28	; 40
     660:	31 e0       	ldi	r19, 0x01	; 1
     662:	fc 01       	movw	r30, r24
     664:	35 83       	std	Z+5, r19	; 0x05
     666:	24 83       	std	Z+4, r18	; 0x04
	game2info->names[3] = "About: Control";
     668:	8f 81       	ldd	r24, Y+7	; 0x07
     66a:	98 85       	ldd	r25, Y+8	; 0x08
     66c:	2a e2       	ldi	r18, 0x2A	; 42
     66e:	31 e0       	ldi	r19, 0x01	; 1
     670:	fc 01       	movw	r30, r24
     672:	37 83       	std	Z+7, r19	; 0x07
     674:	26 83       	std	Z+6, r18	; 0x06
	game2info->names[4] = "the speed of";
     676:	8f 81       	ldd	r24, Y+7	; 0x07
     678:	98 85       	ldd	r25, Y+8	; 0x08
     67a:	25 e5       	ldi	r18, 0x55	; 85
     67c:	31 e0       	ldi	r19, 0x01	; 1
     67e:	fc 01       	movw	r30, r24
     680:	31 87       	std	Z+9, r19	; 0x09
     682:	20 87       	std	Z+8, r18	; 0x08
	game2info->names[5] = "the shooter";
     684:	8f 81       	ldd	r24, Y+7	; 0x07
     686:	98 85       	ldd	r25, Y+8	; 0x08
     688:	22 e6       	ldi	r18, 0x62	; 98
     68a:	31 e0       	ldi	r19, 0x01	; 1
     68c:	fc 01       	movw	r30, r24
     68e:	33 87       	std	Z+11, r19	; 0x0b
     690:	22 87       	std	Z+10, r18	; 0x0a
		
	game2info->subMenu[2] = game2info;
     692:	8f 81       	ldd	r24, Y+7	; 0x07
     694:	98 85       	ldd	r25, Y+8	; 0x08
     696:	2f 81       	ldd	r18, Y+7	; 0x07
     698:	38 85       	ldd	r19, Y+8	; 0x08
     69a:	fc 01       	movw	r30, r24
     69c:	35 8b       	std	Z+21, r19	; 0x15
     69e:	24 8b       	std	Z+20, r18	; 0x14
	game2info->subMenu[3] = game2info;
     6a0:	8f 81       	ldd	r24, Y+7	; 0x07
     6a2:	98 85       	ldd	r25, Y+8	; 0x08
     6a4:	2f 81       	ldd	r18, Y+7	; 0x07
     6a6:	38 85       	ldd	r19, Y+8	; 0x08
     6a8:	fc 01       	movw	r30, r24
     6aa:	37 8b       	std	Z+23, r19	; 0x17
     6ac:	26 8b       	std	Z+22, r18	; 0x16
	game2info->subMenu[4] = game2info;
     6ae:	8f 81       	ldd	r24, Y+7	; 0x07
     6b0:	98 85       	ldd	r25, Y+8	; 0x08
     6b2:	2f 81       	ldd	r18, Y+7	; 0x07
     6b4:	38 85       	ldd	r19, Y+8	; 0x08
     6b6:	fc 01       	movw	r30, r24
     6b8:	31 8f       	std	Z+25, r19	; 0x19
     6ba:	20 8f       	std	Z+24, r18	; 0x18
	game2info->subMenu[0] = game2;
     6bc:	8f 81       	ldd	r24, Y+7	; 0x07
     6be:	98 85       	ldd	r25, Y+8	; 0x08
     6c0:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c2:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c4:	fc 01       	movw	r30, r24
     6c6:	31 8b       	std	Z+17, r19	; 0x11
     6c8:	20 8b       	std	Z+16, r18	; 0x10
	game2info->subMenu[1] = playGame;
     6ca:	8f 81       	ldd	r24, Y+7	; 0x07
     6cc:	98 85       	ldd	r25, Y+8	; 0x08
     6ce:	2b 81       	ldd	r18, Y+3	; 0x03
     6d0:	3c 81       	ldd	r19, Y+4	; 0x04
     6d2:	fc 01       	movw	r30, r24
     6d4:	33 8b       	std	Z+19, r19	; 0x13
     6d6:	22 8b       	std	Z+18, r18	; 0x12
	
	
	mainMenu->state = ZERO;
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	fc 01       	movw	r30, r24
     6de:	12 a2       	std	Z+34, r1	; 0x22
	playGame->state = ZERO;
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	fc 01       	movw	r30, r24
     6e6:	12 a2       	std	Z+34, r1	; 0x22
	game1info->state = ZERO;
     6e8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ea:	9e 81       	ldd	r25, Y+6	; 0x06
     6ec:	fc 01       	movw	r30, r24
     6ee:	12 a2       	std	Z+34, r1	; 0x22
	game2info->state = ZERO;
     6f0:	8f 81       	ldd	r24, Y+7	; 0x07
     6f2:	98 85       	ldd	r25, Y+8	; 0x08
     6f4:	fc 01       	movw	r30, r24
     6f6:	12 a2       	std	Z+34, r1	; 0x22
	game1->state = GAME1;
     6f8:	89 85       	ldd	r24, Y+9	; 0x09
     6fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     6fc:	23 e0       	ldi	r18, 0x03	; 3
     6fe:	fc 01       	movw	r30, r24
     700:	22 a3       	std	Z+34, r18	; 0x22
	game2->state = GAME2;
     702:	8b 85       	ldd	r24, Y+11	; 0x0b
     704:	9c 85       	ldd	r25, Y+12	; 0x0c
     706:	24 e0       	ldi	r18, 0x04	; 4
     708:	fc 01       	movw	r30, r24
     70a:	22 a3       	std	Z+34, r18	; 0x22
	
}
     70c:	2c 96       	adiw	r28, 0x0c	; 12
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	08 95       	ret

00000726 <mfcard_interrupt_init>:
#include <stdbool.h>
#include <avr/interrupt.h>
#include "mfcard.h"
#include "bit.h"

void mfcard_interrupt_init(void){
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
	cli();
     72e:	f8 94       	cli
	clear_bit(GICR, INT2); 
     730:	8b e5       	ldi	r24, 0x5B	; 91
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	2b e5       	ldi	r18, 0x5B	; 91
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	f9 01       	movw	r30, r18
     73a:	20 81       	ld	r18, Z
     73c:	2f 7d       	andi	r18, 0xDF	; 223
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
	clear_bit(EMCUCR,ISC2);		//Falling edge activates interrupt on INT2
     742:	86 e5       	ldi	r24, 0x56	; 86
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	26 e5       	ldi	r18, 0x56	; 86
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	f9 01       	movw	r30, r18
     74c:	20 81       	ld	r18, Z
     74e:	2e 7f       	andi	r18, 0xFE	; 254
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
	clear_bit(GIFR,INTF2);		//Makes the MCU jump to corresponding interrupt vector
     754:	8a e5       	ldi	r24, 0x5A	; 90
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	2a e5       	ldi	r18, 0x5A	; 90
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	f9 01       	movw	r30, r18
     75e:	20 81       	ld	r18, Z
     760:	2f 7d       	andi	r18, 0xDF	; 223
     762:	fc 01       	movw	r30, r24
     764:	20 83       	st	Z, r18
	set_bit(MCUCR,ISC11);
     766:	85 e5       	ldi	r24, 0x55	; 85
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	25 e5       	ldi	r18, 0x55	; 85
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	f9 01       	movw	r30, r18
     770:	20 81       	ld	r18, Z
     772:	28 60       	ori	r18, 0x08	; 8
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
	clear_bit(MCUCR,ISC10);		//Falling edge activates interrupt on INT1
     778:	85 e5       	ldi	r24, 0x55	; 85
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	25 e5       	ldi	r18, 0x55	; 85
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	2b 7f       	andi	r18, 0xFB	; 251
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
	clear_bit(GIFR,INTF1);
     78a:	8a e5       	ldi	r24, 0x5A	; 90
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	2a e5       	ldi	r18, 0x5A	; 90
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	f9 01       	movw	r30, r18
     794:	20 81       	ld	r18, Z
     796:	2f 77       	andi	r18, 0x7F	; 127
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
	set_bit(MCUCR,ISC00);
     79c:	85 e5       	ldi	r24, 0x55	; 85
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	25 e5       	ldi	r18, 0x55	; 85
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	21 60       	ori	r18, 0x01	; 1
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
	set_bit(MCUCR,ISC01);
     7ae:	85 e5       	ldi	r24, 0x55	; 85
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	25 e5       	ldi	r18, 0x55	; 85
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	22 60       	ori	r18, 0x02	; 2
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
	set_bit(GICR, INT2);		//INT2 enabled as interrupt
     7c0:	8b e5       	ldi	r24, 0x5B	; 91
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	2b e5       	ldi	r18, 0x5B	; 91
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	f9 01       	movw	r30, r18
     7ca:	20 81       	ld	r18, Z
     7cc:	20 62       	ori	r18, 0x20	; 32
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
	set_bit(GICR, INT1);
     7d2:	8b e5       	ldi	r24, 0x5B	; 91
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	2b e5       	ldi	r18, 0x5B	; 91
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	f9 01       	movw	r30, r18
     7dc:	20 81       	ld	r18, Z
     7de:	20 68       	ori	r18, 0x80	; 128
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
	sei();
     7e4:	78 94       	sei
	//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <mfcard_init>:

void mfcard_init(void){
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
	clear_bit(DDRE, DDE0);		//sets joystick button pin to input
     7f4:	86 e2       	ldi	r24, 0x26	; 38
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	26 e2       	ldi	r18, 0x26	; 38
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	20 81       	ld	r18, Z
     800:	2e 7f       	andi	r18, 0xFE	; 254
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
	set_bit(PORTE, PORTE0);		//enables pull up resistor
     806:	87 e2       	ldi	r24, 0x27	; 39
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	27 e2       	ldi	r18, 0x27	; 39
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	20 81       	ld	r18, Z
     812:	21 60       	ori	r18, 0x01	; 1
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
	clear_bit(DDRD, DDD2);
     818:	81 e3       	ldi	r24, 0x31	; 49
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	21 e3       	ldi	r18, 0x31	; 49
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	f9 01       	movw	r30, r18
     822:	20 81       	ld	r18, Z
     824:	2b 7f       	andi	r18, 0xFB	; 251
     826:	fc 01       	movw	r30, r24
     828:	20 83       	st	Z, r18
	
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <solenoid_init>:
#include "bit.h"
#include <avr/io.h>
#include <util/delay.h>


void solenoid_init(){
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
	set_bit(DDRD, DDD4);
     838:	81 e3       	ldi	r24, 0x31	; 49
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	21 e3       	ldi	r18, 0x31	; 49
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	f9 01       	movw	r30, r18
     842:	20 81       	ld	r18, Z
     844:	20 61       	ori	r18, 0x10	; 16
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
	set_bit(PORTD, PORTD4);
     84a:	82 e3       	ldi	r24, 0x32	; 50
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	22 e3       	ldi	r18, 0x32	; 50
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	f9 01       	movw	r30, r18
     854:	20 81       	ld	r18, Z
     856:	20 61       	ori	r18, 0x10	; 16
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <spi_init>:
 *  Author: sondrfos
 */ 
#include <avr/io.h>
#include "bit.h"

void spi_init(void){
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
	set_bit(DDRB, DDB4);	//SS = output
     86a:	87 e3       	ldi	r24, 0x37	; 55
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	27 e3       	ldi	r18, 0x37	; 55
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	f9 01       	movw	r30, r18
     874:	20 81       	ld	r18, Z
     876:	20 61       	ori	r18, 0x10	; 16
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
	set_bit(DDRB, DDB5);	//MOSI = output
     87c:	87 e3       	ldi	r24, 0x37	; 55
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	27 e3       	ldi	r18, 0x37	; 55
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	f9 01       	movw	r30, r18
     886:	20 81       	ld	r18, Z
     888:	20 62       	ori	r18, 0x20	; 32
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
	clear_bit(DDRB, DDB6);	//MISO = input
     88e:	87 e3       	ldi	r24, 0x37	; 55
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	27 e3       	ldi	r18, 0x37	; 55
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	2f 7b       	andi	r18, 0xBF	; 191
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
	set_bit(PORTB, PORTB6);	//MISO = pull-up
     8a0:	88 e3       	ldi	r24, 0x38	; 56
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	28 e3       	ldi	r18, 0x38	; 56
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	f9 01       	movw	r30, r18
     8aa:	20 81       	ld	r18, Z
     8ac:	20 64       	ori	r18, 0x40	; 64
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
	set_bit(DDRB, DDB7);	//SCK = output
     8b2:	87 e3       	ldi	r24, 0x37	; 55
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	27 e3       	ldi	r18, 0x37	; 55
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	20 68       	ori	r18, 0x80	; 128
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18

	set_bit(SPCR, SPE);		//Enables SPI	
     8c4:	8d e2       	ldi	r24, 0x2D	; 45
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	2d e2       	ldi	r18, 0x2D	; 45
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	f9 01       	movw	r30, r18
     8ce:	20 81       	ld	r18, Z
     8d0:	20 64       	ori	r18, 0x40	; 64
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18
	set_bit(SPCR, SPR0);	//clock rate fck/16
     8d6:	8d e2       	ldi	r24, 0x2D	; 45
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	2d e2       	ldi	r18, 0x2D	; 45
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	21 60       	ori	r18, 0x01	; 1
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
	set_bit(PORTB, PB4);	//set SS high
     8e8:	88 e3       	ldi	r24, 0x38	; 56
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	28 e3       	ldi	r18, 0x38	; 56
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	f9 01       	movw	r30, r18
     8f2:	20 81       	ld	r18, Z
     8f4:	20 61       	ori	r18, 0x10	; 16
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 83       	st	Z, r18
	set_bit(SPCR, MSTR);	//sets MCU as master
     8fa:	8d e2       	ldi	r24, 0x2D	; 45
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	2d e2       	ldi	r18, 0x2D	; 45
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	f9 01       	movw	r30, r18
     904:	20 81       	ld	r18, Z
     906:	20 61       	ori	r18, 0x10	; 16
     908:	fc 01       	movw	r30, r24
     90a:	20 83       	st	Z, r18
	
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <spi_transmit>:

uint8_t spi_transmit(uint8_t cData){
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	1f 92       	push	r1
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = cData;							//transmit data
     91e:	8f e2       	ldi	r24, 0x2F	; 47
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	29 81       	ldd	r18, Y+1	; 0x01
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
	
	loop_until_bit_is_set( SPSR, SPIF );	//wait until transmit flag is set
     928:	00 00       	nop
     92a:	8e e2       	ldi	r24, 0x2E	; 46
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	fc 01       	movw	r30, r24
     930:	80 81       	ld	r24, Z
     932:	88 1f       	adc	r24, r24
     934:	88 27       	eor	r24, r24
     936:	88 1f       	adc	r24, r24
     938:	88 2f       	mov	r24, r24
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	99 27       	eor	r25, r25
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	a1 f3       	breq	.-24     	; 0x92a <spi_transmit+0x18>
	
	return SPDR;
     942:	8f e2       	ldi	r24, 0x2F	; 47
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
}
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <spi_select>:

void spi_select (){
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
	clear_bit(PORTB, PB4);
     95a:	88 e3       	ldi	r24, 0x38	; 56
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	28 e3       	ldi	r18, 0x38	; 56
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	f9 01       	movw	r30, r18
     964:	20 81       	ld	r18, Z
     966:	2f 7e       	andi	r18, 0xEF	; 239
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <spi_deselect>:

void spi_deselect(){
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
	set_bit(PORTB, PB4);
     97a:	88 e3       	ldi	r24, 0x38	; 56
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	28 e3       	ldi	r18, 0x38	; 56
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	f9 01       	movw	r30, r18
     984:	20 81       	ld	r18, Z
     986:	20 61       	ori	r18, 0x10	; 16
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <sram_init>:

#include <avr/io.h>
#include "bit.h"


void sram_init(void){
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
	set_bit(SFIOR,XMM2);
     99a:	80 e5       	ldi	r24, 0x50	; 80
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	20 e5       	ldi	r18, 0x50	; 80
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	f9 01       	movw	r30, r18
     9a4:	20 81       	ld	r18, Z
     9a6:	20 62       	ori	r18, 0x20	; 32
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
	clear_bit(SFIOR,XMM1);
     9ac:	80 e5       	ldi	r24, 0x50	; 80
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	20 e5       	ldi	r18, 0x50	; 80
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	20 81       	ld	r18, Z
     9b8:	2f 7e       	andi	r18, 0xEF	; 239
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
	clear_bit(SFIOR,XMM0);
     9be:	80 e5       	ldi	r24, 0x50	; 80
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	20 e5       	ldi	r18, 0x50	; 80
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	f9 01       	movw	r30, r18
     9c8:	20 81       	ld	r18, Z
     9ca:	27 7f       	andi	r18, 0xF7	; 247
     9cc:	fc 01       	movw	r30, r24
     9ce:	20 83       	st	Z, r18
	set_bit(MCUCR,SRE);
     9d0:	85 e5       	ldi	r24, 0x55	; 85
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	25 e5       	ldi	r18, 0x55	; 85
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	f9 01       	movw	r30, r18
     9da:	20 81       	ld	r18, Z
     9dc:	20 68       	ori	r18, 0x80	; 128
     9de:	fc 01       	movw	r30, r24
     9e0:	20 83       	st	Z, r18
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <SRAM_test>:




void SRAM_test(void)
{
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	62 97       	sbiw	r28, 0x12	; 18
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	98 e1       	ldi	r25, 0x18	; 24
     a00:	9a 87       	std	Y+10, r25	; 0x0a
     a02:	89 87       	std	Y+9, r24	; 0x09
	uint16_t ext_ram_size       = 0x800;
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	98 e0       	ldi	r25, 0x08	; 8
     a08:	9c 87       	std	Y+12, r25	; 0x0c
     a0a:	8b 87       	std	Y+11, r24	; 0x0b
	uint16_t write_errors       = 0;
     a0c:	1a 82       	std	Y+2, r1	; 0x02
     a0e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t retrieval_errors   = 0;
     a10:	1c 82       	std	Y+4, r1	; 0x04
     a12:	1b 82       	std	Y+3, r1	; 0x03

	printf("Starting SRAM test...\n");
     a14:	8e e6       	ldi	r24, 0x6E	; 110
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 11 07 	call	0xe22	; 0xe22 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     a1c:	0e 94 70 06 	call	0xce0	; 0xce0 <rand>
     a20:	9e 87       	std	Y+14, r25	; 0x0e
     a22:	8d 87       	std	Y+13, r24	; 0x0d

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     a24:	8d 85       	ldd	r24, Y+13	; 0x0d
     a26:	9e 85       	ldd	r25, Y+14	; 0x0e
     a28:	0e 94 75 06 	call	0xcea	; 0xcea <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a2c:	1e 82       	std	Y+6, r1	; 0x06
     a2e:	1d 82       	std	Y+5, r1	; 0x05
     a30:	44 c0       	rjmp	.+136    	; 0xaba <SRAM_test+0xd2>
		uint8_t some_value = rand();
     a32:	0e 94 70 06 	call	0xce0	; 0xce0 <rand>
     a36:	8f 87       	std	Y+15, r24	; 0x0f
		ext_ram[i] = some_value;
     a38:	29 85       	ldd	r18, Y+9	; 0x09
     a3a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a3c:	8d 81       	ldd	r24, Y+5	; 0x05
     a3e:	9e 81       	ldd	r25, Y+6	; 0x06
     a40:	82 0f       	add	r24, r18
     a42:	93 1f       	adc	r25, r19
     a44:	2f 85       	ldd	r18, Y+15	; 0x0f
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
		uint8_t retreived_value = ext_ram[i];
     a4a:	29 85       	ldd	r18, Y+9	; 0x09
     a4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a4e:	8d 81       	ldd	r24, Y+5	; 0x05
     a50:	9e 81       	ldd	r25, Y+6	; 0x06
     a52:	82 0f       	add	r24, r18
     a54:	93 1f       	adc	r25, r19
     a56:	fc 01       	movw	r30, r24
     a58:	80 81       	ld	r24, Z
     a5a:	88 8b       	std	Y+16, r24	; 0x10
		if (retreived_value != some_value) {
     a5c:	98 89       	ldd	r25, Y+16	; 0x10
     a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a60:	98 17       	cp	r25, r24
     a62:	31 f1       	breq	.+76     	; 0xab0 <SRAM_test+0xc8>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     a64:	8f 85       	ldd	r24, Y+15	; 0x0f
     a66:	28 2f       	mov	r18, r24
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	88 89       	ldd	r24, Y+16	; 0x10
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	43 2f       	mov	r20, r19
     a72:	4f 93       	push	r20
     a74:	2f 93       	push	r18
     a76:	29 2f       	mov	r18, r25
     a78:	2f 93       	push	r18
     a7a:	8f 93       	push	r24
     a7c:	8e 81       	ldd	r24, Y+6	; 0x06
     a7e:	8f 93       	push	r24
     a80:	8d 81       	ldd	r24, Y+5	; 0x05
     a82:	8f 93       	push	r24
     a84:	84 e8       	ldi	r24, 0x84	; 132
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	89 2f       	mov	r24, r25
     a8a:	8f 93       	push	r24
     a8c:	84 e8       	ldi	r24, 0x84	; 132
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	8f 93       	push	r24
     a92:	0e 94 fd 06 	call	0xdfa	; 0xdfa <printf>
     a96:	8d b7       	in	r24, 0x3d	; 61
     a98:	9e b7       	in	r25, 0x3e	; 62
     a9a:	08 96       	adiw	r24, 0x08	; 8
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
			write_errors++;
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     ab0:	8d 81       	ldd	r24, Y+5	; 0x05
     ab2:	9e 81       	ldd	r25, Y+6	; 0x06
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	9e 83       	std	Y+6, r25	; 0x06
     ab8:	8d 83       	std	Y+5, r24	; 0x05
     aba:	2d 81       	ldd	r18, Y+5	; 0x05
     abc:	3e 81       	ldd	r19, Y+6	; 0x06
     abe:	8b 85       	ldd	r24, Y+11	; 0x0b
     ac0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ac2:	28 17       	cp	r18, r24
     ac4:	39 07       	cpc	r19, r25
     ac6:	08 f4       	brcc	.+2      	; 0xaca <SRAM_test+0xe2>
     ac8:	b4 cf       	rjmp	.-152    	; 0xa32 <SRAM_test+0x4a>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     aca:	8d 85       	ldd	r24, Y+13	; 0x0d
     acc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ace:	0e 94 75 06 	call	0xcea	; 0xcea <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     ad2:	18 86       	std	Y+8, r1	; 0x08
     ad4:	1f 82       	std	Y+7, r1	; 0x07
     ad6:	3b c0       	rjmp	.+118    	; 0xb4e <SRAM_test+0x166>
		uint8_t some_value = rand();
     ad8:	0e 94 70 06 	call	0xce0	; 0xce0 <rand>
     adc:	89 8b       	std	Y+17, r24	; 0x11
		uint8_t retreived_value = ext_ram[i];
     ade:	29 85       	ldd	r18, Y+9	; 0x09
     ae0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae2:	8f 81       	ldd	r24, Y+7	; 0x07
     ae4:	98 85       	ldd	r25, Y+8	; 0x08
     ae6:	82 0f       	add	r24, r18
     ae8:	93 1f       	adc	r25, r19
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	8a 8b       	std	Y+18, r24	; 0x12
		if (retreived_value != some_value) {
     af0:	9a 89       	ldd	r25, Y+18	; 0x12
     af2:	89 89       	ldd	r24, Y+17	; 0x11
     af4:	98 17       	cp	r25, r24
     af6:	31 f1       	breq	.+76     	; 0xb44 <SRAM_test+0x15c>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     af8:	89 89       	ldd	r24, Y+17	; 0x11
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	8a 89       	ldd	r24, Y+18	; 0x12
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	43 2f       	mov	r20, r19
     b06:	4f 93       	push	r20
     b08:	2f 93       	push	r18
     b0a:	29 2f       	mov	r18, r25
     b0c:	2f 93       	push	r18
     b0e:	8f 93       	push	r24
     b10:	88 85       	ldd	r24, Y+8	; 0x08
     b12:	8f 93       	push	r24
     b14:	8f 81       	ldd	r24, Y+7	; 0x07
     b16:	8f 93       	push	r24
     b18:	8d eb       	ldi	r24, 0xBD	; 189
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	89 2f       	mov	r24, r25
     b1e:	8f 93       	push	r24
     b20:	8d eb       	ldi	r24, 0xBD	; 189
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	8f 93       	push	r24
     b26:	0e 94 fd 06 	call	0xdfa	; 0xdfa <printf>
     b2a:	8d b7       	in	r24, 0x3d	; 61
     b2c:	9e b7       	in	r25, 0x3e	; 62
     b2e:	08 96       	adiw	r24, 0x08	; 8
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
			retrieval_errors++;
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	9c 83       	std	Y+4, r25	; 0x04
     b42:	8b 83       	std	Y+3, r24	; 0x03
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b44:	8f 81       	ldd	r24, Y+7	; 0x07
     b46:	98 85       	ldd	r25, Y+8	; 0x08
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	98 87       	std	Y+8, r25	; 0x08
     b4c:	8f 83       	std	Y+7, r24	; 0x07
     b4e:	2f 81       	ldd	r18, Y+7	; 0x07
     b50:	38 85       	ldd	r19, Y+8	; 0x08
     b52:	8b 85       	ldd	r24, Y+11	; 0x0b
     b54:	9c 85       	ldd	r25, Y+12	; 0x0c
     b56:	28 17       	cp	r18, r24
     b58:	39 07       	cpc	r19, r25
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <SRAM_test+0x176>
     b5c:	bd cf       	rjmp	.-134    	; 0xad8 <SRAM_test+0xf0>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     b5e:	8c 81       	ldd	r24, Y+4	; 0x04
     b60:	8f 93       	push	r24
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	8f 93       	push	r24
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
     b68:	8f 93       	push	r24
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	8f 93       	push	r24
     b6e:	8a ef       	ldi	r24, 0xFA	; 250
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	89 2f       	mov	r24, r25
     b74:	8f 93       	push	r24
     b76:	8a ef       	ldi	r24, 0xFA	; 250
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	8f 93       	push	r24
     b7c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <printf>
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
}
     b8c:	62 96       	adiw	r28, 0x12	; 18
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <uart_transmit>:
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	1f 92       	push	r1
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	8b e2       	ldi	r24, 0x2B	; 43
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	fc 01       	movw	r30, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	80 72       	andi	r24, 0x20	; 32
     bb8:	99 27       	eor	r25, r25
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	b1 f3       	breq	.-20     	; 0xbaa <uart_transmit+0xc>
     bbe:	8c e2       	ldi	r24, 0x2C	; 44
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	29 81       	ldd	r18, Y+1	; 0x01
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <uart_receive>:
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	8b e2       	ldi	r24, 0x2B	; 43
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	fc 01       	movw	r30, r24
     bde:	80 81       	ld	r24, Z
     be0:	88 23       	and	r24, r24
     be2:	d4 f7       	brge	.-12     	; 0xbd8 <uart_receive+0x8>
     be4:	8c e2       	ldi	r24, 0x2C	; 44
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <uart_init>:
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <uart_init+0x6>
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	9a 83       	std	Y+2, r25	; 0x02
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	80 e4       	ldi	r24, 0x40	; 64
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	29 81       	ldd	r18, Y+1	; 0x01
     c06:	3a 81       	ldd	r19, Y+2	; 0x02
     c08:	23 2f       	mov	r18, r19
     c0a:	33 27       	eor	r19, r19
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
     c10:	89 e2       	ldi	r24, 0x29	; 41
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	29 81       	ldd	r18, Y+1	; 0x01
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
     c1a:	8a e2       	ldi	r24, 0x2A	; 42
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	28 e1       	ldi	r18, 0x18	; 24
     c20:	fc 01       	movw	r30, r24
     c22:	20 83       	st	Z, r18
     c24:	80 e4       	ldi	r24, 0x40	; 64
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	2e e8       	ldi	r18, 0x8E	; 142
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
     c2e:	68 ee       	ldi	r22, 0xE8	; 232
     c30:	75 e0       	ldi	r23, 0x05	; 5
     c32:	8f ec       	ldi	r24, 0xCF	; 207
     c34:	95 e0       	ldi	r25, 0x05	; 5
     c36:	0e 94 80 06 	call	0xd00	; 0xd00 <fdevopen>
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <do_rand>:
     c44:	8f 92       	push	r8
     c46:	9f 92       	push	r9
     c48:	af 92       	push	r10
     c4a:	bf 92       	push	r11
     c4c:	cf 92       	push	r12
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
     c5a:	68 81       	ld	r22, Y
     c5c:	79 81       	ldd	r23, Y+1	; 0x01
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	9b 81       	ldd	r25, Y+3	; 0x03
     c62:	61 15       	cp	r22, r1
     c64:	71 05       	cpc	r23, r1
     c66:	81 05       	cpc	r24, r1
     c68:	91 05       	cpc	r25, r1
     c6a:	21 f4       	brne	.+8      	; 0xc74 <do_rand+0x30>
     c6c:	64 e2       	ldi	r22, 0x24	; 36
     c6e:	79 ed       	ldi	r23, 0xD9	; 217
     c70:	8b e5       	ldi	r24, 0x5B	; 91
     c72:	97 e0       	ldi	r25, 0x07	; 7
     c74:	2d e1       	ldi	r18, 0x1D	; 29
     c76:	33 ef       	ldi	r19, 0xF3	; 243
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	0e 94 ce 0a 	call	0x159c	; 0x159c <__divmodsi4>
     c80:	49 01       	movw	r8, r18
     c82:	5a 01       	movw	r10, r20
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	a7 ea       	ldi	r26, 0xA7	; 167
     c8a:	b1 e4       	ldi	r27, 0x41	; 65
     c8c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__muluhisi3>
     c90:	6b 01       	movw	r12, r22
     c92:	7c 01       	movw	r14, r24
     c94:	ac ee       	ldi	r26, 0xEC	; 236
     c96:	b4 ef       	ldi	r27, 0xF4	; 244
     c98:	a5 01       	movw	r20, r10
     c9a:	94 01       	movw	r18, r8
     c9c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__mulohisi3>
     ca0:	c6 0e       	add	r12, r22
     ca2:	d7 1e       	adc	r13, r23
     ca4:	e8 1e       	adc	r14, r24
     ca6:	f9 1e       	adc	r15, r25
     ca8:	f7 fe       	sbrs	r15, 7
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <do_rand+0x74>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	c8 1a       	sub	r12, r24
     cb0:	d1 08       	sbc	r13, r1
     cb2:	e1 08       	sbc	r14, r1
     cb4:	80 e8       	ldi	r24, 0x80	; 128
     cb6:	f8 0a       	sbc	r15, r24
     cb8:	c8 82       	st	Y, r12
     cba:	d9 82       	std	Y+1, r13	; 0x01
     cbc:	ea 82       	std	Y+2, r14	; 0x02
     cbe:	fb 82       	std	Y+3, r15	; 0x03
     cc0:	c6 01       	movw	r24, r12
     cc2:	9f 77       	andi	r25, 0x7F	; 127
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	9f 90       	pop	r9
     cd6:	8f 90       	pop	r8
     cd8:	08 95       	ret

00000cda <rand_r>:
     cda:	0e 94 22 06 	call	0xc44	; 0xc44 <do_rand>
     cde:	08 95       	ret

00000ce0 <rand>:
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 22 06 	call	0xc44	; 0xc44 <do_rand>
     ce8:	08 95       	ret

00000cea <srand>:
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	80 93 00 01 	sts	0x0100, r24
     cf2:	90 93 01 01 	sts	0x0101, r25
     cf6:	a0 93 02 01 	sts	0x0102, r26
     cfa:	b0 93 03 01 	sts	0x0103, r27
     cfe:	08 95       	ret

00000d00 <fdevopen>:
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	ec 01       	movw	r28, r24
     d0a:	8b 01       	movw	r16, r22
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	31 f4       	brne	.+12     	; 0xd1c <fdevopen+0x1c>
     d10:	61 15       	cp	r22, r1
     d12:	71 05       	cpc	r23, r1
     d14:	19 f4       	brne	.+6      	; 0xd1c <fdevopen+0x1c>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	38 c0       	rjmp	.+112    	; 0xd8c <fdevopen+0x8c>
     d1c:	6e e0       	ldi	r22, 0x0E	; 14
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 10 09 	call	0x1220	; 0x1220 <calloc>
     d28:	fc 01       	movw	r30, r24
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	a1 f3       	breq	.-24     	; 0xd16 <fdevopen+0x16>
     d2e:	80 e8       	ldi	r24, 0x80	; 128
     d30:	83 83       	std	Z+3, r24	; 0x03
     d32:	01 15       	cp	r16, r1
     d34:	11 05       	cpc	r17, r1
     d36:	71 f0       	breq	.+28     	; 0xd54 <fdevopen+0x54>
     d38:	13 87       	std	Z+11, r17	; 0x0b
     d3a:	02 87       	std	Z+10, r16	; 0x0a
     d3c:	81 e8       	ldi	r24, 0x81	; 129
     d3e:	83 83       	std	Z+3, r24	; 0x03
     d40:	80 91 68 02 	lds	r24, 0x0268
     d44:	90 91 69 02 	lds	r25, 0x0269
     d48:	89 2b       	or	r24, r25
     d4a:	21 f4       	brne	.+8      	; 0xd54 <fdevopen+0x54>
     d4c:	f0 93 69 02 	sts	0x0269, r31
     d50:	e0 93 68 02 	sts	0x0268, r30
     d54:	20 97       	sbiw	r28, 0x00	; 0
     d56:	c9 f0       	breq	.+50     	; 0xd8a <fdevopen+0x8a>
     d58:	d1 87       	std	Z+9, r29	; 0x09
     d5a:	c0 87       	std	Z+8, r28	; 0x08
     d5c:	83 81       	ldd	r24, Z+3	; 0x03
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	83 83       	std	Z+3, r24	; 0x03
     d62:	80 91 6a 02 	lds	r24, 0x026A
     d66:	90 91 6b 02 	lds	r25, 0x026B
     d6a:	89 2b       	or	r24, r25
     d6c:	71 f4       	brne	.+28     	; 0xd8a <fdevopen+0x8a>
     d6e:	f0 93 6b 02 	sts	0x026B, r31
     d72:	e0 93 6a 02 	sts	0x026A, r30
     d76:	80 91 6c 02 	lds	r24, 0x026C
     d7a:	90 91 6d 02 	lds	r25, 0x026D
     d7e:	89 2b       	or	r24, r25
     d80:	21 f4       	brne	.+8      	; 0xd8a <fdevopen+0x8a>
     d82:	f0 93 6d 02 	sts	0x026D, r31
     d86:	e0 93 6c 02 	sts	0x026C, r30
     d8a:	cf 01       	movw	r24, r30
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <fputc>:
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	18 2f       	mov	r17, r24
     da0:	09 2f       	mov	r16, r25
     da2:	eb 01       	movw	r28, r22
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	81 fd       	sbrc	r24, 1
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <fputc+0x1a>
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	9f ef       	ldi	r25, 0xFF	; 255
     dae:	20 c0       	rjmp	.+64     	; 0xdf0 <fputc+0x5a>
     db0:	82 ff       	sbrs	r24, 2
     db2:	10 c0       	rjmp	.+32     	; 0xdd4 <fputc+0x3e>
     db4:	4e 81       	ldd	r20, Y+6	; 0x06
     db6:	5f 81       	ldd	r21, Y+7	; 0x07
     db8:	2c 81       	ldd	r18, Y+4	; 0x04
     dba:	3d 81       	ldd	r19, Y+5	; 0x05
     dbc:	42 17       	cp	r20, r18
     dbe:	53 07       	cpc	r21, r19
     dc0:	7c f4       	brge	.+30     	; 0xde0 <fputc+0x4a>
     dc2:	e8 81       	ld	r30, Y
     dc4:	f9 81       	ldd	r31, Y+1	; 0x01
     dc6:	9f 01       	movw	r18, r30
     dc8:	2f 5f       	subi	r18, 0xFF	; 255
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	39 83       	std	Y+1, r19	; 0x01
     dce:	28 83       	st	Y, r18
     dd0:	10 83       	st	Z, r17
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <fputc+0x4a>
     dd4:	e8 85       	ldd	r30, Y+8	; 0x08
     dd6:	f9 85       	ldd	r31, Y+9	; 0x09
     dd8:	81 2f       	mov	r24, r17
     dda:	09 95       	icall
     ddc:	89 2b       	or	r24, r25
     dde:	29 f7       	brne	.-54     	; 0xdaa <fputc+0x14>
     de0:	2e 81       	ldd	r18, Y+6	; 0x06
     de2:	3f 81       	ldd	r19, Y+7	; 0x07
     de4:	2f 5f       	subi	r18, 0xFF	; 255
     de6:	3f 4f       	sbci	r19, 0xFF	; 255
     de8:	3f 83       	std	Y+7, r19	; 0x07
     dea:	2e 83       	std	Y+6, r18	; 0x06
     dec:	81 2f       	mov	r24, r17
     dee:	90 2f       	mov	r25, r16
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	08 95       	ret

00000dfa <printf>:
     dfa:	a0 e0       	ldi	r26, 0x00	; 0
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e3 e0       	ldi	r30, 0x03	; 3
     e00:	f7 e0       	ldi	r31, 0x07	; 7
     e02:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__prologue_saves__+0x20>
     e06:	fe 01       	movw	r30, r28
     e08:	35 96       	adiw	r30, 0x05	; 5
     e0a:	61 91       	ld	r22, Z+
     e0c:	71 91       	ld	r23, Z+
     e0e:	af 01       	movw	r20, r30
     e10:	80 91 6a 02 	lds	r24, 0x026A
     e14:	90 91 6b 02 	lds	r25, 0x026B
     e18:	0e 94 3e 07 	call	0xe7c	; 0xe7c <vfprintf>
     e1c:	e2 e0       	ldi	r30, 0x02	; 2
     e1e:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__epilogue_restores__+0x20>

00000e22 <puts>:
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	e0 91 6a 02 	lds	r30, 0x026A
     e2e:	f0 91 6b 02 	lds	r31, 0x026B
     e32:	23 81       	ldd	r18, Z+3	; 0x03
     e34:	21 ff       	sbrs	r18, 1
     e36:	1b c0       	rjmp	.+54     	; 0xe6e <puts+0x4c>
     e38:	ec 01       	movw	r28, r24
     e3a:	00 e0       	ldi	r16, 0x00	; 0
     e3c:	10 e0       	ldi	r17, 0x00	; 0
     e3e:	89 91       	ld	r24, Y+
     e40:	60 91 6a 02 	lds	r22, 0x026A
     e44:	70 91 6b 02 	lds	r23, 0x026B
     e48:	db 01       	movw	r26, r22
     e4a:	18 96       	adiw	r26, 0x08	; 8
     e4c:	ed 91       	ld	r30, X+
     e4e:	fc 91       	ld	r31, X
     e50:	19 97       	sbiw	r26, 0x09	; 9
     e52:	88 23       	and	r24, r24
     e54:	31 f0       	breq	.+12     	; 0xe62 <puts+0x40>
     e56:	09 95       	icall
     e58:	89 2b       	or	r24, r25
     e5a:	89 f3       	breq	.-30     	; 0xe3e <puts+0x1c>
     e5c:	0f ef       	ldi	r16, 0xFF	; 255
     e5e:	1f ef       	ldi	r17, 0xFF	; 255
     e60:	ee cf       	rjmp	.-36     	; 0xe3e <puts+0x1c>
     e62:	8a e0       	ldi	r24, 0x0A	; 10
     e64:	09 95       	icall
     e66:	89 2b       	or	r24, r25
     e68:	11 f4       	brne	.+4      	; 0xe6e <puts+0x4c>
     e6a:	c8 01       	movw	r24, r16
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <puts+0x50>
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	9f ef       	ldi	r25, 0xFF	; 255
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <vfprintf>:
     e7c:	ac e0       	ldi	r26, 0x0C	; 12
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e4       	ldi	r30, 0x44	; 68
     e82:	f7 e0       	ldi	r31, 0x07	; 7
     e84:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__prologue_saves__>
     e88:	7c 01       	movw	r14, r24
     e8a:	6b 01       	movw	r12, r22
     e8c:	8a 01       	movw	r16, r20
     e8e:	fc 01       	movw	r30, r24
     e90:	17 82       	std	Z+7, r1	; 0x07
     e92:	16 82       	std	Z+6, r1	; 0x06
     e94:	83 81       	ldd	r24, Z+3	; 0x03
     e96:	81 ff       	sbrs	r24, 1
     e98:	bd c1       	rjmp	.+890    	; 0x1214 <vfprintf+0x398>
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	4c 01       	movw	r8, r24
     ea0:	f7 01       	movw	r30, r14
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	f6 01       	movw	r30, r12
     ea6:	93 fd       	sbrc	r25, 3
     ea8:	85 91       	lpm	r24, Z+
     eaa:	93 ff       	sbrs	r25, 3
     eac:	81 91       	ld	r24, Z+
     eae:	6f 01       	movw	r12, r30
     eb0:	88 23       	and	r24, r24
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <vfprintf+0x3a>
     eb4:	ab c1       	rjmp	.+854    	; 0x120c <vfprintf+0x390>
     eb6:	85 32       	cpi	r24, 0x25	; 37
     eb8:	39 f4       	brne	.+14     	; 0xec8 <vfprintf+0x4c>
     eba:	93 fd       	sbrc	r25, 3
     ebc:	85 91       	lpm	r24, Z+
     ebe:	93 ff       	sbrs	r25, 3
     ec0:	81 91       	ld	r24, Z+
     ec2:	6f 01       	movw	r12, r30
     ec4:	85 32       	cpi	r24, 0x25	; 37
     ec6:	29 f4       	brne	.+10     	; 0xed2 <vfprintf+0x56>
     ec8:	b7 01       	movw	r22, r14
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
     ed0:	e7 cf       	rjmp	.-50     	; 0xea0 <vfprintf+0x24>
     ed2:	51 2c       	mov	r5, r1
     ed4:	31 2c       	mov	r3, r1
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	20 32       	cpi	r18, 0x20	; 32
     eda:	a0 f4       	brcc	.+40     	; 0xf04 <vfprintf+0x88>
     edc:	8b 32       	cpi	r24, 0x2B	; 43
     ede:	69 f0       	breq	.+26     	; 0xefa <vfprintf+0x7e>
     ee0:	30 f4       	brcc	.+12     	; 0xeee <vfprintf+0x72>
     ee2:	80 32       	cpi	r24, 0x20	; 32
     ee4:	59 f0       	breq	.+22     	; 0xefc <vfprintf+0x80>
     ee6:	83 32       	cpi	r24, 0x23	; 35
     ee8:	69 f4       	brne	.+26     	; 0xf04 <vfprintf+0x88>
     eea:	20 61       	ori	r18, 0x10	; 16
     eec:	2c c0       	rjmp	.+88     	; 0xf46 <vfprintf+0xca>
     eee:	8d 32       	cpi	r24, 0x2D	; 45
     ef0:	39 f0       	breq	.+14     	; 0xf00 <vfprintf+0x84>
     ef2:	80 33       	cpi	r24, 0x30	; 48
     ef4:	39 f4       	brne	.+14     	; 0xf04 <vfprintf+0x88>
     ef6:	21 60       	ori	r18, 0x01	; 1
     ef8:	26 c0       	rjmp	.+76     	; 0xf46 <vfprintf+0xca>
     efa:	22 60       	ori	r18, 0x02	; 2
     efc:	24 60       	ori	r18, 0x04	; 4
     efe:	23 c0       	rjmp	.+70     	; 0xf46 <vfprintf+0xca>
     f00:	28 60       	ori	r18, 0x08	; 8
     f02:	21 c0       	rjmp	.+66     	; 0xf46 <vfprintf+0xca>
     f04:	27 fd       	sbrc	r18, 7
     f06:	27 c0       	rjmp	.+78     	; 0xf56 <vfprintf+0xda>
     f08:	30 ed       	ldi	r19, 0xD0	; 208
     f0a:	38 0f       	add	r19, r24
     f0c:	3a 30       	cpi	r19, 0x0A	; 10
     f0e:	78 f4       	brcc	.+30     	; 0xf2e <vfprintf+0xb2>
     f10:	26 ff       	sbrs	r18, 6
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <vfprintf+0xa4>
     f14:	fa e0       	ldi	r31, 0x0A	; 10
     f16:	5f 9e       	mul	r5, r31
     f18:	30 0d       	add	r19, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	53 2e       	mov	r5, r19
     f1e:	13 c0       	rjmp	.+38     	; 0xf46 <vfprintf+0xca>
     f20:	8a e0       	ldi	r24, 0x0A	; 10
     f22:	38 9e       	mul	r3, r24
     f24:	30 0d       	add	r19, r0
     f26:	11 24       	eor	r1, r1
     f28:	33 2e       	mov	r3, r19
     f2a:	20 62       	ori	r18, 0x20	; 32
     f2c:	0c c0       	rjmp	.+24     	; 0xf46 <vfprintf+0xca>
     f2e:	8e 32       	cpi	r24, 0x2E	; 46
     f30:	21 f4       	brne	.+8      	; 0xf3a <vfprintf+0xbe>
     f32:	26 fd       	sbrc	r18, 6
     f34:	6b c1       	rjmp	.+726    	; 0x120c <vfprintf+0x390>
     f36:	20 64       	ori	r18, 0x40	; 64
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0xca>
     f3a:	8c 36       	cpi	r24, 0x6C	; 108
     f3c:	11 f4       	brne	.+4      	; 0xf42 <vfprintf+0xc6>
     f3e:	20 68       	ori	r18, 0x80	; 128
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <vfprintf+0xca>
     f42:	88 36       	cpi	r24, 0x68	; 104
     f44:	41 f4       	brne	.+16     	; 0xf56 <vfprintf+0xda>
     f46:	f6 01       	movw	r30, r12
     f48:	93 fd       	sbrc	r25, 3
     f4a:	85 91       	lpm	r24, Z+
     f4c:	93 ff       	sbrs	r25, 3
     f4e:	81 91       	ld	r24, Z+
     f50:	6f 01       	movw	r12, r30
     f52:	81 11       	cpse	r24, r1
     f54:	c1 cf       	rjmp	.-126    	; 0xed8 <vfprintf+0x5c>
     f56:	98 2f       	mov	r25, r24
     f58:	9f 7d       	andi	r25, 0xDF	; 223
     f5a:	95 54       	subi	r25, 0x45	; 69
     f5c:	93 30       	cpi	r25, 0x03	; 3
     f5e:	28 f4       	brcc	.+10     	; 0xf6a <vfprintf+0xee>
     f60:	0c 5f       	subi	r16, 0xFC	; 252
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	ff e3       	ldi	r31, 0x3F	; 63
     f66:	f9 83       	std	Y+1, r31	; 0x01
     f68:	0d c0       	rjmp	.+26     	; 0xf84 <vfprintf+0x108>
     f6a:	83 36       	cpi	r24, 0x63	; 99
     f6c:	31 f0       	breq	.+12     	; 0xf7a <vfprintf+0xfe>
     f6e:	83 37       	cpi	r24, 0x73	; 115
     f70:	71 f0       	breq	.+28     	; 0xf8e <vfprintf+0x112>
     f72:	83 35       	cpi	r24, 0x53	; 83
     f74:	09 f0       	breq	.+2      	; 0xf78 <vfprintf+0xfc>
     f76:	5b c0       	rjmp	.+182    	; 0x102e <vfprintf+0x1b2>
     f78:	22 c0       	rjmp	.+68     	; 0xfbe <vfprintf+0x142>
     f7a:	f8 01       	movw	r30, r16
     f7c:	80 81       	ld	r24, Z
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	0e 5f       	subi	r16, 0xFE	; 254
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	44 24       	eor	r4, r4
     f86:	43 94       	inc	r4
     f88:	51 2c       	mov	r5, r1
     f8a:	54 01       	movw	r10, r8
     f8c:	15 c0       	rjmp	.+42     	; 0xfb8 <vfprintf+0x13c>
     f8e:	38 01       	movw	r6, r16
     f90:	f2 e0       	ldi	r31, 0x02	; 2
     f92:	6f 0e       	add	r6, r31
     f94:	71 1c       	adc	r7, r1
     f96:	f8 01       	movw	r30, r16
     f98:	a0 80       	ld	r10, Z
     f9a:	b1 80       	ldd	r11, Z+1	; 0x01
     f9c:	26 ff       	sbrs	r18, 6
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <vfprintf+0x12a>
     fa0:	65 2d       	mov	r22, r5
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <vfprintf+0x12e>
     fa6:	6f ef       	ldi	r22, 0xFF	; 255
     fa8:	7f ef       	ldi	r23, 0xFF	; 255
     faa:	c5 01       	movw	r24, r10
     fac:	2c 87       	std	Y+12, r18	; 0x0c
     fae:	0e 94 65 0a 	call	0x14ca	; 0x14ca <strnlen>
     fb2:	2c 01       	movw	r4, r24
     fb4:	83 01       	movw	r16, r6
     fb6:	2c 85       	ldd	r18, Y+12	; 0x0c
     fb8:	2f 77       	andi	r18, 0x7F	; 127
     fba:	22 2e       	mov	r2, r18
     fbc:	17 c0       	rjmp	.+46     	; 0xfec <vfprintf+0x170>
     fbe:	38 01       	movw	r6, r16
     fc0:	f2 e0       	ldi	r31, 0x02	; 2
     fc2:	6f 0e       	add	r6, r31
     fc4:	71 1c       	adc	r7, r1
     fc6:	f8 01       	movw	r30, r16
     fc8:	a0 80       	ld	r10, Z
     fca:	b1 80       	ldd	r11, Z+1	; 0x01
     fcc:	26 ff       	sbrs	r18, 6
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <vfprintf+0x15a>
     fd0:	65 2d       	mov	r22, r5
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <vfprintf+0x15e>
     fd6:	6f ef       	ldi	r22, 0xFF	; 255
     fd8:	7f ef       	ldi	r23, 0xFF	; 255
     fda:	c5 01       	movw	r24, r10
     fdc:	2c 87       	std	Y+12, r18	; 0x0c
     fde:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <strnlen_P>
     fe2:	2c 01       	movw	r4, r24
     fe4:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe6:	20 68       	ori	r18, 0x80	; 128
     fe8:	22 2e       	mov	r2, r18
     fea:	83 01       	movw	r16, r6
     fec:	23 fc       	sbrc	r2, 3
     fee:	1b c0       	rjmp	.+54     	; 0x1026 <vfprintf+0x1aa>
     ff0:	83 2d       	mov	r24, r3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	48 16       	cp	r4, r24
     ff6:	59 06       	cpc	r5, r25
     ff8:	b0 f4       	brcc	.+44     	; 0x1026 <vfprintf+0x1aa>
     ffa:	b7 01       	movw	r22, r14
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
    1004:	3a 94       	dec	r3
    1006:	f4 cf       	rjmp	.-24     	; 0xff0 <vfprintf+0x174>
    1008:	f5 01       	movw	r30, r10
    100a:	27 fc       	sbrc	r2, 7
    100c:	85 91       	lpm	r24, Z+
    100e:	27 fe       	sbrs	r2, 7
    1010:	81 91       	ld	r24, Z+
    1012:	5f 01       	movw	r10, r30
    1014:	b7 01       	movw	r22, r14
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
    101c:	31 10       	cpse	r3, r1
    101e:	3a 94       	dec	r3
    1020:	f1 e0       	ldi	r31, 0x01	; 1
    1022:	4f 1a       	sub	r4, r31
    1024:	51 08       	sbc	r5, r1
    1026:	41 14       	cp	r4, r1
    1028:	51 04       	cpc	r5, r1
    102a:	71 f7       	brne	.-36     	; 0x1008 <vfprintf+0x18c>
    102c:	e5 c0       	rjmp	.+458    	; 0x11f8 <vfprintf+0x37c>
    102e:	84 36       	cpi	r24, 0x64	; 100
    1030:	11 f0       	breq	.+4      	; 0x1036 <vfprintf+0x1ba>
    1032:	89 36       	cpi	r24, 0x69	; 105
    1034:	39 f5       	brne	.+78     	; 0x1084 <vfprintf+0x208>
    1036:	f8 01       	movw	r30, r16
    1038:	27 ff       	sbrs	r18, 7
    103a:	07 c0       	rjmp	.+14     	; 0x104a <vfprintf+0x1ce>
    103c:	60 81       	ld	r22, Z
    103e:	71 81       	ldd	r23, Z+1	; 0x01
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	0c 5f       	subi	r16, 0xFC	; 252
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	08 c0       	rjmp	.+16     	; 0x105a <vfprintf+0x1de>
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	88 27       	eor	r24, r24
    1050:	77 fd       	sbrc	r23, 7
    1052:	80 95       	com	r24
    1054:	98 2f       	mov	r25, r24
    1056:	0e 5f       	subi	r16, 0xFE	; 254
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
    105a:	2f 76       	andi	r18, 0x6F	; 111
    105c:	b2 2e       	mov	r11, r18
    105e:	97 ff       	sbrs	r25, 7
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <vfprintf+0x1f8>
    1062:	90 95       	com	r25
    1064:	80 95       	com	r24
    1066:	70 95       	com	r23
    1068:	61 95       	neg	r22
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	8f 4f       	sbci	r24, 0xFF	; 255
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	20 68       	ori	r18, 0x80	; 128
    1072:	b2 2e       	mov	r11, r18
    1074:	2a e0       	ldi	r18, 0x0A	; 10
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	a4 01       	movw	r20, r8
    107a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__ultoa_invert>
    107e:	a8 2e       	mov	r10, r24
    1080:	a8 18       	sub	r10, r8
    1082:	44 c0       	rjmp	.+136    	; 0x110c <vfprintf+0x290>
    1084:	85 37       	cpi	r24, 0x75	; 117
    1086:	29 f4       	brne	.+10     	; 0x1092 <vfprintf+0x216>
    1088:	2f 7e       	andi	r18, 0xEF	; 239
    108a:	b2 2e       	mov	r11, r18
    108c:	2a e0       	ldi	r18, 0x0A	; 10
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	25 c0       	rjmp	.+74     	; 0x10dc <vfprintf+0x260>
    1092:	f2 2f       	mov	r31, r18
    1094:	f9 7f       	andi	r31, 0xF9	; 249
    1096:	bf 2e       	mov	r11, r31
    1098:	8f 36       	cpi	r24, 0x6F	; 111
    109a:	c1 f0       	breq	.+48     	; 0x10cc <vfprintf+0x250>
    109c:	18 f4       	brcc	.+6      	; 0x10a4 <vfprintf+0x228>
    109e:	88 35       	cpi	r24, 0x58	; 88
    10a0:	79 f0       	breq	.+30     	; 0x10c0 <vfprintf+0x244>
    10a2:	b4 c0       	rjmp	.+360    	; 0x120c <vfprintf+0x390>
    10a4:	80 37       	cpi	r24, 0x70	; 112
    10a6:	19 f0       	breq	.+6      	; 0x10ae <vfprintf+0x232>
    10a8:	88 37       	cpi	r24, 0x78	; 120
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <vfprintf+0x238>
    10ac:	af c0       	rjmp	.+350    	; 0x120c <vfprintf+0x390>
    10ae:	2f 2f       	mov	r18, r31
    10b0:	20 61       	ori	r18, 0x10	; 16
    10b2:	b2 2e       	mov	r11, r18
    10b4:	b4 fe       	sbrs	r11, 4
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <vfprintf+0x256>
    10b8:	8b 2d       	mov	r24, r11
    10ba:	84 60       	ori	r24, 0x04	; 4
    10bc:	b8 2e       	mov	r11, r24
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <vfprintf+0x256>
    10c0:	24 ff       	sbrs	r18, 4
    10c2:	0a c0       	rjmp	.+20     	; 0x10d8 <vfprintf+0x25c>
    10c4:	9f 2f       	mov	r25, r31
    10c6:	96 60       	ori	r25, 0x06	; 6
    10c8:	b9 2e       	mov	r11, r25
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <vfprintf+0x25c>
    10cc:	28 e0       	ldi	r18, 0x08	; 8
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <vfprintf+0x260>
    10d2:	20 e1       	ldi	r18, 0x10	; 16
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0x260>
    10d8:	20 e1       	ldi	r18, 0x10	; 16
    10da:	32 e0       	ldi	r19, 0x02	; 2
    10dc:	f8 01       	movw	r30, r16
    10de:	b7 fe       	sbrs	r11, 7
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <vfprintf+0x274>
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	0c 5f       	subi	r16, 0xFC	; 252
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	06 c0       	rjmp	.+12     	; 0x10fc <vfprintf+0x280>
    10f0:	60 81       	ld	r22, Z
    10f2:	71 81       	ldd	r23, Z+1	; 0x01
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 5f       	subi	r16, 0xFE	; 254
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	a4 01       	movw	r20, r8
    10fe:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__ultoa_invert>
    1102:	a8 2e       	mov	r10, r24
    1104:	a8 18       	sub	r10, r8
    1106:	fb 2d       	mov	r31, r11
    1108:	ff 77       	andi	r31, 0x7F	; 127
    110a:	bf 2e       	mov	r11, r31
    110c:	b6 fe       	sbrs	r11, 6
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <vfprintf+0x2aa>
    1110:	2b 2d       	mov	r18, r11
    1112:	2e 7f       	andi	r18, 0xFE	; 254
    1114:	a5 14       	cp	r10, r5
    1116:	50 f4       	brcc	.+20     	; 0x112c <vfprintf+0x2b0>
    1118:	b4 fe       	sbrs	r11, 4
    111a:	0a c0       	rjmp	.+20     	; 0x1130 <vfprintf+0x2b4>
    111c:	b2 fc       	sbrc	r11, 2
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <vfprintf+0x2b4>
    1120:	2b 2d       	mov	r18, r11
    1122:	2e 7e       	andi	r18, 0xEE	; 238
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <vfprintf+0x2b4>
    1126:	7a 2c       	mov	r7, r10
    1128:	2b 2d       	mov	r18, r11
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <vfprintf+0x2b6>
    112c:	7a 2c       	mov	r7, r10
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <vfprintf+0x2b6>
    1130:	75 2c       	mov	r7, r5
    1132:	24 ff       	sbrs	r18, 4
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <vfprintf+0x2d4>
    1136:	fe 01       	movw	r30, r28
    1138:	ea 0d       	add	r30, r10
    113a:	f1 1d       	adc	r31, r1
    113c:	80 81       	ld	r24, Z
    113e:	80 33       	cpi	r24, 0x30	; 48
    1140:	11 f4       	brne	.+4      	; 0x1146 <vfprintf+0x2ca>
    1142:	29 7e       	andi	r18, 0xE9	; 233
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <vfprintf+0x2dc>
    1146:	22 ff       	sbrs	r18, 2
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <vfprintf+0x2da>
    114a:	73 94       	inc	r7
    114c:	73 94       	inc	r7
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <vfprintf+0x2dc>
    1150:	82 2f       	mov	r24, r18
    1152:	86 78       	andi	r24, 0x86	; 134
    1154:	09 f0       	breq	.+2      	; 0x1158 <vfprintf+0x2dc>
    1156:	73 94       	inc	r7
    1158:	23 fd       	sbrc	r18, 3
    115a:	13 c0       	rjmp	.+38     	; 0x1182 <vfprintf+0x306>
    115c:	20 ff       	sbrs	r18, 0
    115e:	06 c0       	rjmp	.+12     	; 0x116c <vfprintf+0x2f0>
    1160:	5a 2c       	mov	r5, r10
    1162:	73 14       	cp	r7, r3
    1164:	18 f4       	brcc	.+6      	; 0x116c <vfprintf+0x2f0>
    1166:	53 0c       	add	r5, r3
    1168:	57 18       	sub	r5, r7
    116a:	73 2c       	mov	r7, r3
    116c:	73 14       	cp	r7, r3
    116e:	68 f4       	brcc	.+26     	; 0x118a <vfprintf+0x30e>
    1170:	b7 01       	movw	r22, r14
    1172:	80 e2       	ldi	r24, 0x20	; 32
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	2c 87       	std	Y+12, r18	; 0x0c
    1178:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
    117c:	73 94       	inc	r7
    117e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1180:	f5 cf       	rjmp	.-22     	; 0x116c <vfprintf+0x2f0>
    1182:	73 14       	cp	r7, r3
    1184:	10 f4       	brcc	.+4      	; 0x118a <vfprintf+0x30e>
    1186:	37 18       	sub	r3, r7
    1188:	01 c0       	rjmp	.+2      	; 0x118c <vfprintf+0x310>
    118a:	31 2c       	mov	r3, r1
    118c:	24 ff       	sbrs	r18, 4
    118e:	12 c0       	rjmp	.+36     	; 0x11b4 <vfprintf+0x338>
    1190:	b7 01       	movw	r22, r14
    1192:	80 e3       	ldi	r24, 0x30	; 48
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	2c 87       	std	Y+12, r18	; 0x0c
    1198:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
    119c:	2c 85       	ldd	r18, Y+12	; 0x0c
    119e:	22 ff       	sbrs	r18, 2
    11a0:	17 c0       	rjmp	.+46     	; 0x11d0 <vfprintf+0x354>
    11a2:	21 ff       	sbrs	r18, 1
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <vfprintf+0x330>
    11a6:	88 e5       	ldi	r24, 0x58	; 88
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vfprintf+0x334>
    11ac:	88 e7       	ldi	r24, 0x78	; 120
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	b7 01       	movw	r22, r14
    11b2:	0c c0       	rjmp	.+24     	; 0x11cc <vfprintf+0x350>
    11b4:	82 2f       	mov	r24, r18
    11b6:	86 78       	andi	r24, 0x86	; 134
    11b8:	59 f0       	breq	.+22     	; 0x11d0 <vfprintf+0x354>
    11ba:	21 fd       	sbrc	r18, 1
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0x346>
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <vfprintf+0x348>
    11c2:	8b e2       	ldi	r24, 0x2B	; 43
    11c4:	27 fd       	sbrc	r18, 7
    11c6:	8d e2       	ldi	r24, 0x2D	; 45
    11c8:	b7 01       	movw	r22, r14
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
    11d0:	a5 14       	cp	r10, r5
    11d2:	38 f4       	brcc	.+14     	; 0x11e2 <vfprintf+0x366>
    11d4:	b7 01       	movw	r22, r14
    11d6:	80 e3       	ldi	r24, 0x30	; 48
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
    11de:	5a 94       	dec	r5
    11e0:	f7 cf       	rjmp	.-18     	; 0x11d0 <vfprintf+0x354>
    11e2:	aa 94       	dec	r10
    11e4:	f4 01       	movw	r30, r8
    11e6:	ea 0d       	add	r30, r10
    11e8:	f1 1d       	adc	r31, r1
    11ea:	80 81       	ld	r24, Z
    11ec:	b7 01       	movw	r22, r14
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
    11f4:	a1 10       	cpse	r10, r1
    11f6:	f5 cf       	rjmp	.-22     	; 0x11e2 <vfprintf+0x366>
    11f8:	33 20       	and	r3, r3
    11fa:	09 f4       	brne	.+2      	; 0x11fe <vfprintf+0x382>
    11fc:	51 ce       	rjmp	.-862    	; 0xea0 <vfprintf+0x24>
    11fe:	b7 01       	movw	r22, r14
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
    1208:	3a 94       	dec	r3
    120a:	f6 cf       	rjmp	.-20     	; 0x11f8 <vfprintf+0x37c>
    120c:	f7 01       	movw	r30, r14
    120e:	86 81       	ldd	r24, Z+6	; 0x06
    1210:	97 81       	ldd	r25, Z+7	; 0x07
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x39c>
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	2c 96       	adiw	r28, 0x0c	; 12
    121a:	e2 e1       	ldi	r30, 0x12	; 18
    121c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__epilogue_restores__>

00001220 <calloc>:
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	86 9f       	mul	r24, r22
    122a:	80 01       	movw	r16, r0
    122c:	87 9f       	mul	r24, r23
    122e:	10 0d       	add	r17, r0
    1230:	96 9f       	mul	r25, r22
    1232:	10 0d       	add	r17, r0
    1234:	11 24       	eor	r1, r1
    1236:	c8 01       	movw	r24, r16
    1238:	0e 94 2c 09 	call	0x1258	; 0x1258 <malloc>
    123c:	ec 01       	movw	r28, r24
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	29 f0       	breq	.+10     	; 0x124c <calloc+0x2c>
    1242:	a8 01       	movw	r20, r16
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <memset>
    124c:	ce 01       	movw	r24, r28
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <malloc>:
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	91 05       	cpc	r25, r1
    1260:	10 f4       	brcc	.+4      	; 0x1266 <malloc+0xe>
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	e0 91 70 02 	lds	r30, 0x0270
    126a:	f0 91 71 02 	lds	r31, 0x0271
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	a0 e0       	ldi	r26, 0x00	; 0
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	30 97       	sbiw	r30, 0x00	; 0
    1278:	39 f1       	breq	.+78     	; 0x12c8 <malloc+0x70>
    127a:	40 81       	ld	r20, Z
    127c:	51 81       	ldd	r21, Z+1	; 0x01
    127e:	48 17       	cp	r20, r24
    1280:	59 07       	cpc	r21, r25
    1282:	b8 f0       	brcs	.+46     	; 0x12b2 <malloc+0x5a>
    1284:	48 17       	cp	r20, r24
    1286:	59 07       	cpc	r21, r25
    1288:	71 f4       	brne	.+28     	; 0x12a6 <malloc+0x4e>
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	10 97       	sbiw	r26, 0x00	; 0
    1290:	29 f0       	breq	.+10     	; 0x129c <malloc+0x44>
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	9c 93       	st	X, r25
    1296:	8e 93       	st	-X, r24
    1298:	12 97       	sbiw	r26, 0x02	; 2
    129a:	2c c0       	rjmp	.+88     	; 0x12f4 <malloc+0x9c>
    129c:	90 93 71 02 	sts	0x0271, r25
    12a0:	80 93 70 02 	sts	0x0270, r24
    12a4:	27 c0       	rjmp	.+78     	; 0x12f4 <malloc+0x9c>
    12a6:	21 15       	cp	r18, r1
    12a8:	31 05       	cpc	r19, r1
    12aa:	31 f0       	breq	.+12     	; 0x12b8 <malloc+0x60>
    12ac:	42 17       	cp	r20, r18
    12ae:	53 07       	cpc	r21, r19
    12b0:	18 f0       	brcs	.+6      	; 0x12b8 <malloc+0x60>
    12b2:	a9 01       	movw	r20, r18
    12b4:	db 01       	movw	r26, r22
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <malloc+0x62>
    12b8:	ef 01       	movw	r28, r30
    12ba:	9a 01       	movw	r18, r20
    12bc:	bd 01       	movw	r22, r26
    12be:	df 01       	movw	r26, r30
    12c0:	02 80       	ldd	r0, Z+2	; 0x02
    12c2:	f3 81       	ldd	r31, Z+3	; 0x03
    12c4:	e0 2d       	mov	r30, r0
    12c6:	d7 cf       	rjmp	.-82     	; 0x1276 <malloc+0x1e>
    12c8:	21 15       	cp	r18, r1
    12ca:	31 05       	cpc	r19, r1
    12cc:	f9 f0       	breq	.+62     	; 0x130c <malloc+0xb4>
    12ce:	28 1b       	sub	r18, r24
    12d0:	39 0b       	sbc	r19, r25
    12d2:	24 30       	cpi	r18, 0x04	; 4
    12d4:	31 05       	cpc	r19, r1
    12d6:	80 f4       	brcc	.+32     	; 0x12f8 <malloc+0xa0>
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	9b 81       	ldd	r25, Y+3	; 0x03
    12dc:	61 15       	cp	r22, r1
    12de:	71 05       	cpc	r23, r1
    12e0:	21 f0       	breq	.+8      	; 0x12ea <malloc+0x92>
    12e2:	fb 01       	movw	r30, r22
    12e4:	93 83       	std	Z+3, r25	; 0x03
    12e6:	82 83       	std	Z+2, r24	; 0x02
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <malloc+0x9a>
    12ea:	90 93 71 02 	sts	0x0271, r25
    12ee:	80 93 70 02 	sts	0x0270, r24
    12f2:	fe 01       	movw	r30, r28
    12f4:	32 96       	adiw	r30, 0x02	; 2
    12f6:	44 c0       	rjmp	.+136    	; 0x1380 <malloc+0x128>
    12f8:	fe 01       	movw	r30, r28
    12fa:	e2 0f       	add	r30, r18
    12fc:	f3 1f       	adc	r31, r19
    12fe:	81 93       	st	Z+, r24
    1300:	91 93       	st	Z+, r25
    1302:	22 50       	subi	r18, 0x02	; 2
    1304:	31 09       	sbc	r19, r1
    1306:	39 83       	std	Y+1, r19	; 0x01
    1308:	28 83       	st	Y, r18
    130a:	3a c0       	rjmp	.+116    	; 0x1380 <malloc+0x128>
    130c:	20 91 6e 02 	lds	r18, 0x026E
    1310:	30 91 6f 02 	lds	r19, 0x026F
    1314:	23 2b       	or	r18, r19
    1316:	41 f4       	brne	.+16     	; 0x1328 <malloc+0xd0>
    1318:	20 91 06 01 	lds	r18, 0x0106
    131c:	30 91 07 01 	lds	r19, 0x0107
    1320:	30 93 6f 02 	sts	0x026F, r19
    1324:	20 93 6e 02 	sts	0x026E, r18
    1328:	20 91 04 01 	lds	r18, 0x0104
    132c:	30 91 05 01 	lds	r19, 0x0105
    1330:	21 15       	cp	r18, r1
    1332:	31 05       	cpc	r19, r1
    1334:	41 f4       	brne	.+16     	; 0x1346 <malloc+0xee>
    1336:	2d b7       	in	r18, 0x3d	; 61
    1338:	3e b7       	in	r19, 0x3e	; 62
    133a:	40 91 08 01 	lds	r20, 0x0108
    133e:	50 91 09 01 	lds	r21, 0x0109
    1342:	24 1b       	sub	r18, r20
    1344:	35 0b       	sbc	r19, r21
    1346:	e0 91 6e 02 	lds	r30, 0x026E
    134a:	f0 91 6f 02 	lds	r31, 0x026F
    134e:	e2 17       	cp	r30, r18
    1350:	f3 07       	cpc	r31, r19
    1352:	a0 f4       	brcc	.+40     	; 0x137c <malloc+0x124>
    1354:	2e 1b       	sub	r18, r30
    1356:	3f 0b       	sbc	r19, r31
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
    135c:	78 f0       	brcs	.+30     	; 0x137c <malloc+0x124>
    135e:	ac 01       	movw	r20, r24
    1360:	4e 5f       	subi	r20, 0xFE	; 254
    1362:	5f 4f       	sbci	r21, 0xFF	; 255
    1364:	24 17       	cp	r18, r20
    1366:	35 07       	cpc	r19, r21
    1368:	48 f0       	brcs	.+18     	; 0x137c <malloc+0x124>
    136a:	4e 0f       	add	r20, r30
    136c:	5f 1f       	adc	r21, r31
    136e:	50 93 6f 02 	sts	0x026F, r21
    1372:	40 93 6e 02 	sts	0x026E, r20
    1376:	81 93       	st	Z+, r24
    1378:	91 93       	st	Z+, r25
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <malloc+0x128>
    137c:	e0 e0       	ldi	r30, 0x00	; 0
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	cf 01       	movw	r24, r30
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <free>:
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	09 f4       	brne	.+2      	; 0x1392 <free+0xa>
    1390:	87 c0       	rjmp	.+270    	; 0x14a0 <free+0x118>
    1392:	fc 01       	movw	r30, r24
    1394:	32 97       	sbiw	r30, 0x02	; 2
    1396:	13 82       	std	Z+3, r1	; 0x03
    1398:	12 82       	std	Z+2, r1	; 0x02
    139a:	c0 91 70 02 	lds	r28, 0x0270
    139e:	d0 91 71 02 	lds	r29, 0x0271
    13a2:	20 97       	sbiw	r28, 0x00	; 0
    13a4:	81 f4       	brne	.+32     	; 0x13c6 <free+0x3e>
    13a6:	20 81       	ld	r18, Z
    13a8:	31 81       	ldd	r19, Z+1	; 0x01
    13aa:	28 0f       	add	r18, r24
    13ac:	39 1f       	adc	r19, r25
    13ae:	80 91 6e 02 	lds	r24, 0x026E
    13b2:	90 91 6f 02 	lds	r25, 0x026F
    13b6:	82 17       	cp	r24, r18
    13b8:	93 07       	cpc	r25, r19
    13ba:	79 f5       	brne	.+94     	; 0x141a <free+0x92>
    13bc:	f0 93 6f 02 	sts	0x026F, r31
    13c0:	e0 93 6e 02 	sts	0x026E, r30
    13c4:	6d c0       	rjmp	.+218    	; 0x14a0 <free+0x118>
    13c6:	de 01       	movw	r26, r28
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	ae 17       	cp	r26, r30
    13ce:	bf 07       	cpc	r27, r31
    13d0:	50 f4       	brcc	.+20     	; 0x13e6 <free+0x5e>
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	4d 91       	ld	r20, X+
    13d6:	5c 91       	ld	r21, X
    13d8:	13 97       	sbiw	r26, 0x03	; 3
    13da:	9d 01       	movw	r18, r26
    13dc:	41 15       	cp	r20, r1
    13de:	51 05       	cpc	r21, r1
    13e0:	09 f1       	breq	.+66     	; 0x1424 <free+0x9c>
    13e2:	da 01       	movw	r26, r20
    13e4:	f3 cf       	rjmp	.-26     	; 0x13cc <free+0x44>
    13e6:	b3 83       	std	Z+3, r27	; 0x03
    13e8:	a2 83       	std	Z+2, r26	; 0x02
    13ea:	40 81       	ld	r20, Z
    13ec:	51 81       	ldd	r21, Z+1	; 0x01
    13ee:	84 0f       	add	r24, r20
    13f0:	95 1f       	adc	r25, r21
    13f2:	8a 17       	cp	r24, r26
    13f4:	9b 07       	cpc	r25, r27
    13f6:	71 f4       	brne	.+28     	; 0x1414 <free+0x8c>
    13f8:	8d 91       	ld	r24, X+
    13fa:	9c 91       	ld	r25, X
    13fc:	11 97       	sbiw	r26, 0x01	; 1
    13fe:	84 0f       	add	r24, r20
    1400:	95 1f       	adc	r25, r21
    1402:	02 96       	adiw	r24, 0x02	; 2
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
    1408:	12 96       	adiw	r26, 0x02	; 2
    140a:	8d 91       	ld	r24, X+
    140c:	9c 91       	ld	r25, X
    140e:	13 97       	sbiw	r26, 0x03	; 3
    1410:	93 83       	std	Z+3, r25	; 0x03
    1412:	82 83       	std	Z+2, r24	; 0x02
    1414:	21 15       	cp	r18, r1
    1416:	31 05       	cpc	r19, r1
    1418:	29 f4       	brne	.+10     	; 0x1424 <free+0x9c>
    141a:	f0 93 71 02 	sts	0x0271, r31
    141e:	e0 93 70 02 	sts	0x0270, r30
    1422:	3e c0       	rjmp	.+124    	; 0x14a0 <free+0x118>
    1424:	d9 01       	movw	r26, r18
    1426:	13 96       	adiw	r26, 0x03	; 3
    1428:	fc 93       	st	X, r31
    142a:	ee 93       	st	-X, r30
    142c:	12 97       	sbiw	r26, 0x02	; 2
    142e:	4d 91       	ld	r20, X+
    1430:	5d 91       	ld	r21, X+
    1432:	a4 0f       	add	r26, r20
    1434:	b5 1f       	adc	r27, r21
    1436:	ea 17       	cp	r30, r26
    1438:	fb 07       	cpc	r31, r27
    143a:	79 f4       	brne	.+30     	; 0x145a <free+0xd2>
    143c:	80 81       	ld	r24, Z
    143e:	91 81       	ldd	r25, Z+1	; 0x01
    1440:	84 0f       	add	r24, r20
    1442:	95 1f       	adc	r25, r21
    1444:	02 96       	adiw	r24, 0x02	; 2
    1446:	d9 01       	movw	r26, r18
    1448:	11 96       	adiw	r26, 0x01	; 1
    144a:	9c 93       	st	X, r25
    144c:	8e 93       	st	-X, r24
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	13 96       	adiw	r26, 0x03	; 3
    1454:	9c 93       	st	X, r25
    1456:	8e 93       	st	-X, r24
    1458:	12 97       	sbiw	r26, 0x02	; 2
    145a:	e0 e0       	ldi	r30, 0x00	; 0
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	9b 81       	ldd	r25, Y+3	; 0x03
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	19 f0       	breq	.+6      	; 0x146c <free+0xe4>
    1466:	fe 01       	movw	r30, r28
    1468:	ec 01       	movw	r28, r24
    146a:	f9 cf       	rjmp	.-14     	; 0x145e <free+0xd6>
    146c:	ce 01       	movw	r24, r28
    146e:	02 96       	adiw	r24, 0x02	; 2
    1470:	28 81       	ld	r18, Y
    1472:	39 81       	ldd	r19, Y+1	; 0x01
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
    1478:	20 91 6e 02 	lds	r18, 0x026E
    147c:	30 91 6f 02 	lds	r19, 0x026F
    1480:	28 17       	cp	r18, r24
    1482:	39 07       	cpc	r19, r25
    1484:	69 f4       	brne	.+26     	; 0x14a0 <free+0x118>
    1486:	30 97       	sbiw	r30, 0x00	; 0
    1488:	29 f4       	brne	.+10     	; 0x1494 <free+0x10c>
    148a:	10 92 71 02 	sts	0x0271, r1
    148e:	10 92 70 02 	sts	0x0270, r1
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <free+0x110>
    1494:	13 82       	std	Z+3, r1	; 0x03
    1496:	12 82       	std	Z+2, r1	; 0x02
    1498:	d0 93 6f 02 	sts	0x026F, r29
    149c:	c0 93 6e 02 	sts	0x026E, r28
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <strnlen_P>:
    14a6:	fc 01       	movw	r30, r24
    14a8:	05 90       	lpm	r0, Z+
    14aa:	61 50       	subi	r22, 0x01	; 1
    14ac:	70 40       	sbci	r23, 0x00	; 0
    14ae:	01 10       	cpse	r0, r1
    14b0:	d8 f7       	brcc	.-10     	; 0x14a8 <strnlen_P+0x2>
    14b2:	80 95       	com	r24
    14b4:	90 95       	com	r25
    14b6:	8e 0f       	add	r24, r30
    14b8:	9f 1f       	adc	r25, r31
    14ba:	08 95       	ret

000014bc <memset>:
    14bc:	dc 01       	movw	r26, r24
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <memset+0x6>
    14c0:	6d 93       	st	X+, r22
    14c2:	41 50       	subi	r20, 0x01	; 1
    14c4:	50 40       	sbci	r21, 0x00	; 0
    14c6:	e0 f7       	brcc	.-8      	; 0x14c0 <memset+0x4>
    14c8:	08 95       	ret

000014ca <strnlen>:
    14ca:	fc 01       	movw	r30, r24
    14cc:	61 50       	subi	r22, 0x01	; 1
    14ce:	70 40       	sbci	r23, 0x00	; 0
    14d0:	01 90       	ld	r0, Z+
    14d2:	01 10       	cpse	r0, r1
    14d4:	d8 f7       	brcc	.-10     	; 0x14cc <strnlen+0x2>
    14d6:	80 95       	com	r24
    14d8:	90 95       	com	r25
    14da:	8e 0f       	add	r24, r30
    14dc:	9f 1f       	adc	r25, r31
    14de:	08 95       	ret

000014e0 <__ultoa_invert>:
    14e0:	fa 01       	movw	r30, r20
    14e2:	aa 27       	eor	r26, r26
    14e4:	28 30       	cpi	r18, 0x08	; 8
    14e6:	51 f1       	breq	.+84     	; 0x153c <__ultoa_invert+0x5c>
    14e8:	20 31       	cpi	r18, 0x10	; 16
    14ea:	81 f1       	breq	.+96     	; 0x154c <__ultoa_invert+0x6c>
    14ec:	e8 94       	clt
    14ee:	6f 93       	push	r22
    14f0:	6e 7f       	andi	r22, 0xFE	; 254
    14f2:	6e 5f       	subi	r22, 0xFE	; 254
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	8f 4f       	sbci	r24, 0xFF	; 255
    14f8:	9f 4f       	sbci	r25, 0xFF	; 255
    14fa:	af 4f       	sbci	r26, 0xFF	; 255
    14fc:	b1 e0       	ldi	r27, 0x01	; 1
    14fe:	3e d0       	rcall	.+124    	; 0x157c <__ultoa_invert+0x9c>
    1500:	b4 e0       	ldi	r27, 0x04	; 4
    1502:	3c d0       	rcall	.+120    	; 0x157c <__ultoa_invert+0x9c>
    1504:	67 0f       	add	r22, r23
    1506:	78 1f       	adc	r23, r24
    1508:	89 1f       	adc	r24, r25
    150a:	9a 1f       	adc	r25, r26
    150c:	a1 1d       	adc	r26, r1
    150e:	68 0f       	add	r22, r24
    1510:	79 1f       	adc	r23, r25
    1512:	8a 1f       	adc	r24, r26
    1514:	91 1d       	adc	r25, r1
    1516:	a1 1d       	adc	r26, r1
    1518:	6a 0f       	add	r22, r26
    151a:	71 1d       	adc	r23, r1
    151c:	81 1d       	adc	r24, r1
    151e:	91 1d       	adc	r25, r1
    1520:	a1 1d       	adc	r26, r1
    1522:	20 d0       	rcall	.+64     	; 0x1564 <__ultoa_invert+0x84>
    1524:	09 f4       	brne	.+2      	; 0x1528 <__ultoa_invert+0x48>
    1526:	68 94       	set
    1528:	3f 91       	pop	r19
    152a:	2a e0       	ldi	r18, 0x0A	; 10
    152c:	26 9f       	mul	r18, r22
    152e:	11 24       	eor	r1, r1
    1530:	30 19       	sub	r19, r0
    1532:	30 5d       	subi	r19, 0xD0	; 208
    1534:	31 93       	st	Z+, r19
    1536:	de f6       	brtc	.-74     	; 0x14ee <__ultoa_invert+0xe>
    1538:	cf 01       	movw	r24, r30
    153a:	08 95       	ret
    153c:	46 2f       	mov	r20, r22
    153e:	47 70       	andi	r20, 0x07	; 7
    1540:	40 5d       	subi	r20, 0xD0	; 208
    1542:	41 93       	st	Z+, r20
    1544:	b3 e0       	ldi	r27, 0x03	; 3
    1546:	0f d0       	rcall	.+30     	; 0x1566 <__ultoa_invert+0x86>
    1548:	c9 f7       	brne	.-14     	; 0x153c <__ultoa_invert+0x5c>
    154a:	f6 cf       	rjmp	.-20     	; 0x1538 <__ultoa_invert+0x58>
    154c:	46 2f       	mov	r20, r22
    154e:	4f 70       	andi	r20, 0x0F	; 15
    1550:	40 5d       	subi	r20, 0xD0	; 208
    1552:	4a 33       	cpi	r20, 0x3A	; 58
    1554:	18 f0       	brcs	.+6      	; 0x155c <__ultoa_invert+0x7c>
    1556:	49 5d       	subi	r20, 0xD9	; 217
    1558:	31 fd       	sbrc	r19, 1
    155a:	40 52       	subi	r20, 0x20	; 32
    155c:	41 93       	st	Z+, r20
    155e:	02 d0       	rcall	.+4      	; 0x1564 <__ultoa_invert+0x84>
    1560:	a9 f7       	brne	.-22     	; 0x154c <__ultoa_invert+0x6c>
    1562:	ea cf       	rjmp	.-44     	; 0x1538 <__ultoa_invert+0x58>
    1564:	b4 e0       	ldi	r27, 0x04	; 4
    1566:	a6 95       	lsr	r26
    1568:	97 95       	ror	r25
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	ba 95       	dec	r27
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__ultoa_invert+0x86>
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	61 05       	cpc	r22, r1
    1578:	71 05       	cpc	r23, r1
    157a:	08 95       	ret
    157c:	9b 01       	movw	r18, r22
    157e:	ac 01       	movw	r20, r24
    1580:	0a 2e       	mov	r0, r26
    1582:	06 94       	lsr	r0
    1584:	57 95       	ror	r21
    1586:	47 95       	ror	r20
    1588:	37 95       	ror	r19
    158a:	27 95       	ror	r18
    158c:	ba 95       	dec	r27
    158e:	c9 f7       	brne	.-14     	; 0x1582 <__ultoa_invert+0xa2>
    1590:	62 0f       	add	r22, r18
    1592:	73 1f       	adc	r23, r19
    1594:	84 1f       	adc	r24, r20
    1596:	95 1f       	adc	r25, r21
    1598:	a0 1d       	adc	r26, r0
    159a:	08 95       	ret

0000159c <__divmodsi4>:
    159c:	05 2e       	mov	r0, r21
    159e:	97 fb       	bst	r25, 7
    15a0:	1e f4       	brtc	.+6      	; 0x15a8 <__divmodsi4+0xc>
    15a2:	00 94       	com	r0
    15a4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__negsi2>
    15a8:	57 fd       	sbrc	r21, 7
    15aa:	07 d0       	rcall	.+14     	; 0x15ba <__divmodsi4_neg2>
    15ac:	0e 94 37 0b 	call	0x166e	; 0x166e <__udivmodsi4>
    15b0:	07 fc       	sbrc	r0, 7
    15b2:	03 d0       	rcall	.+6      	; 0x15ba <__divmodsi4_neg2>
    15b4:	4e f4       	brtc	.+18     	; 0x15c8 <__divmodsi4_exit>
    15b6:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__negsi2>

000015ba <__divmodsi4_neg2>:
    15ba:	50 95       	com	r21
    15bc:	40 95       	com	r20
    15be:	30 95       	com	r19
    15c0:	21 95       	neg	r18
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	4f 4f       	sbci	r20, 0xFF	; 255
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255

000015c8 <__divmodsi4_exit>:
    15c8:	08 95       	ret

000015ca <__negsi2>:
    15ca:	90 95       	com	r25
    15cc:	80 95       	com	r24
    15ce:	70 95       	com	r23
    15d0:	61 95       	neg	r22
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	08 95       	ret

000015da <__muluhisi3>:
    15da:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__umulhisi3>
    15de:	a5 9f       	mul	r26, r21
    15e0:	90 0d       	add	r25, r0
    15e2:	b4 9f       	mul	r27, r20
    15e4:	90 0d       	add	r25, r0
    15e6:	a4 9f       	mul	r26, r20
    15e8:	80 0d       	add	r24, r0
    15ea:	91 1d       	adc	r25, r1
    15ec:	11 24       	eor	r1, r1
    15ee:	08 95       	ret

000015f0 <__mulshisi3>:
    15f0:	b7 ff       	sbrs	r27, 7
    15f2:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__muluhisi3>

000015f6 <__mulohisi3>:
    15f6:	0e 94 ed 0a 	call	0x15da	; 0x15da <__muluhisi3>
    15fa:	82 1b       	sub	r24, r18
    15fc:	93 0b       	sbc	r25, r19
    15fe:	08 95       	ret

00001600 <__prologue_saves__>:
    1600:	2f 92       	push	r2
    1602:	3f 92       	push	r3
    1604:	4f 92       	push	r4
    1606:	5f 92       	push	r5
    1608:	6f 92       	push	r6
    160a:	7f 92       	push	r7
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	ca 1b       	sub	r28, r26
    162a:	db 0b       	sbc	r29, r27
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	09 94       	ijmp

00001638 <__epilogue_restores__>:
    1638:	2a 88       	ldd	r2, Y+18	; 0x12
    163a:	39 88       	ldd	r3, Y+17	; 0x11
    163c:	48 88       	ldd	r4, Y+16	; 0x10
    163e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1640:	6e 84       	ldd	r6, Y+14	; 0x0e
    1642:	7d 84       	ldd	r7, Y+13	; 0x0d
    1644:	8c 84       	ldd	r8, Y+12	; 0x0c
    1646:	9b 84       	ldd	r9, Y+11	; 0x0b
    1648:	aa 84       	ldd	r10, Y+10	; 0x0a
    164a:	b9 84       	ldd	r11, Y+9	; 0x09
    164c:	c8 84       	ldd	r12, Y+8	; 0x08
    164e:	df 80       	ldd	r13, Y+7	; 0x07
    1650:	ee 80       	ldd	r14, Y+6	; 0x06
    1652:	fd 80       	ldd	r15, Y+5	; 0x05
    1654:	0c 81       	ldd	r16, Y+4	; 0x04
    1656:	1b 81       	ldd	r17, Y+3	; 0x03
    1658:	aa 81       	ldd	r26, Y+2	; 0x02
    165a:	b9 81       	ldd	r27, Y+1	; 0x01
    165c:	ce 0f       	add	r28, r30
    165e:	d1 1d       	adc	r29, r1
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	ed 01       	movw	r28, r26
    166c:	08 95       	ret

0000166e <__udivmodsi4>:
    166e:	a1 e2       	ldi	r26, 0x21	; 33
    1670:	1a 2e       	mov	r1, r26
    1672:	aa 1b       	sub	r26, r26
    1674:	bb 1b       	sub	r27, r27
    1676:	fd 01       	movw	r30, r26
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <__udivmodsi4_ep>

0000167a <__udivmodsi4_loop>:
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	ee 1f       	adc	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	a2 17       	cp	r26, r18
    1684:	b3 07       	cpc	r27, r19
    1686:	e4 07       	cpc	r30, r20
    1688:	f5 07       	cpc	r31, r21
    168a:	20 f0       	brcs	.+8      	; 0x1694 <__udivmodsi4_ep>
    168c:	a2 1b       	sub	r26, r18
    168e:	b3 0b       	sbc	r27, r19
    1690:	e4 0b       	sbc	r30, r20
    1692:	f5 0b       	sbc	r31, r21

00001694 <__udivmodsi4_ep>:
    1694:	66 1f       	adc	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	88 1f       	adc	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	1a 94       	dec	r1
    169e:	69 f7       	brne	.-38     	; 0x167a <__udivmodsi4_loop>
    16a0:	60 95       	com	r22
    16a2:	70 95       	com	r23
    16a4:	80 95       	com	r24
    16a6:	90 95       	com	r25
    16a8:	9b 01       	movw	r18, r22
    16aa:	ac 01       	movw	r20, r24
    16ac:	bd 01       	movw	r22, r26
    16ae:	cf 01       	movw	r24, r30
    16b0:	08 95       	ret

000016b2 <__umulhisi3>:
    16b2:	a2 9f       	mul	r26, r18
    16b4:	b0 01       	movw	r22, r0
    16b6:	b3 9f       	mul	r27, r19
    16b8:	c0 01       	movw	r24, r0
    16ba:	a3 9f       	mul	r26, r19
    16bc:	70 0d       	add	r23, r0
    16be:	81 1d       	adc	r24, r1
    16c0:	11 24       	eor	r1, r1
    16c2:	91 1d       	adc	r25, r1
    16c4:	b2 9f       	mul	r27, r18
    16c6:	70 0d       	add	r23, r0
    16c8:	81 1d       	adc	r24, r1
    16ca:	11 24       	eor	r1, r1
    16cc:	91 1d       	adc	r25, r1
    16ce:	08 95       	ret

000016d0 <_exit>:
    16d0:	f8 94       	cli

000016d2 <__stop_program>:
    16d2:	ff cf       	rjmp	.-2      	; 0x16d2 <__stop_program>
