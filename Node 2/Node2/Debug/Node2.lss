
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00002fb4  00003048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080020c  0080020c  00003054  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000159a  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a33  00000000  00000000  0000489a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001798  00000000  00000000  000052cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000778  00000000  00000000  00006a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006cc  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e6c  00000000  00000000  000078ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00008718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c2       	rjmp	.+1338   	; 0x548 <__vector_3>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9b c2       	rjmp	.+1334   	; 0x5b8 <__vector_32>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__vector_39>
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 0f       	add	r27, r31
      e6:	2d 10       	cpse	r2, r13
      e8:	2d 10       	cpse	r2, r13
      ea:	2d 10       	cpse	r2, r13
      ec:	2d 10       	cpse	r2, r13
      ee:	2d 10       	cpse	r2, r13
      f0:	2d 10       	cpse	r2, r13
      f2:	2d 10       	cpse	r2, r13
      f4:	bf 0f       	add	r27, r31
      f6:	2d 10       	cpse	r2, r13
      f8:	2d 10       	cpse	r2, r13
      fa:	2d 10       	cpse	r2, r13
      fc:	2d 10       	cpse	r2, r13
      fe:	2d 10       	cpse	r2, r13
     100:	2d 10       	cpse	r2, r13
     102:	2d 10       	cpse	r2, r13
     104:	c1 0f       	add	r28, r17
     106:	2d 10       	cpse	r2, r13
     108:	2d 10       	cpse	r2, r13
     10a:	2d 10       	cpse	r2, r13
     10c:	2d 10       	cpse	r2, r13
     10e:	2d 10       	cpse	r2, r13
     110:	2d 10       	cpse	r2, r13
     112:	2d 10       	cpse	r2, r13
     114:	2d 10       	cpse	r2, r13
     116:	2d 10       	cpse	r2, r13
     118:	2d 10       	cpse	r2, r13
     11a:	2d 10       	cpse	r2, r13
     11c:	2d 10       	cpse	r2, r13
     11e:	2d 10       	cpse	r2, r13
     120:	2d 10       	cpse	r2, r13
     122:	2d 10       	cpse	r2, r13
     124:	c1 0f       	add	r28, r17
     126:	2d 10       	cpse	r2, r13
     128:	2d 10       	cpse	r2, r13
     12a:	2d 10       	cpse	r2, r13
     12c:	2d 10       	cpse	r2, r13
     12e:	2d 10       	cpse	r2, r13
     130:	2d 10       	cpse	r2, r13
     132:	2d 10       	cpse	r2, r13
     134:	2d 10       	cpse	r2, r13
     136:	2d 10       	cpse	r2, r13
     138:	2d 10       	cpse	r2, r13
     13a:	2d 10       	cpse	r2, r13
     13c:	2d 10       	cpse	r2, r13
     13e:	2d 10       	cpse	r2, r13
     140:	2d 10       	cpse	r2, r13
     142:	2d 10       	cpse	r2, r13
     144:	27 10       	cpse	r2, r7
     146:	2d 10       	cpse	r2, r13
     148:	2d 10       	cpse	r2, r13
     14a:	2d 10       	cpse	r2, r13
     14c:	2d 10       	cpse	r2, r13
     14e:	2d 10       	cpse	r2, r13
     150:	2d 10       	cpse	r2, r13
     152:	2d 10       	cpse	r2, r13
     154:	f8 0f       	add	r31, r24
     156:	2d 10       	cpse	r2, r13
     158:	2d 10       	cpse	r2, r13
     15a:	2d 10       	cpse	r2, r13
     15c:	2d 10       	cpse	r2, r13
     15e:	2d 10       	cpse	r2, r13
     160:	2d 10       	cpse	r2, r13
     162:	2d 10       	cpse	r2, r13
     164:	2d 10       	cpse	r2, r13
     166:	2d 10       	cpse	r2, r13
     168:	2d 10       	cpse	r2, r13
     16a:	2d 10       	cpse	r2, r13
     16c:	2d 10       	cpse	r2, r13
     16e:	2d 10       	cpse	r2, r13
     170:	2d 10       	cpse	r2, r13
     172:	2d 10       	cpse	r2, r13
     174:	e8 0f       	add	r30, r24
     176:	2d 10       	cpse	r2, r13
     178:	2d 10       	cpse	r2, r13
     17a:	2d 10       	cpse	r2, r13
     17c:	2d 10       	cpse	r2, r13
     17e:	2d 10       	cpse	r2, r13
     180:	2d 10       	cpse	r2, r13
     182:	2d 10       	cpse	r2, r13
     184:	10 10       	cpse	r1, r0

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e4 eb       	ldi	r30, 0xB4	; 180
     19e:	ff e2       	ldi	r31, 0x2F	; 47
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ac 30       	cpi	r26, 0x0C	; 12
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	ac e0       	ldi	r26, 0x0C	; 12
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ac 32       	cpi	r26, 0x2C	; 44
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	20 d1       	rcall	.+576    	; 0x402 <main>
     1c2:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>


void adc_init(){
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
	set_bit(ADCSRA, ADEN);		//ADC enable
     1d0:	8a e7       	ldi	r24, 0x7A	; 122
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	2a e7       	ldi	r18, 0x7A	; 122
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	f9 01       	movw	r30, r18
     1da:	20 81       	ld	r18, Z
     1dc:	20 68       	ori	r18, 0x80	; 128
     1de:	fc 01       	movw	r30, r24
     1e0:	20 83       	st	Z, r18
	clear_bit(DDRF, DDF0);		//set PF0 as input
     1e2:	80 e3       	ldi	r24, 0x30	; 48
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	20 e3       	ldi	r18, 0x30	; 48
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	f9 01       	movw	r30, r18
     1ec:	20 81       	ld	r18, Z
     1ee:	2e 7f       	andi	r18, 0xFE	; 254
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
	set_bit(ADMUX, REFS0);	
     1f4:	8c e7       	ldi	r24, 0x7C	; 124
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	2c e7       	ldi	r18, 0x7C	; 124
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	20 81       	ld	r18, Z
     200:	20 64       	ori	r18, 0x40	; 64
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
	clear_bit(ADMUX, REFS1);		//set reference voltage  = 1.1 V
     206:	8c e7       	ldi	r24, 0x7C	; 124
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	2c e7       	ldi	r18, 0x7C	; 124
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	f9 01       	movw	r30, r18
     210:	20 81       	ld	r18, Z
     212:	2f 77       	andi	r18, 0x7F	; 127
     214:	fc 01       	movw	r30, r24
     216:	20 83       	st	Z, r18
	clear_bit(ADMUX, MUX0);
     218:	8c e7       	ldi	r24, 0x7C	; 124
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	2c e7       	ldi	r18, 0x7C	; 124
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	f9 01       	movw	r30, r18
     222:	20 81       	ld	r18, Z
     224:	2e 7f       	andi	r18, 0xFE	; 254
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
	clear_bit(ADMUX, MUX1);
     22a:	8c e7       	ldi	r24, 0x7C	; 124
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	2c e7       	ldi	r18, 0x7C	; 124
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	f9 01       	movw	r30, r18
     234:	20 81       	ld	r18, Z
     236:	2d 7f       	andi	r18, 0xFD	; 253
     238:	fc 01       	movw	r30, r24
     23a:	20 83       	st	Z, r18
	clear_bit(ADMUX, MUX2);
     23c:	8c e7       	ldi	r24, 0x7C	; 124
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	2c e7       	ldi	r18, 0x7C	; 124
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	f9 01       	movw	r30, r18
     246:	20 81       	ld	r18, Z
     248:	2b 7f       	andi	r18, 0xFB	; 251
     24a:	fc 01       	movw	r30, r24
     24c:	20 83       	st	Z, r18
	clear_bit(ADMUX, MUX3);
     24e:	8c e7       	ldi	r24, 0x7C	; 124
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	2c e7       	ldi	r18, 0x7C	; 124
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	f9 01       	movw	r30, r18
     258:	20 81       	ld	r18, Z
     25a:	27 7f       	andi	r18, 0xF7	; 247
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
	clear_bit(ADMUX, MUX4);
     260:	8c e7       	ldi	r24, 0x7C	; 124
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	2c e7       	ldi	r18, 0x7C	; 124
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	f9 01       	movw	r30, r18
     26a:	20 81       	ld	r18, Z
     26c:	2f 7e       	andi	r18, 0xEF	; 239
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
	clear_bit(ADCSRB, MUX5);	//set ADC0 as input ADC pin
     272:	8b e7       	ldi	r24, 0x7B	; 123
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	2b e7       	ldi	r18, 0x7B	; 123
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	20 81       	ld	r18, Z
     27e:	27 7f       	andi	r18, 0xF7	; 247
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	set_bit(ADCSRA, ADPS0);
     284:	8a e7       	ldi	r24, 0x7A	; 122
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	2a e7       	ldi	r18, 0x7A	; 122
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	f9 01       	movw	r30, r18
     28e:	20 81       	ld	r18, Z
     290:	21 60       	ori	r18, 0x01	; 1
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
	set_bit(ADCSRA, ADPS1);
     296:	8a e7       	ldi	r24, 0x7A	; 122
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	2a e7       	ldi	r18, 0x7A	; 122
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	f9 01       	movw	r30, r18
     2a0:	20 81       	ld	r18, Z
     2a2:	22 60       	ori	r18, 0x02	; 2
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
	set_bit(ADCSRA, ADPS2);		//set prescaler
     2a8:	8a e7       	ldi	r24, 0x7A	; 122
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	2a e7       	ldi	r18, 0x7A	; 122
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	f9 01       	movw	r30, r18
     2b2:	20 81       	ld	r18, Z
     2b4:	24 60       	ori	r18, 0x04	; 4
     2b6:	fc 01       	movw	r30, r24
     2b8:	20 83       	st	Z, r18
	clear_bit(ADMUX, ADLAR);	//right shifted results
     2ba:	8c e7       	ldi	r24, 0x7C	; 124
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	2c e7       	ldi	r18, 0x7C	; 124
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	f9 01       	movw	r30, r18
     2c4:	20 81       	ld	r18, Z
     2c6:	2f 7d       	andi	r18, 0xDF	; 223
     2c8:	fc 01       	movw	r30, r24
     2ca:	20 83       	st	Z, r18
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <CAN_init>:
	mcp2515_write(MCP_TXB0DLC, message.length);					//writes length to DLC register
	mcp2515_write(MCP_TXB0SIDH, message.ID >> 3);				//shifts ID 3 to right and writes to IDhigh
	mcp2515_write(MCP_TXB0SIDL, message.ID << 5);				// shifts ID 5 to left and writes to IDlow

	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001000, 0b00001000);	//request sending
}
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	f8 94       	cli
     2dc:	b9 d1       	rcall	.+882    	; 0x650 <mcp2515_reset>
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	60 ef       	ldi	r22, 0xF0	; 240
     2e2:	8f e0       	ldi	r24, 0x0F	; 15
     2e4:	41 d2       	rcall	.+1154   	; 0x768 <mcp2515_bit_modify>
     2e6:	4f e9       	ldi	r20, 0x9F	; 159
     2e8:	6f e9       	ldi	r22, 0x9F	; 159
     2ea:	8b e2       	ldi	r24, 0x2B	; 43
     2ec:	3d d2       	rcall	.+1146   	; 0x768 <mcp2515_bit_modify>
     2ee:	8d e3       	ldi	r24, 0x3D	; 61
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	2d e3       	ldi	r18, 0x3D	; 61
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	2b 7f       	andi	r18, 0xFB	; 251
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
     300:	89 e6       	ldi	r24, 0x69	; 105
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	29 e6       	ldi	r18, 0x69	; 105
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7d       	andi	r18, 0xDF	; 223
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
     312:	89 e6       	ldi	r24, 0x69	; 105
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	29 e6       	ldi	r18, 0x69	; 105
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	20 81       	ld	r18, Z
     31e:	2f 7e       	andi	r18, 0xEF	; 239
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
     324:	8d e3       	ldi	r24, 0x3D	; 61
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	2d e3       	ldi	r18, 0x3D	; 61
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	20 81       	ld	r18, Z
     330:	24 60       	ori	r18, 0x04	; 4
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
     336:	78 94       	sei
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <CAN_receive>:

void CAN_receive(uint8_t adr, CAN_message* received){
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	28 97       	sbiw	r28, 0x08	; 8
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	8e 83       	std	Y+6, r24	; 0x06
     358:	78 87       	std	Y+8, r23	; 0x08
     35a:	6f 83       	std	Y+7, r22	; 0x07
	received->length = 0b00001111 & mcp2515_read(adr-1);		//reads length from adr-1 and bitwise AND with value to mask out insignificant bits
     35c:	8e 81       	ldd	r24, Y+6	; 0x06
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	5c d1       	rcall	.+696    	; 0x61a <mcp2515_read>
     362:	28 2f       	mov	r18, r24
     364:	2f 70       	andi	r18, 0x0F	; 15
     366:	8f 81       	ldd	r24, Y+7	; 0x07
     368:	98 85       	ldd	r25, Y+8	; 0x08
     36a:	fc 01       	movw	r30, r24
     36c:	22 83       	std	Z+2, r18	; 0x02
	for (uint8_t i = 0; i<received->length; i++){
     36e:	19 82       	std	Y+1, r1	; 0x01
     370:	12 c0       	rjmp	.+36     	; 0x396 <CAN_receive+0x58>
		received->data[i] = mcp2515_read(adr+i);				//reads data from dataregisters
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	08 2f       	mov	r16, r24
     376:	10 e0       	ldi	r17, 0x00	; 0
     378:	9e 81       	ldd	r25, Y+6	; 0x06
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	89 0f       	add	r24, r25
     37e:	4d d1       	rcall	.+666    	; 0x61a <mcp2515_read>
     380:	28 2f       	mov	r18, r24
     382:	8f 81       	ldd	r24, Y+7	; 0x07
     384:	98 85       	ldd	r25, Y+8	; 0x08
     386:	80 0f       	add	r24, r16
     388:	91 1f       	adc	r25, r17
     38a:	03 96       	adiw	r24, 0x03	; 3
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001000, 0b00001000);	//request sending
}

void CAN_receive(uint8_t adr, CAN_message* received){
	received->length = 0b00001111 & mcp2515_read(adr-1);		//reads length from adr-1 and bitwise AND with value to mask out insignificant bits
	for (uint8_t i = 0; i<received->length; i++){
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	8f 5f       	subi	r24, 0xFF	; 255
     394:	89 83       	std	Y+1, r24	; 0x01
     396:	8f 81       	ldd	r24, Y+7	; 0x07
     398:	98 85       	ldd	r25, Y+8	; 0x08
     39a:	fc 01       	movw	r30, r24
     39c:	92 81       	ldd	r25, Z+2	; 0x02
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	89 17       	cp	r24, r25
     3a2:	38 f3       	brcs	.-50     	; 0x372 <CAN_receive+0x34>
		received->data[i] = mcp2515_read(adr+i);				//reads data from dataregisters
	}
	uint16_t ID_low = ((mcp2515_read(adr-4)>>5) & 0b00000111);	//finds low bits by right-shifting register 5 places and bitwise AND to mask out insignificant bits
     3a4:	8e 81       	ldd	r24, Y+6	; 0x06
     3a6:	84 50       	subi	r24, 0x04	; 4
     3a8:	38 d1       	rcall	.+624    	; 0x61a <mcp2515_read>
     3aa:	82 95       	swap	r24
     3ac:	86 95       	lsr	r24
     3ae:	87 70       	andi	r24, 0x07	; 7
     3b0:	88 2f       	mov	r24, r24
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	87 70       	andi	r24, 0x07	; 7
     3b6:	99 27       	eor	r25, r25
     3b8:	9b 83       	std	Y+3, r25	; 0x03
     3ba:	8a 83       	std	Y+2, r24	; 0x02
	uint16_t ID_high = mcp2515_read(adr-5)*8;					//reads high ID bits and left-shifts 3 places
     3bc:	8e 81       	ldd	r24, Y+6	; 0x06
     3be:	85 50       	subi	r24, 0x05	; 5
     3c0:	2c d1       	rcall	.+600    	; 0x61a <mcp2515_read>
     3c2:	88 2f       	mov	r24, r24
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	9d 83       	std	Y+5, r25	; 0x05
     3d4:	8c 83       	std	Y+4, r24	; 0x04
	received->ID = ID_low+ID_high; 
     3d6:	2a 81       	ldd	r18, Y+2	; 0x02
     3d8:	3b 81       	ldd	r19, Y+3	; 0x03
     3da:	8c 81       	ldd	r24, Y+4	; 0x04
     3dc:	9d 81       	ldd	r25, Y+5	; 0x05
     3de:	28 0f       	add	r18, r24
     3e0:	39 1f       	adc	r19, r25
     3e2:	8f 81       	ldd	r24, Y+7	; 0x07
     3e4:	98 85       	ldd	r25, Y+8	; 0x08
     3e6:	fc 01       	movw	r30, r24
     3e8:	31 83       	std	Z+1, r19	; 0x01
     3ea:	20 83       	st	Z, r18
	
}
     3ec:	28 96       	adiw	r28, 0x08	; 8
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <main>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1
uint8_t mcp_intr = 0;
int16_t speed = 0;

int main(void){
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	2e 97       	sbiw	r28, 0x0e	; 14
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
	uint8_t IR = 0;
     416:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t punching = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	89 83       	std	Y+1, r24	; 0x01
	State state = NOGAME;
     41c:	1a 82       	std	Y+2, r1	; 0x02
	uart_init(MYUBRR);
     41e:	87 e6       	ldi	r24, 0x67	; 103
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 77 10 	call	0x20ee	; 0x20ee <uart_init>
	spi_init();
     426:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <spi_init>
	CAN_init();
     42a:	53 df       	rcall	.-346    	; 0x2d2 <CAN_init>
	timer_pwm_init();
     42c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <timer_pwm_init>
	adc_init();
     430:	cb de       	rcall	.-618    	; 0x1c8 <adc_init>
	TWI_Master_Initialise();
     432:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <TWI_Master_Initialise>
	motor_init();
     436:	b6 d1       	rcall	.+876    	; 0x7a4 <motor_init>
	solenoid_init();
     438:	0e 94 a0 0c 	call	0x1940	; 0x1940 <solenoid_init>
	CAN_message recieved;
	while(1){
		switch (state){
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	91 05       	cpc	r25, r1
     446:	81 f1       	breq	.+96     	; 0x4a8 <main+0xa6>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	91 05       	cpc	r25, r1
     44c:	1c f4       	brge	.+6      	; 0x454 <main+0x52>
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	51 f0       	breq	.+20     	; 0x466 <main+0x64>
			case LOST:
				//CAN_lost();
				//state = GAME2;
				break;
			default:
				break;
     452:	79 c0       	rjmp	.+242    	; 0x546 <main+0x144>
	TWI_Master_Initialise();
	motor_init();
	solenoid_init();
	CAN_message recieved;
	while(1){
		switch (state){
     454:	82 30       	cpi	r24, 0x02	; 2
     456:	91 05       	cpc	r25, r1
     458:	09 f4       	brne	.+2      	; 0x45c <main+0x5a>
     45a:	53 c0       	rjmp	.+166    	; 0x502 <main+0x100>
     45c:	83 30       	cpi	r24, 0x03	; 3
     45e:	91 05       	cpc	r25, r1
     460:	09 f4       	brne	.+2      	; 0x464 <main+0x62>
     462:	70 c0       	rjmp	.+224    	; 0x544 <main+0x142>
			case LOST:
				//CAN_lost();
				//state = GAME2;
				break;
			default:
				break;
     464:	70 c0       	rjmp	.+224    	; 0x546 <main+0x144>
	solenoid_init();
	CAN_message recieved;
	while(1){
		switch (state){
			case NOGAME:
				if(mcp_intr){
     466:	80 91 0c 02 	lds	r24, 0x020C
     46a:	88 23       	and	r24, r24
     46c:	e1 f0       	breq	.+56     	; 0x4a6 <main+0xa4>
					CAN_receive(MCP_RXB0D0, &recieved);
     46e:	ce 01       	movw	r24, r28
     470:	04 96       	adiw	r24, 0x04	; 4
     472:	bc 01       	movw	r22, r24
     474:	86 e6       	ldi	r24, 0x66	; 102
     476:	63 df       	rcall	.-314    	; 0x33e <CAN_receive>
					if(recieved.data[3]){
     478:	8a 85       	ldd	r24, Y+10	; 0x0a
     47a:	88 23       	and	r24, r24
     47c:	19 f0       	breq	.+6      	; 0x484 <main+0x82>
						state = GAME2;
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	8a 83       	std	Y+2, r24	; 0x02
     482:	0e c0       	rjmp	.+28     	; 0x4a0 <main+0x9e>
					}
					else if(recieved.data[3] == 0){
     484:	8a 85       	ldd	r24, Y+10	; 0x0a
     486:	88 23       	and	r24, r24
     488:	59 f4       	brne	.+22     	; 0x4a0 <main+0x9e>
						state = GAME1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	8a 83       	std	Y+2, r24	; 0x02
						motor_encoder_reset();
     48e:	17 d7       	rcall	.+3630   	; 0x12be <motor_encoder_reset>
						motor_encoder_calib();
     490:	07 d4       	rcall	.+2062   	; 0xca0 <motor_encoder_calib>
						motor_set_reference(50);
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	88 e4       	ldi	r24, 0x48	; 72
     498:	92 e4       	ldi	r25, 0x42	; 66
     49a:	96 d3       	rcall	.+1836   	; 0xbc8 <motor_set_reference>
						timer_PID_init();
     49c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <timer_PID_init>
					}
					mcp_intr = 0;
     4a0:	10 92 0c 02 	sts	0x020C, r1
				}
				break;
     4a4:	50 c0       	rjmp	.+160    	; 0x546 <main+0x144>
     4a6:	4f c0       	rjmp	.+158    	; 0x546 <main+0x144>
			case GAME1:
				if (mcp_intr){
     4a8:	80 91 0c 02 	lds	r24, 0x020C
     4ac:	88 23       	and	r24, r24
     4ae:	41 f1       	breq	.+80     	; 0x500 <main+0xfe>
					CAN_receive(MCP_RXB0D0, &recieved);
     4b0:	ce 01       	movw	r24, r28
     4b2:	04 96       	adiw	r24, 0x04	; 4
     4b4:	bc 01       	movw	r22, r24
     4b6:	86 e6       	ldi	r24, 0x66	; 102
     4b8:	42 df       	rcall	.-380    	; 0x33e <CAN_receive>
					motor_set_reference(recieved.data[0]);
     4ba:	8f 81       	ldd	r24, Y+7	; 0x07
     4bc:	88 2f       	mov	r24, r24
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	a0 e0       	ldi	r26, 0x00	; 0
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	bc 01       	movw	r22, r24
     4c6:	cd 01       	movw	r24, r26
     4c8:	0e 94 a2 11 	call	0x2344	; 0x2344 <__floatunsisf>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	bc 01       	movw	r22, r24
     4d2:	cd 01       	movw	r24, r26
     4d4:	79 d3       	rcall	.+1778   	; 0xbc8 <motor_set_reference>
					timer_pwm_send_message(recieved.data[0],0);
     4d6:	8f 81       	ldd	r24, Y+7	; 0x07
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <timer_pwm_send_message>
					if (recieved.data[2] && !punching){
     4de:	89 85       	ldd	r24, Y+9	; 0x09
     4e0:	88 23       	and	r24, r24
     4e2:	39 f0       	breq	.+14     	; 0x4f2 <main+0xf0>
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	88 23       	and	r24, r24
     4e8:	21 f4       	brne	.+8      	; 0x4f2 <main+0xf0>
						solenoid_punch();
     4ea:	0e 94 b9 0c 	call	0x1972	; 0x1972 <solenoid_punch>
						punching = 1;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	89 83       	std	Y+1, r24	; 0x01
					}
					if(!recieved.data[2]){
     4f2:	89 85       	ldd	r24, Y+9	; 0x09
     4f4:	88 23       	and	r24, r24
     4f6:	09 f4       	brne	.+2      	; 0x4fa <main+0xf8>
						punching = 0;
     4f8:	19 82       	std	Y+1, r1	; 0x01
					}						
					mcp_intr = 0;
     4fa:	10 92 0c 02 	sts	0x020C, r1
				}
				/*if(adc_score(&IR)){
					state = LOST;
				}*/
				break;
     4fe:	23 c0       	rjmp	.+70     	; 0x546 <main+0x144>
     500:	22 c0       	rjmp	.+68     	; 0x546 <main+0x144>
			case GAME2:
				if (mcp_intr){
     502:	80 91 0c 02 	lds	r24, 0x020C
     506:	88 23       	and	r24, r24
     508:	e1 f0       	breq	.+56     	; 0x542 <main+0x140>
					CAN_receive(MCP_RXB0D0, &recieved);
     50a:	ce 01       	movw	r24, r28
     50c:	04 96       	adiw	r24, 0x04	; 4
     50e:	bc 01       	movw	r22, r24
     510:	86 e6       	ldi	r24, 0x66	; 102
     512:	15 df       	rcall	.-470    	; 0x33e <CAN_receive>
					motor_speed(recieved.data[0]);
     514:	8f 81       	ldd	r24, Y+7	; 0x07
     516:	71 d1       	rcall	.+738    	; 0x7fa <motor_speed>
					timer_pwm_send_message(recieved.data[0],0);
     518:	8f 81       	ldd	r24, Y+7	; 0x07
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <timer_pwm_send_message>
					if (recieved.data[2] && !punching){
     520:	89 85       	ldd	r24, Y+9	; 0x09
     522:	88 23       	and	r24, r24
     524:	39 f0       	breq	.+14     	; 0x534 <main+0x132>
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	88 23       	and	r24, r24
     52a:	21 f4       	brne	.+8      	; 0x534 <main+0x132>
						solenoid_punch();
     52c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <solenoid_punch>
						punching = 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	89 83       	std	Y+1, r24	; 0x01
					}
					if(!recieved.data[2]){
     534:	89 85       	ldd	r24, Y+9	; 0x09
     536:	88 23       	and	r24, r24
     538:	09 f4       	brne	.+2      	; 0x53c <main+0x13a>
						punching = 0;
     53a:	19 82       	std	Y+1, r1	; 0x01
					}
					mcp_intr = 0;
     53c:	10 92 0c 02 	sts	0x020C, r1
				}
				/*if(adc_score(&IR)){
					state = LOST;
				}*/
				break;
     540:	02 c0       	rjmp	.+4      	; 0x546 <main+0x144>
     542:	01 c0       	rjmp	.+2      	; 0x546 <main+0x144>
			case LOST:
				//CAN_lost();
				//state = GAME2;
				break;
     544:	00 00       	nop
			default:
				break;
		}
	}
     546:	7a cf       	rjmp	.-268    	; 0x43c <main+0x3a>

00000548 <__vector_3>:
}

ISR(INT2_vect){
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	00 90 5f 00 	lds	r0, 0x005F
     550:	0f 92       	push	r0
     552:	11 24       	eor	r1, r1
     554:	00 90 5b 00 	lds	r0, 0x005B
     558:	0f 92       	push	r0
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
	mcp_intr = mcp2515_read(MCP_CANINTF);						//reads interrupt register into global variable MCP_INTR to determine what's going on
     57a:	8c e2       	ldi	r24, 0x2C	; 44
     57c:	4e d0       	rcall	.+156    	; 0x61a <mcp2515_read>
     57e:	80 93 0c 02 	sts	0x020C, r24
	mcp2515_bit_modify(MCP_CANINTF, 0b11111111, 0b00000000);	//clears interrupt flags
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	6f ef       	ldi	r22, 0xFF	; 255
     586:	8c e2       	ldi	r24, 0x2C	; 44
     588:	ef d0       	rcall	.+478    	; 0x768 <mcp2515_bit_modify>
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	00 92 5b 00 	sts	0x005B, r0
     5ac:	0f 90       	pop	r0
     5ae:	00 92 5f 00 	sts	0x005F, r0
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <__vector_32>:

ISR(TIMER3_COMPA_vect){
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	00 90 5f 00 	lds	r0, 0x005F
     5c0:	0f 92       	push	r0
     5c2:	11 24       	eor	r1, r1
     5c4:	00 90 5b 00 	lds	r0, 0x005B
     5c8:	0f 92       	push	r0
     5ca:	2f 93       	push	r18
     5cc:	3f 93       	push	r19
     5ce:	4f 93       	push	r20
     5d0:	5f 93       	push	r21
     5d2:	6f 93       	push	r22
     5d4:	7f 93       	push	r23
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	motor_PIDcntrl();
     5ea:	68 d1       	rcall	.+720    	; 0x8bc <motor_PIDcntrl>
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	bf 91       	pop	r27
     5f6:	af 91       	pop	r26
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	7f 91       	pop	r23
     5fe:	6f 91       	pop	r22
     600:	5f 91       	pop	r21
     602:	4f 91       	pop	r20
     604:	3f 91       	pop	r19
     606:	2f 91       	pop	r18
     608:	0f 90       	pop	r0
     60a:	00 92 5b 00 	sts	0x005B, r0
     60e:	0f 90       	pop	r0
     610:	00 92 5f 00 	sts	0x005F, r0
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <mcp2515_read>:
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	1f 92       	push	r1
     620:	1f 92       	push	r1
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	8a 83       	std	Y+2, r24	; 0x02
     628:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <spi_select>
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <spi_transmit>
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <spi_transmit>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <spi_transmit>
     63e:	89 83       	std	Y+1, r24	; 0x01
     640:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <spi_deselect>
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <mcp2515_reset>:
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	2e 97       	sbiw	r28, 0x0e	; 14
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <spi_select>
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <spi_transmit>
     66e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <spi_deselect>
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e8       	ldi	r26, 0x80	; 128
     678:	bf e3       	ldi	r27, 0x3F	; 63
     67a:	89 83       	std	Y+1, r24	; 0x01
     67c:	9a 83       	std	Y+2, r25	; 0x02
     67e:	ab 83       	std	Y+3, r26	; 0x03
     680:	bc 83       	std	Y+4, r27	; 0x04
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	4a e7       	ldi	r20, 0x7A	; 122
     688:	53 e4       	ldi	r21, 0x43	; 67
     68a:	69 81       	ldd	r22, Y+1	; 0x01
     68c:	7a 81       	ldd	r23, Y+2	; 0x02
     68e:	8b 81       	ldd	r24, Y+3	; 0x03
     690:	9c 81       	ldd	r25, Y+4	; 0x04
     692:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     696:	dc 01       	movw	r26, r24
     698:	cb 01       	movw	r24, r22
     69a:	8d 83       	std	Y+5, r24	; 0x05
     69c:	9e 83       	std	Y+6, r25	; 0x06
     69e:	af 83       	std	Y+7, r26	; 0x07
     6a0:	b8 87       	std	Y+8, r27	; 0x08
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e8       	ldi	r20, 0x80	; 128
     6a8:	5f e3       	ldi	r21, 0x3F	; 63
     6aa:	6d 81       	ldd	r22, Y+5	; 0x05
     6ac:	7e 81       	ldd	r23, Y+6	; 0x06
     6ae:	8f 81       	ldd	r24, Y+7	; 0x07
     6b0:	98 85       	ldd	r25, Y+8	; 0x08
     6b2:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
     6b6:	88 23       	and	r24, r24
     6b8:	2c f4       	brge	.+10     	; 0x6c4 <mcp2515_reset+0x74>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	9a 87       	std	Y+10, r25	; 0x0a
     6c0:	89 87       	std	Y+9, r24	; 0x09
     6c2:	3f c0       	rjmp	.+126    	; 0x742 <mcp2515_reset+0xf2>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	3f ef       	ldi	r19, 0xFF	; 255
     6c8:	4f e7       	ldi	r20, 0x7F	; 127
     6ca:	57 e4       	ldi	r21, 0x47	; 71
     6cc:	6d 81       	ldd	r22, Y+5	; 0x05
     6ce:	7e 81       	ldd	r23, Y+6	; 0x06
     6d0:	8f 81       	ldd	r24, Y+7	; 0x07
     6d2:	98 85       	ldd	r25, Y+8	; 0x08
     6d4:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
     6d8:	18 16       	cp	r1, r24
     6da:	4c f5       	brge	.+82     	; 0x72e <mcp2515_reset+0xde>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	40 e2       	ldi	r20, 0x20	; 32
     6e2:	51 e4       	ldi	r21, 0x41	; 65
     6e4:	69 81       	ldd	r22, Y+1	; 0x01
     6e6:	7a 81       	ldd	r23, Y+2	; 0x02
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	9c 81       	ldd	r25, Y+4	; 0x04
     6ec:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	bc 01       	movw	r22, r24
     6f6:	cd 01       	movw	r24, r26
     6f8:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	9a 87       	std	Y+10, r25	; 0x0a
     702:	89 87       	std	Y+9, r24	; 0x09
     704:	0f c0       	rjmp	.+30     	; 0x724 <mcp2515_reset+0xd4>
     706:	89 e1       	ldi	r24, 0x19	; 25
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	9c 87       	std	Y+12, r25	; 0x0c
     70c:	8b 87       	std	Y+11, r24	; 0x0b
     70e:	8b 85       	ldd	r24, Y+11	; 0x0b
     710:	9c 85       	ldd	r25, Y+12	; 0x0c
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <mcp2515_reset+0xc2>
     716:	9c 87       	std	Y+12, r25	; 0x0c
     718:	8b 87       	std	Y+11, r24	; 0x0b
     71a:	89 85       	ldd	r24, Y+9	; 0x09
     71c:	9a 85       	ldd	r25, Y+10	; 0x0a
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	9a 87       	std	Y+10, r25	; 0x0a
     722:	89 87       	std	Y+9, r24	; 0x09
     724:	89 85       	ldd	r24, Y+9	; 0x09
     726:	9a 85       	ldd	r25, Y+10	; 0x0a
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	69 f7       	brne	.-38     	; 0x706 <mcp2515_reset+0xb6>
     72c:	14 c0       	rjmp	.+40     	; 0x756 <mcp2515_reset+0x106>
     72e:	6d 81       	ldd	r22, Y+5	; 0x05
     730:	7e 81       	ldd	r23, Y+6	; 0x06
     732:	8f 81       	ldd	r24, Y+7	; 0x07
     734:	98 85       	ldd	r25, Y+8	; 0x08
     736:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
     73a:	dc 01       	movw	r26, r24
     73c:	cb 01       	movw	r24, r22
     73e:	9a 87       	std	Y+10, r25	; 0x0a
     740:	89 87       	std	Y+9, r24	; 0x09
     742:	89 85       	ldd	r24, Y+9	; 0x09
     744:	9a 85       	ldd	r25, Y+10	; 0x0a
     746:	9e 87       	std	Y+14, r25	; 0x0e
     748:	8d 87       	std	Y+13, r24	; 0x0d
     74a:	8d 85       	ldd	r24, Y+13	; 0x0d
     74c:	9e 85       	ldd	r25, Y+14	; 0x0e
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <mcp2515_reset+0xfe>
     752:	9e 87       	std	Y+14, r25	; 0x0e
     754:	8d 87       	std	Y+13, r24	; 0x0d
     756:	2e 96       	adiw	r28, 0x0e	; 14
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <mcp2515_bit_modify>:
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	00 d0       	rcall	.+0      	; 0x76e <mcp2515_bit_modify+0x6>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	6a 83       	std	Y+2, r22	; 0x02
     776:	4b 83       	std	Y+3, r20	; 0x03
     778:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <spi_select>
     77c:	85 e0       	ldi	r24, 0x05	; 5
     77e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <spi_transmit>
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <spi_transmit>
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <spi_transmit>
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <spi_transmit>
     794:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <spi_deselect>
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <motor_init>:
static int16_t reference = 0;
static int16_t pos = 0;
static int32_t sumError = 0;
static int32_t last_pos = 0;

void motor_init(){
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
	set_bit(DDRH,DDH4);
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	31 e0       	ldi	r19, 0x01	; 1
     7b4:	f9 01       	movw	r30, r18
     7b6:	20 81       	ld	r18, Z
     7b8:	20 61       	ori	r18, 0x10	; 16
     7ba:	fc 01       	movw	r30, r24
     7bc:	20 83       	st	Z, r18
	set_bit(DDRH,DDH1);				//makes the pins connected to the motorbox output pins			
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	31 e0       	ldi	r19, 0x01	; 1
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	22 60       	ori	r18, 0x02	; 2
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
	set_bit(PORTH, PORTH4);			//Enables the motorbox
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	22 e0       	ldi	r18, 0x02	; 2
     7d6:	31 e0       	ldi	r19, 0x01	; 1
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	20 61       	ori	r18, 0x10	; 16
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
	clear_bit(PORTH,PORTH1);		//sets the motor direction
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	22 e0       	ldi	r18, 0x02	; 2
     7e8:	31 e0       	ldi	r19, 0x01	; 1
     7ea:	f9 01       	movw	r30, r18
     7ec:	20 81       	ld	r18, Z
     7ee:	2d 7f       	andi	r18, 0xFD	; 253
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 83       	st	Z, r18
	
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <motor_speed>:

void motor_speed(uint8_t speed){
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	28 97       	sbiw	r28, 0x08	; 8
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	8c 83       	std	Y+4, r24	; 0x04
	char	mes[3] = {0b01011110,0b00000000,0};		//make message containing address to the DAC and command
     810:	8e e5       	ldi	r24, 0x5E	; 94
     812:	89 83       	std	Y+1, r24	; 0x01
     814:	1a 82       	std	Y+2, r1	; 0x02
     816:	1b 82       	std	Y+3, r1	; 0x03
		
	if(speed >52){
     818:	8c 81       	ldd	r24, Y+4	; 0x04
     81a:	85 33       	cpi	r24, 0x35	; 53
     81c:	f0 f0       	brcs	.+60     	; 0x85a <motor_speed+0x60>
		set_bit(PORTH,PORTH1);						//set direction by pulling DIR high
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	22 e0       	ldi	r18, 0x02	; 2
     824:	31 e0       	ldi	r19, 0x01	; 1
     826:	f9 01       	movw	r30, r18
     828:	20 81       	ld	r18, Z
     82a:	22 60       	ori	r18, 0x02	; 2
     82c:	fc 01       	movw	r30, r24
     82e:	20 83       	st	Z, r18
		mes[2] = ((255*(speed-50))/100)+10;			//calculate digital voltage value
     830:	8c 81       	ldd	r24, Y+4	; 0x04
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	9c 01       	movw	r18, r24
     838:	22 53       	subi	r18, 0x32	; 50
     83a:	31 09       	sbc	r19, r1
     83c:	4f ef       	ldi	r20, 0xFF	; 255
     83e:	42 9f       	mul	r20, r18
     840:	c0 01       	movw	r24, r0
     842:	43 9f       	mul	r20, r19
     844:	90 0d       	add	r25, r0
     846:	11 24       	eor	r1, r1
     848:	24 e6       	ldi	r18, 0x64	; 100
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	b9 01       	movw	r22, r18
     84e:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodhi4>
     852:	cb 01       	movw	r24, r22
     854:	86 5f       	subi	r24, 0xF6	; 246
     856:	8b 83       	std	Y+3, r24	; 0x03
     858:	23 c0       	rjmp	.+70     	; 0x8a0 <motor_speed+0xa6>
	}
	
	else if (speed <48){
     85a:	8c 81       	ldd	r24, Y+4	; 0x04
     85c:	80 33       	cpi	r24, 0x30	; 48
     85e:	f8 f4       	brcc	.+62     	; 0x89e <motor_speed+0xa4>
		clear_bit(PORTH,PORTH1);					//set direction by pulling DIR low
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	22 e0       	ldi	r18, 0x02	; 2
     866:	31 e0       	ldi	r19, 0x01	; 1
     868:	f9 01       	movw	r30, r18
     86a:	20 81       	ld	r18, Z
     86c:	2d 7f       	andi	r18, 0xFD	; 253
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
		mes[2] =  ((255*(50-speed))/100)+10;		//calculate digital voltage value
     872:	8c 81       	ldd	r24, Y+4	; 0x04
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	22 e3       	ldi	r18, 0x32	; 50
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	28 1b       	sub	r18, r24
     87e:	39 0b       	sbc	r19, r25
     880:	4f ef       	ldi	r20, 0xFF	; 255
     882:	42 9f       	mul	r20, r18
     884:	c0 01       	movw	r24, r0
     886:	43 9f       	mul	r20, r19
     888:	90 0d       	add	r25, r0
     88a:	11 24       	eor	r1, r1
     88c:	24 e6       	ldi	r18, 0x64	; 100
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	b9 01       	movw	r22, r18
     892:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodhi4>
     896:	cb 01       	movw	r24, r22
     898:	86 5f       	subi	r24, 0xF6	; 246
     89a:	8b 83       	std	Y+3, r24	; 0x03
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <motor_speed+0xa6>
	}
	
	else{mes[2] = 0;}								//no speed for joystick output between 48 and 52
     89e:	1b 82       	std	Y+3, r1	; 0x03
		
	TWI_Start_Transceiver_With_Data(mes, 3);		//transmit over I2C
     8a0:	63 e0       	ldi	r22, 0x03	; 3
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <TWI_Start_Transceiver_With_Data>
}
     8aa:	28 96       	adiw	r28, 0x08	; 8
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <motor_PIDcntrl>:

void motor_PIDcntrl(){
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	6d 97       	sbiw	r28, 0x1d	; 29
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61

	uint8_t Kp = 1;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	8d 83       	std	Y+5, r24	; 0x05
	double Ki = 0.3;
     8e0:	8a e9       	ldi	r24, 0x9A	; 154
     8e2:	99 e9       	ldi	r25, 0x99	; 153
     8e4:	a9 e9       	ldi	r26, 0x99	; 153
     8e6:	be e3       	ldi	r27, 0x3E	; 62
     8e8:	8e 83       	std	Y+6, r24	; 0x06
     8ea:	9f 83       	std	Y+7, r25	; 0x07
     8ec:	a8 87       	std	Y+8, r26	; 0x08
     8ee:	b9 87       	std	Y+9, r27	; 0x09
	double Kd = 1;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	a0 e8       	ldi	r26, 0x80	; 128
     8f6:	bf e3       	ldi	r27, 0x3F	; 63
     8f8:	8a 87       	std	Y+10, r24	; 0x0a
     8fa:	9b 87       	std	Y+11, r25	; 0x0b
     8fc:	ac 87       	std	Y+12, r26	; 0x0c
     8fe:	bd 87       	std	Y+13, r27	; 0x0d
	
	int16_t wind_up = 5000;
     900:	88 e8       	ldi	r24, 0x88	; 136
     902:	93 e1       	ldi	r25, 0x13	; 19
     904:	9f 87       	std	Y+15, r25	; 0x0f
     906:	8e 87       	std	Y+14, r24	; 0x0e
	int16_t saturation = 5000;
     908:	88 e8       	ldi	r24, 0x88	; 136
     90a:	93 e1       	ldi	r25, 0x13	; 19
     90c:	99 8b       	std	Y+17, r25	; 0x11
     90e:	88 8b       	std	Y+16, r24	; 0x10
	pos = motor_encoder_read();
     910:	ec d5       	rcall	.+3032   	; 0x14ea <motor_encoder_read>
     912:	90 93 12 02 	sts	0x0212, r25
     916:	80 93 11 02 	sts	0x0211, r24
	
	int32_t posError = reference-pos;
     91a:	20 91 0f 02 	lds	r18, 0x020F
     91e:	30 91 10 02 	lds	r19, 0x0210
     922:	80 91 11 02 	lds	r24, 0x0211
     926:	90 91 12 02 	lds	r25, 0x0212
     92a:	79 01       	movw	r14, r18
     92c:	e8 1a       	sub	r14, r24
     92e:	f9 0a       	sbc	r15, r25
     930:	c7 01       	movw	r24, r14
     932:	aa 27       	eor	r26, r26
     934:	97 fd       	sbrc	r25, 7
     936:	a0 95       	com	r26
     938:	ba 2f       	mov	r27, r26
     93a:	8a 8b       	std	Y+18, r24	; 0x12
     93c:	9b 8b       	std	Y+19, r25	; 0x13
     93e:	ac 8b       	std	Y+20, r26	; 0x14
     940:	bd 8b       	std	Y+21, r27	; 0x15
	sumError += posError;
     942:	20 91 13 02 	lds	r18, 0x0213
     946:	30 91 14 02 	lds	r19, 0x0214
     94a:	40 91 15 02 	lds	r20, 0x0215
     94e:	50 91 16 02 	lds	r21, 0x0216
     952:	8a 89       	ldd	r24, Y+18	; 0x12
     954:	9b 89       	ldd	r25, Y+19	; 0x13
     956:	ac 89       	ldd	r26, Y+20	; 0x14
     958:	bd 89       	ldd	r27, Y+21	; 0x15
     95a:	82 0f       	add	r24, r18
     95c:	93 1f       	adc	r25, r19
     95e:	a4 1f       	adc	r26, r20
     960:	b5 1f       	adc	r27, r21
     962:	80 93 13 02 	sts	0x0213, r24
     966:	90 93 14 02 	sts	0x0214, r25
     96a:	a0 93 15 02 	sts	0x0215, r26
     96e:	b0 93 16 02 	sts	0x0216, r27
	int32_t derivative = pos-last_pos;
     972:	80 91 11 02 	lds	r24, 0x0211
     976:	90 91 12 02 	lds	r25, 0x0212
     97a:	9c 01       	movw	r18, r24
     97c:	44 27       	eor	r20, r20
     97e:	37 fd       	sbrc	r19, 7
     980:	40 95       	com	r20
     982:	54 2f       	mov	r21, r20
     984:	80 91 17 02 	lds	r24, 0x0217
     988:	90 91 18 02 	lds	r25, 0x0218
     98c:	a0 91 19 02 	lds	r26, 0x0219
     990:	b0 91 1a 02 	lds	r27, 0x021A
     994:	79 01       	movw	r14, r18
     996:	8a 01       	movw	r16, r20
     998:	e8 1a       	sub	r14, r24
     99a:	f9 0a       	sbc	r15, r25
     99c:	0a 0b       	sbc	r16, r26
     99e:	1b 0b       	sbc	r17, r27
     9a0:	d8 01       	movw	r26, r16
     9a2:	c7 01       	movw	r24, r14
     9a4:	8e 8b       	std	Y+22, r24	; 0x16
     9a6:	9f 8b       	std	Y+23, r25	; 0x17
     9a8:	a8 8f       	std	Y+24, r26	; 0x18
     9aa:	b9 8f       	std	Y+25, r27	; 0x19
	last_pos = pos;
     9ac:	80 91 11 02 	lds	r24, 0x0211
     9b0:	90 91 12 02 	lds	r25, 0x0212
     9b4:	aa 27       	eor	r26, r26
     9b6:	97 fd       	sbrc	r25, 7
     9b8:	a0 95       	com	r26
     9ba:	ba 2f       	mov	r27, r26
     9bc:	80 93 17 02 	sts	0x0217, r24
     9c0:	90 93 18 02 	sts	0x0218, r25
     9c4:	a0 93 19 02 	sts	0x0219, r26
     9c8:	b0 93 1a 02 	sts	0x021A, r27
	
	if(sumError>wind_up){sumError = wind_up;}
     9cc:	8e 85       	ldd	r24, Y+14	; 0x0e
     9ce:	9f 85       	ldd	r25, Y+15	; 0x0f
     9d0:	9c 01       	movw	r18, r24
     9d2:	44 27       	eor	r20, r20
     9d4:	37 fd       	sbrc	r19, 7
     9d6:	40 95       	com	r20
     9d8:	54 2f       	mov	r21, r20
     9da:	80 91 13 02 	lds	r24, 0x0213
     9de:	90 91 14 02 	lds	r25, 0x0214
     9e2:	a0 91 15 02 	lds	r26, 0x0215
     9e6:	b0 91 16 02 	lds	r27, 0x0216
     9ea:	28 17       	cp	r18, r24
     9ec:	39 07       	cpc	r19, r25
     9ee:	4a 07       	cpc	r20, r26
     9f0:	5b 07       	cpc	r21, r27
     9f2:	74 f4       	brge	.+28     	; 0xa10 <motor_PIDcntrl+0x154>
     9f4:	8e 85       	ldd	r24, Y+14	; 0x0e
     9f6:	9f 85       	ldd	r25, Y+15	; 0x0f
     9f8:	aa 27       	eor	r26, r26
     9fa:	97 fd       	sbrc	r25, 7
     9fc:	a0 95       	com	r26
     9fe:	ba 2f       	mov	r27, r26
     a00:	80 93 13 02 	sts	0x0213, r24
     a04:	90 93 14 02 	sts	0x0214, r25
     a08:	a0 93 15 02 	sts	0x0215, r26
     a0c:	b0 93 16 02 	sts	0x0216, r27
	if(sumError<-wind_up){sumError = -wind_up;}
     a10:	8e 85       	ldd	r24, Y+14	; 0x0e
     a12:	9f 85       	ldd	r25, Y+15	; 0x0f
     a14:	91 95       	neg	r25
     a16:	81 95       	neg	r24
     a18:	91 09       	sbc	r25, r1
     a1a:	9c 01       	movw	r18, r24
     a1c:	44 27       	eor	r20, r20
     a1e:	37 fd       	sbrc	r19, 7
     a20:	40 95       	com	r20
     a22:	54 2f       	mov	r21, r20
     a24:	80 91 13 02 	lds	r24, 0x0213
     a28:	90 91 14 02 	lds	r25, 0x0214
     a2c:	a0 91 15 02 	lds	r26, 0x0215
     a30:	b0 91 16 02 	lds	r27, 0x0216
     a34:	82 17       	cp	r24, r18
     a36:	93 07       	cpc	r25, r19
     a38:	a4 07       	cpc	r26, r20
     a3a:	b5 07       	cpc	r27, r21
     a3c:	8c f4       	brge	.+34     	; 0xa60 <motor_PIDcntrl+0x1a4>
     a3e:	8e 85       	ldd	r24, Y+14	; 0x0e
     a40:	9f 85       	ldd	r25, Y+15	; 0x0f
     a42:	91 95       	neg	r25
     a44:	81 95       	neg	r24
     a46:	91 09       	sbc	r25, r1
     a48:	aa 27       	eor	r26, r26
     a4a:	97 fd       	sbrc	r25, 7
     a4c:	a0 95       	com	r26
     a4e:	ba 2f       	mov	r27, r26
     a50:	80 93 13 02 	sts	0x0213, r24
     a54:	90 93 14 02 	sts	0x0214, r25
     a58:	a0 93 15 02 	sts	0x0215, r26
     a5c:	b0 93 16 02 	sts	0x0216, r27
	
	int32_t u = Kp*posError + Ki*sumError + Kd*derivative;
     a60:	8d 81       	ldd	r24, Y+5	; 0x05
     a62:	28 2f       	mov	r18, r24
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	8a 89       	ldd	r24, Y+18	; 0x12
     a6c:	9b 89       	ldd	r25, Y+19	; 0x13
     a6e:	ac 89       	ldd	r26, Y+20	; 0x14
     a70:	bd 89       	ldd	r27, Y+21	; 0x15
     a72:	bc 01       	movw	r22, r24
     a74:	cd 01       	movw	r24, r26
     a76:	0e 94 0e 13 	call	0x261c	; 0x261c <__mulsi3>
     a7a:	dc 01       	movw	r26, r24
     a7c:	cb 01       	movw	r24, r22
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24
     a8a:	80 91 13 02 	lds	r24, 0x0213
     a8e:	90 91 14 02 	lds	r25, 0x0214
     a92:	a0 91 15 02 	lds	r26, 0x0215
     a96:	b0 91 16 02 	lds	r27, 0x0216
     a9a:	bc 01       	movw	r22, r24
     a9c:	cd 01       	movw	r24, r26
     a9e:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	2e 81       	ldd	r18, Y+6	; 0x06
     aa8:	3f 81       	ldd	r19, Y+7	; 0x07
     aaa:	48 85       	ldd	r20, Y+8	; 0x08
     aac:	59 85       	ldd	r21, Y+9	; 0x09
     aae:	bc 01       	movw	r22, r24
     ab0:	cd 01       	movw	r24, r26
     ab2:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     ab6:	dc 01       	movw	r26, r24
     ab8:	cb 01       	movw	r24, r22
     aba:	9c 01       	movw	r18, r24
     abc:	ad 01       	movw	r20, r26
     abe:	c7 01       	movw	r24, r14
     ac0:	b6 01       	movw	r22, r12
     ac2:	0e 94 a1 10 	call	0x2142	; 0x2142 <__addsf3>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	6c 01       	movw	r12, r24
     acc:	7d 01       	movw	r14, r26
     ace:	6e 89       	ldd	r22, Y+22	; 0x16
     ad0:	7f 89       	ldd	r23, Y+23	; 0x17
     ad2:	88 8d       	ldd	r24, Y+24	; 0x18
     ad4:	99 8d       	ldd	r25, Y+25	; 0x19
     ad6:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
     ada:	dc 01       	movw	r26, r24
     adc:	cb 01       	movw	r24, r22
     ade:	2a 85       	ldd	r18, Y+10	; 0x0a
     ae0:	3b 85       	ldd	r19, Y+11	; 0x0b
     ae2:	4c 85       	ldd	r20, Y+12	; 0x0c
     ae4:	5d 85       	ldd	r21, Y+13	; 0x0d
     ae6:	bc 01       	movw	r22, r24
     ae8:	cd 01       	movw	r24, r26
     aea:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	9c 01       	movw	r18, r24
     af4:	ad 01       	movw	r20, r26
     af6:	c7 01       	movw	r24, r14
     af8:	b6 01       	movw	r22, r12
     afa:	0e 94 a1 10 	call	0x2142	; 0x2142 <__addsf3>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	bc 01       	movw	r22, r24
     b04:	cd 01       	movw	r24, r26
     b06:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__fixsfsi>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	89 83       	std	Y+1, r24	; 0x01
     b10:	9a 83       	std	Y+2, r25	; 0x02
     b12:	ab 83       	std	Y+3, r26	; 0x03
     b14:	bc 83       	std	Y+4, r27	; 0x04
	
	if(u>saturation){u = saturation;}
     b16:	88 89       	ldd	r24, Y+16	; 0x10
     b18:	99 89       	ldd	r25, Y+17	; 0x11
     b1a:	9c 01       	movw	r18, r24
     b1c:	44 27       	eor	r20, r20
     b1e:	37 fd       	sbrc	r19, 7
     b20:	40 95       	com	r20
     b22:	54 2f       	mov	r21, r20
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	ab 81       	ldd	r26, Y+3	; 0x03
     b2a:	bc 81       	ldd	r27, Y+4	; 0x04
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	4a 07       	cpc	r20, r26
     b32:	5b 07       	cpc	r21, r27
     b34:	54 f4       	brge	.+20     	; 0xb4a <motor_PIDcntrl+0x28e>
     b36:	88 89       	ldd	r24, Y+16	; 0x10
     b38:	99 89       	ldd	r25, Y+17	; 0x11
     b3a:	aa 27       	eor	r26, r26
     b3c:	97 fd       	sbrc	r25, 7
     b3e:	a0 95       	com	r26
     b40:	ba 2f       	mov	r27, r26
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04
	if(u<-saturation){u = -saturation;}
     b4a:	88 89       	ldd	r24, Y+16	; 0x10
     b4c:	99 89       	ldd	r25, Y+17	; 0x11
     b4e:	91 95       	neg	r25
     b50:	81 95       	neg	r24
     b52:	91 09       	sbc	r25, r1
     b54:	9c 01       	movw	r18, r24
     b56:	44 27       	eor	r20, r20
     b58:	37 fd       	sbrc	r19, 7
     b5a:	40 95       	com	r20
     b5c:	54 2f       	mov	r21, r20
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	ab 81       	ldd	r26, Y+3	; 0x03
     b64:	bc 81       	ldd	r27, Y+4	; 0x04
     b66:	82 17       	cp	r24, r18
     b68:	93 07       	cpc	r25, r19
     b6a:	a4 07       	cpc	r26, r20
     b6c:	b5 07       	cpc	r27, r21
     b6e:	6c f4       	brge	.+26     	; 0xb8a <motor_PIDcntrl+0x2ce>
     b70:	88 89       	ldd	r24, Y+16	; 0x10
     b72:	99 89       	ldd	r25, Y+17	; 0x11
     b74:	91 95       	neg	r25
     b76:	81 95       	neg	r24
     b78:	91 09       	sbc	r25, r1
     b7a:	aa 27       	eor	r26, r26
     b7c:	97 fd       	sbrc	r25, 7
     b7e:	a0 95       	com	r26
     b80:	ba 2f       	mov	r27, r26
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	ab 83       	std	Y+3, r26	; 0x03
     b88:	bc 83       	std	Y+4, r27	; 0x04
	
	motor_speed(((u/100)+50));
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	ab 81       	ldd	r26, Y+3	; 0x03
     b90:	bc 81       	ldd	r27, Y+4	; 0x04
     b92:	24 e6       	ldi	r18, 0x64	; 100
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	bc 01       	movw	r22, r24
     b9c:	cd 01       	movw	r24, r26
     b9e:	0e 94 30 13 	call	0x2660	; 0x2660 <__divmodsi4>
     ba2:	da 01       	movw	r26, r20
     ba4:	c9 01       	movw	r24, r18
     ba6:	8e 5c       	subi	r24, 0xCE	; 206
     ba8:	28 de       	rcall	.-944    	; 0x7fa <motor_speed>
} 
     baa:	6d 96       	adiw	r28, 0x1d	; 29
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	08 95       	ret

00000bc8 <motor_set_reference>:

void motor_set_reference(double ref){
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	00 d0       	rcall	.+0      	; 0xbce <motor_set_reference+0x6>
     bce:	1f 92       	push	r1
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	69 83       	std	Y+1, r22	; 0x01
     bd6:	7a 83       	std	Y+2, r23	; 0x02
     bd8:	8b 83       	std	Y+3, r24	; 0x03
     bda:	9c 83       	std	Y+4, r25	; 0x04
	ref= ref/100;
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	48 ec       	ldi	r20, 0xC8	; 200
     be2:	52 e4       	ldi	r21, 0x42	; 66
     be4:	69 81       	ldd	r22, Y+1	; 0x01
     be6:	7a 81       	ldd	r23, Y+2	; 0x02
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	0e 94 09 11 	call	0x2212	; 0x2212 <__divsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	9a 83       	std	Y+2, r25	; 0x02
     bf8:	ab 83       	std	Y+3, r26	; 0x03
     bfa:	bc 83       	std	Y+4, r27	; 0x04
	reference = ref*max;				//scales the reference to the encoder output;
     bfc:	80 91 0d 02 	lds	r24, 0x020D
     c00:	90 91 0e 02 	lds	r25, 0x020E
     c04:	aa 27       	eor	r26, r26
     c06:	97 fd       	sbrc	r25, 7
     c08:	a0 95       	com	r26
     c0a:	ba 2f       	mov	r27, r26
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	29 81       	ldd	r18, Y+1	; 0x01
     c1a:	3a 81       	ldd	r19, Y+2	; 0x02
     c1c:	4b 81       	ldd	r20, Y+3	; 0x03
     c1e:	5c 81       	ldd	r21, Y+4	; 0x04
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__fixsfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	90 93 10 02 	sts	0x0210, r25
     c3c:	80 93 0f 02 	sts	0x020F, r24
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <motor_encoder_enable>:

void motor_encoder_enable(uint8_t enable){
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	1f 92       	push	r1
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	89 83       	std	Y+1, r24	; 0x01
	set_bit(DDRH,DDH5);							//sets data direction of OE
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	21 e0       	ldi	r18, 0x01	; 1
     c60:	31 e0       	ldi	r19, 0x01	; 1
     c62:	f9 01       	movw	r30, r18
     c64:	20 81       	ld	r18, Z
     c66:	20 62       	ori	r18, 0x20	; 32
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
	if(enable){clear_bit(PORTH,PORTH5);}		//enables the decoder by pulling OE low
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	88 23       	and	r24, r24
     c70:	51 f0       	breq	.+20     	; 0xc86 <motor_encoder_enable+0x38>
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	22 e0       	ldi	r18, 0x02	; 2
     c78:	31 e0       	ldi	r19, 0x01	; 1
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	2f 7d       	andi	r18, 0xDF	; 223
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <motor_encoder_enable+0x4a>
	else{set_bit(PORTH, PORTH5);}				//disables encoder by setting OE high
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	22 e0       	ldi	r18, 0x02	; 2
     c8c:	31 e0       	ldi	r19, 0x01	; 1
     c8e:	f9 01       	movw	r30, r18
     c90:	20 81       	ld	r18, Z
     c92:	20 62       	ori	r18, 0x20	; 32
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
}
     c98:	0f 90       	pop	r0
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <motor_encoder_calib>:
int16_t motor_encoder_calib(){
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	c8 54       	subi	r28, 0x48	; 72
     cae:	d1 09       	sbc	r29, r1
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
	motor_speed(95);
     cba:	8f e5       	ldi	r24, 0x5F	; 95
     cbc:	9e dd       	rcall	.-1220   	; 0x7fa <motor_speed>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e2       	ldi	r26, 0x20	; 32
     cc4:	b1 e4       	ldi	r27, 0x41	; 65
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	ad 83       	std	Y+5, r26	; 0x05
     ccc:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	4a e7       	ldi	r20, 0x7A	; 122
     cd4:	55 e4       	ldi	r21, 0x45	; 69
     cd6:	6b 81       	ldd	r22, Y+3	; 0x03
     cd8:	7c 81       	ldd	r23, Y+4	; 0x04
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	6f 81       	ldd	r22, Y+7	; 0x07
     cf8:	78 85       	ldd	r23, Y+8	; 0x08
     cfa:	89 85       	ldd	r24, Y+9	; 0x09
     cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfe:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <motor_encoder_calib+0x70>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9c 87       	std	Y+12, r25	; 0x0c
     d0c:	8b 87       	std	Y+11, r24	; 0x0b
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <motor_encoder_calib+0xee>
	else if (__tmp > 65535)
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	3f ef       	ldi	r19, 0xFF	; 255
     d14:	4f e7       	ldi	r20, 0x7F	; 127
     d16:	57 e4       	ldi	r21, 0x47	; 71
     d18:	6f 81       	ldd	r22, Y+7	; 0x07
     d1a:	78 85       	ldd	r23, Y+8	; 0x08
     d1c:	89 85       	ldd	r24, Y+9	; 0x09
     d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d20:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <motor_encoder_calib+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e2       	ldi	r20, 0x20	; 32
     d2e:	51 e4       	ldi	r21, 0x41	; 65
     d30:	6b 81       	ldd	r22, Y+3	; 0x03
     d32:	7c 81       	ldd	r23, Y+4	; 0x04
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9c 87       	std	Y+12, r25	; 0x0c
     d4e:	8b 87       	std	Y+11, r24	; 0x0b
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <motor_encoder_calib+0xd0>
     d52:	80 e9       	ldi	r24, 0x90	; 144
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	9e 87       	std	Y+14, r25	; 0x0e
     d58:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <motor_encoder_calib+0xbe>
     d62:	9e 87       	std	Y+14, r25	; 0x0e
     d64:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8b 85       	ldd	r24, Y+11	; 0x0b
     d68:	9c 85       	ldd	r25, Y+12	; 0x0c
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9c 87       	std	Y+12, r25	; 0x0c
     d6e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8b 85       	ldd	r24, Y+11	; 0x0b
     d72:	9c 85       	ldd	r25, Y+12	; 0x0c
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <motor_encoder_calib+0xb2>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <motor_encoder_calib+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9c 87       	std	Y+12, r25	; 0x0c
     d8c:	8b 87       	std	Y+11, r24	; 0x0b
     d8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d90:	9c 85       	ldd	r25, Y+12	; 0x0c
     d92:	98 8b       	std	Y+16, r25	; 0x10
     d94:	8f 87       	std	Y+15, r24	; 0x0f
     d96:	8f 85       	ldd	r24, Y+15	; 0x0f
     d98:	98 89       	ldd	r25, Y+16	; 0x10
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <motor_encoder_calib+0xfa>
     d9e:	98 8b       	std	Y+16, r25	; 0x10
     da0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	int16_t last_encoder = motor_encoder_read();
     da2:	a3 d3       	rcall	.+1862   	; 0x14ea <motor_encoder_read>
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
	printf("%i \n", last_encoder);
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	8f 93       	push	r24
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	8f 93       	push	r24
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	89 2f       	mov	r24, r25
     db6:	8f 93       	push	r24
     db8:	87 e0       	ldi	r24, 0x07	; 7
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	8f 93       	push	r24
     dbe:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <printf>
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
	while(motor_encoder_read() != last_encoder){
     dca:	86 c0       	rjmp	.+268    	; 0xed8 <motor_encoder_calib+0x238>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a0 e2       	ldi	r26, 0x20	; 32
     dd2:	b1 e4       	ldi	r27, 0x41	; 65
     dd4:	89 8b       	std	Y+17, r24	; 0x11
     dd6:	9a 8b       	std	Y+18, r25	; 0x12
     dd8:	ab 8b       	std	Y+19, r26	; 0x13
     dda:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	4a e7       	ldi	r20, 0x7A	; 122
     de2:	55 e4       	ldi	r21, 0x45	; 69
     de4:	69 89       	ldd	r22, Y+17	; 0x11
     de6:	7a 89       	ldd	r23, Y+18	; 0x12
     de8:	8b 89       	ldd	r24, Y+19	; 0x13
     dea:	9c 89       	ldd	r25, Y+20	; 0x14
     dec:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	8d 8b       	std	Y+21, r24	; 0x15
     df6:	9e 8b       	std	Y+22, r25	; 0x16
     df8:	af 8b       	std	Y+23, r26	; 0x17
     dfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e8       	ldi	r20, 0x80	; 128
     e02:	5f e3       	ldi	r21, 0x3F	; 63
     e04:	6d 89       	ldd	r22, Y+21	; 0x15
     e06:	7e 89       	ldd	r23, Y+22	; 0x16
     e08:	8f 89       	ldd	r24, Y+23	; 0x17
     e0a:	98 8d       	ldd	r25, Y+24	; 0x18
     e0c:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
     e10:	88 23       	and	r24, r24
     e12:	2c f4       	brge	.+10     	; 0xe1e <motor_encoder_calib+0x17e>
		__ticks = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9a 8f       	std	Y+26, r25	; 0x1a
     e1a:	89 8f       	std	Y+25, r24	; 0x19
     e1c:	3f c0       	rjmp	.+126    	; 0xe9c <motor_encoder_calib+0x1fc>
	else if (__tmp > 65535)
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	3f ef       	ldi	r19, 0xFF	; 255
     e22:	4f e7       	ldi	r20, 0x7F	; 127
     e24:	57 e4       	ldi	r21, 0x47	; 71
     e26:	6d 89       	ldd	r22, Y+21	; 0x15
     e28:	7e 89       	ldd	r23, Y+22	; 0x16
     e2a:	8f 89       	ldd	r24, Y+23	; 0x17
     e2c:	98 8d       	ldd	r25, Y+24	; 0x18
     e2e:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
     e32:	18 16       	cp	r1, r24
     e34:	4c f5       	brge	.+82     	; 0xe88 <motor_encoder_calib+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e2       	ldi	r20, 0x20	; 32
     e3c:	51 e4       	ldi	r21, 0x41	; 65
     e3e:	69 89       	ldd	r22, Y+17	; 0x11
     e40:	7a 89       	ldd	r23, Y+18	; 0x12
     e42:	8b 89       	ldd	r24, Y+19	; 0x13
     e44:	9c 89       	ldd	r25, Y+20	; 0x14
     e46:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9a 8f       	std	Y+26, r25	; 0x1a
     e5c:	89 8f       	std	Y+25, r24	; 0x19
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <motor_encoder_calib+0x1de>
     e60:	80 e9       	ldi	r24, 0x90	; 144
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	9c 8f       	std	Y+28, r25	; 0x1c
     e66:	8b 8f       	std	Y+27, r24	; 0x1b
     e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <motor_encoder_calib+0x1cc>
     e70:	9c 8f       	std	Y+28, r25	; 0x1c
     e72:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e74:	89 8d       	ldd	r24, Y+25	; 0x19
     e76:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	9a 8f       	std	Y+26, r25	; 0x1a
     e7c:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7e:	89 8d       	ldd	r24, Y+25	; 0x19
     e80:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	69 f7       	brne	.-38     	; 0xe60 <motor_encoder_calib+0x1c0>
     e86:	14 c0       	rjmp	.+40     	; 0xeb0 <motor_encoder_calib+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e88:	6d 89       	ldd	r22, Y+21	; 0x15
     e8a:	7e 89       	ldd	r23, Y+22	; 0x16
     e8c:	8f 89       	ldd	r24, Y+23	; 0x17
     e8e:	98 8d       	ldd	r25, Y+24	; 0x18
     e90:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	9a 8f       	std	Y+26, r25	; 0x1a
     e9a:	89 8f       	std	Y+25, r24	; 0x19
     e9c:	89 8d       	ldd	r24, Y+25	; 0x19
     e9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ea0:	9e 8f       	std	Y+30, r25	; 0x1e
     ea2:	8d 8f       	std	Y+29, r24	; 0x1d
     ea4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <motor_encoder_calib+0x208>
     eac:	9e 8f       	std	Y+30, r25	; 0x1e
     eae:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		last_encoder = motor_encoder_read();
     eb0:	1c d3       	rcall	.+1592   	; 0x14ea <motor_encoder_read>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
		printf("%i \n", last_encoder);
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	8f 93       	push	r24
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	8f 93       	push	r24
     ebe:	87 e0       	ldi	r24, 0x07	; 7
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	89 2f       	mov	r24, r25
     ec4:	8f 93       	push	r24
     ec6:	87 e0       	ldi	r24, 0x07	; 7
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	8f 93       	push	r24
     ecc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <printf>
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
int16_t motor_encoder_calib(){
	motor_speed(95);
	_delay_ms(10);
	int16_t last_encoder = motor_encoder_read();
	printf("%i \n", last_encoder);
	while(motor_encoder_read() != last_encoder){
     ed8:	08 d3       	rcall	.+1552   	; 0x14ea <motor_encoder_read>
     eda:	9c 01       	movw	r18, r24
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	28 17       	cp	r18, r24
     ee2:	39 07       	cpc	r19, r25
     ee4:	09 f0       	breq	.+2      	; 0xee8 <motor_encoder_calib+0x248>
     ee6:	72 cf       	rjmp	.-284    	; 0xdcc <motor_encoder_calib+0x12c>
		_delay_ms(10);
		last_encoder = motor_encoder_read();
		printf("%i \n", last_encoder);
	}
	motor_encoder_reset();
     ee8:	ea d1       	rcall	.+980    	; 0x12be <motor_encoder_reset>
	motor_speed(50);
     eea:	82 e3       	ldi	r24, 0x32	; 50
     eec:	86 dc       	rcall	.-1780   	; 0x7fa <motor_speed>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a8 e4       	ldi	r26, 0x48	; 72
     ef4:	b3 e4       	ldi	r27, 0x43	; 67
     ef6:	8f 8f       	std	Y+31, r24	; 0x1f
     ef8:	98 a3       	std	Y+32, r25	; 0x20
     efa:	a9 a3       	std	Y+33, r26	; 0x21
     efc:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4a e7       	ldi	r20, 0x7A	; 122
     f04:	55 e4       	ldi	r21, 0x45	; 69
     f06:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f08:	78 a1       	ldd	r23, Y+32	; 0x20
     f0a:	89 a1       	ldd	r24, Y+33	; 0x21
     f0c:	9a a1       	ldd	r25, Y+34	; 0x22
     f0e:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8b a3       	std	Y+35, r24	; 0x23
     f18:	9c a3       	std	Y+36, r25	; 0x24
     f1a:	ad a3       	std	Y+37, r26	; 0x25
     f1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e8       	ldi	r20, 0x80	; 128
     f24:	5f e3       	ldi	r21, 0x3F	; 63
     f26:	6b a1       	ldd	r22, Y+35	; 0x23
     f28:	7c a1       	ldd	r23, Y+36	; 0x24
     f2a:	8d a1       	ldd	r24, Y+37	; 0x25
     f2c:	9e a1       	ldd	r25, Y+38	; 0x26
     f2e:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
     f32:	88 23       	and	r24, r24
     f34:	2c f4       	brge	.+10     	; 0xf40 <motor_encoder_calib+0x2a0>
		__ticks = 1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	98 a7       	std	Y+40, r25	; 0x28
     f3c:	8f a3       	std	Y+39, r24	; 0x27
     f3e:	3f c0       	rjmp	.+126    	; 0xfbe <motor_encoder_calib+0x31e>
	else if (__tmp > 65535)
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	3f ef       	ldi	r19, 0xFF	; 255
     f44:	4f e7       	ldi	r20, 0x7F	; 127
     f46:	57 e4       	ldi	r21, 0x47	; 71
     f48:	6b a1       	ldd	r22, Y+35	; 0x23
     f4a:	7c a1       	ldd	r23, Y+36	; 0x24
     f4c:	8d a1       	ldd	r24, Y+37	; 0x25
     f4e:	9e a1       	ldd	r25, Y+38	; 0x26
     f50:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
     f54:	18 16       	cp	r1, r24
     f56:	4c f5       	brge	.+82     	; 0xfaa <motor_encoder_calib+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e2       	ldi	r20, 0x20	; 32
     f5e:	51 e4       	ldi	r21, 0x41	; 65
     f60:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f62:	78 a1       	ldd	r23, Y+32	; 0x20
     f64:	89 a1       	ldd	r24, Y+33	; 0x21
     f66:	9a a1       	ldd	r25, Y+34	; 0x22
     f68:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	98 a7       	std	Y+40, r25	; 0x28
     f7e:	8f a3       	std	Y+39, r24	; 0x27
     f80:	0f c0       	rjmp	.+30     	; 0xfa0 <motor_encoder_calib+0x300>
     f82:	80 e9       	ldi	r24, 0x90	; 144
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	9a a7       	std	Y+42, r25	; 0x2a
     f88:	89 a7       	std	Y+41, r24	; 0x29
     f8a:	89 a5       	ldd	r24, Y+41	; 0x29
     f8c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <motor_encoder_calib+0x2ee>
     f92:	9a a7       	std	Y+42, r25	; 0x2a
     f94:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f96:	8f a1       	ldd	r24, Y+39	; 0x27
     f98:	98 a5       	ldd	r25, Y+40	; 0x28
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	98 a7       	std	Y+40, r25	; 0x28
     f9e:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa0:	8f a1       	ldd	r24, Y+39	; 0x27
     fa2:	98 a5       	ldd	r25, Y+40	; 0x28
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	69 f7       	brne	.-38     	; 0xf82 <motor_encoder_calib+0x2e2>
     fa8:	14 c0       	rjmp	.+40     	; 0xfd2 <motor_encoder_calib+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     faa:	6b a1       	ldd	r22, Y+35	; 0x23
     fac:	7c a1       	ldd	r23, Y+36	; 0x24
     fae:	8d a1       	ldd	r24, Y+37	; 0x25
     fb0:	9e a1       	ldd	r25, Y+38	; 0x26
     fb2:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	98 a7       	std	Y+40, r25	; 0x28
     fbc:	8f a3       	std	Y+39, r24	; 0x27
     fbe:	8f a1       	ldd	r24, Y+39	; 0x27
     fc0:	98 a5       	ldd	r25, Y+40	; 0x28
     fc2:	9c a7       	std	Y+44, r25	; 0x2c
     fc4:	8b a7       	std	Y+43, r24	; 0x2b
     fc6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fc8:	9c a5       	ldd	r25, Y+44	; 0x2c
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <motor_encoder_calib+0x32a>
     fce:	9c a7       	std	Y+44, r25	; 0x2c
     fd0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	motor_speed(5);
     fd2:	85 e0       	ldi	r24, 0x05	; 5
     fd4:	12 dc       	rcall	.-2012   	; 0x7fa <motor_speed>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e2       	ldi	r26, 0x20	; 32
     fdc:	b1 e4       	ldi	r27, 0x41	; 65
     fde:	8d a7       	std	Y+45, r24	; 0x2d
     fe0:	9e a7       	std	Y+46, r25	; 0x2e
     fe2:	af a7       	std	Y+47, r26	; 0x2f
     fe4:	b8 ab       	std	Y+48, r27	; 0x30

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	4a e7       	ldi	r20, 0x7A	; 122
     fec:	55 e4       	ldi	r21, 0x45	; 69
     fee:	6d a5       	ldd	r22, Y+45	; 0x2d
     ff0:	7e a5       	ldd	r23, Y+46	; 0x2e
     ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff4:	98 a9       	ldd	r25, Y+48	; 0x30
     ff6:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	89 ab       	std	Y+49, r24	; 0x31
    1000:	9a ab       	std	Y+50, r25	; 0x32
    1002:	ab ab       	std	Y+51, r26	; 0x33
    1004:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	69 a9       	ldd	r22, Y+49	; 0x31
    1010:	7a a9       	ldd	r23, Y+50	; 0x32
    1012:	8b a9       	ldd	r24, Y+51	; 0x33
    1014:	9c a9       	ldd	r25, Y+52	; 0x34
    1016:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <motor_encoder_calib+0x388>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9e ab       	std	Y+54, r25	; 0x36
    1024:	8d ab       	std	Y+53, r24	; 0x35
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <motor_encoder_calib+0x406>
	else if (__tmp > 65535)
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	4f e7       	ldi	r20, 0x7F	; 127
    102e:	57 e4       	ldi	r21, 0x47	; 71
    1030:	69 a9       	ldd	r22, Y+49	; 0x31
    1032:	7a a9       	ldd	r23, Y+50	; 0x32
    1034:	8b a9       	ldd	r24, Y+51	; 0x33
    1036:	9c a9       	ldd	r25, Y+52	; 0x34
    1038:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
    103c:	18 16       	cp	r1, r24
    103e:	4c f5       	brge	.+82     	; 0x1092 <motor_encoder_calib+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e2       	ldi	r20, 0x20	; 32
    1046:	51 e4       	ldi	r21, 0x41	; 65
    1048:	6d a5       	ldd	r22, Y+45	; 0x2d
    104a:	7e a5       	ldd	r23, Y+46	; 0x2e
    104c:	8f a5       	ldd	r24, Y+47	; 0x2f
    104e:	98 a9       	ldd	r25, Y+48	; 0x30
    1050:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9e ab       	std	Y+54, r25	; 0x36
    1066:	8d ab       	std	Y+53, r24	; 0x35
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <motor_encoder_calib+0x3e8>
    106a:	80 e9       	ldi	r24, 0x90	; 144
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	98 af       	std	Y+56, r25	; 0x38
    1070:	8f ab       	std	Y+55, r24	; 0x37
    1072:	8f a9       	ldd	r24, Y+55	; 0x37
    1074:	98 ad       	ldd	r25, Y+56	; 0x38
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <motor_encoder_calib+0x3d6>
    107a:	98 af       	std	Y+56, r25	; 0x38
    107c:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	8d a9       	ldd	r24, Y+53	; 0x35
    1080:	9e a9       	ldd	r25, Y+54	; 0x36
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9e ab       	std	Y+54, r25	; 0x36
    1086:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	8d a9       	ldd	r24, Y+53	; 0x35
    108a:	9e a9       	ldd	r25, Y+54	; 0x36
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f7       	brne	.-38     	; 0x106a <motor_encoder_calib+0x3ca>
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <motor_encoder_calib+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1092:	69 a9       	ldd	r22, Y+49	; 0x31
    1094:	7a a9       	ldd	r23, Y+50	; 0x32
    1096:	8b a9       	ldd	r24, Y+51	; 0x33
    1098:	9c a9       	ldd	r25, Y+52	; 0x34
    109a:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9e ab       	std	Y+54, r25	; 0x36
    10a4:	8d ab       	std	Y+53, r24	; 0x35
    10a6:	8d a9       	ldd	r24, Y+53	; 0x35
    10a8:	9e a9       	ldd	r25, Y+54	; 0x36
    10aa:	9a af       	std	Y+58, r25	; 0x3a
    10ac:	89 af       	std	Y+57, r24	; 0x39
    10ae:	89 ad       	ldd	r24, Y+57	; 0x39
    10b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <motor_encoder_calib+0x412>
    10b6:	9a af       	std	Y+58, r25	; 0x3a
    10b8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	last_encoder = motor_encoder_read();
    10ba:	17 d2       	rcall	.+1070   	; 0x14ea <motor_encoder_read>
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
	printf("%i \n", last_encoder);
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	8f 93       	push	r24
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	8f 93       	push	r24
    10c8:	87 e0       	ldi	r24, 0x07	; 7
    10ca:	92 e0       	ldi	r25, 0x02	; 2
    10cc:	89 2f       	mov	r24, r25
    10ce:	8f 93       	push	r24
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	8f 93       	push	r24
    10d6:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <printf>
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
	while(motor_encoder_read() != last_encoder){				
    10e2:	c9 c0       	rjmp	.+402    	; 0x1276 <motor_encoder_calib+0x5d6>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e2       	ldi	r26, 0x20	; 32
    10ea:	b1 e4       	ldi	r27, 0x41	; 65
    10ec:	8b af       	std	Y+59, r24	; 0x3b
    10ee:	9c af       	std	Y+60, r25	; 0x3c
    10f0:	ad af       	std	Y+61, r26	; 0x3d
    10f2:	be af       	std	Y+62, r27	; 0x3e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10f4:	8e 01       	movw	r16, r28
    10f6:	01 5c       	subi	r16, 0xC1	; 193
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a e7       	ldi	r20, 0x7A	; 122
    1100:	55 e4       	ldi	r21, 0x45	; 69
    1102:	6b ad       	ldd	r22, Y+59	; 0x3b
    1104:	7c ad       	ldd	r23, Y+60	; 0x3c
    1106:	8d ad       	ldd	r24, Y+61	; 0x3d
    1108:	9e ad       	ldd	r25, Y+62	; 0x3e
    110a:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	f8 01       	movw	r30, r16
    1114:	80 83       	st	Z, r24
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	a2 83       	std	Z+2, r26	; 0x02
    111a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    111c:	ce 01       	movw	r24, r28
    111e:	cf 96       	adiw	r24, 0x3f	; 63
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e8       	ldi	r20, 0x80	; 128
    1126:	5f e3       	ldi	r21, 0x3F	; 63
    1128:	fc 01       	movw	r30, r24
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
    1136:	88 23       	and	r24, r24
    1138:	4c f4       	brge	.+18     	; 0x114c <motor_encoder_calib+0x4ac>
		__ticks = 1;
    113a:	ce 01       	movw	r24, r28
    113c:	8d 5b       	subi	r24, 0xBD	; 189
    113e:	9f 4f       	sbci	r25, 0xFF	; 255
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	fc 01       	movw	r30, r24
    1146:	31 83       	std	Z+1, r19	; 0x01
    1148:	20 83       	st	Z, r18
    114a:	67 c0       	rjmp	.+206    	; 0x121a <motor_encoder_calib+0x57a>
	else if (__tmp > 65535)
    114c:	ce 01       	movw	r24, r28
    114e:	cf 96       	adiw	r24, 0x3f	; 63
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	3f ef       	ldi	r19, 0xFF	; 255
    1154:	4f e7       	ldi	r20, 0x7F	; 127
    1156:	57 e4       	ldi	r21, 0x47	; 71
    1158:	fc 01       	movw	r30, r24
    115a:	60 81       	ld	r22, Z
    115c:	71 81       	ldd	r23, Z+1	; 0x01
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
    1166:	18 16       	cp	r1, r24
    1168:	0c f0       	brlt	.+2      	; 0x116c <motor_encoder_calib+0x4cc>
    116a:	46 c0       	rjmp	.+140    	; 0x11f8 <motor_encoder_calib+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	6b ad       	ldd	r22, Y+59	; 0x3b
    1176:	7c ad       	ldd	r23, Y+60	; 0x3c
    1178:	8d ad       	ldd	r24, Y+61	; 0x3d
    117a:	9e ad       	ldd	r25, Y+62	; 0x3e
    117c:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	8e 01       	movw	r16, r28
    1186:	0d 5b       	subi	r16, 0xBD	; 189
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
    119c:	24 c0       	rjmp	.+72     	; 0x11e6 <motor_encoder_calib+0x546>
    119e:	ce 01       	movw	r24, r28
    11a0:	8b 5b       	subi	r24, 0xBB	; 187
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	20 e9       	ldi	r18, 0x90	; 144
    11a6:	31 e0       	ldi	r19, 0x01	; 1
    11a8:	fc 01       	movw	r30, r24
    11aa:	31 83       	std	Z+1, r19	; 0x01
    11ac:	20 83       	st	Z, r18
    11ae:	ce 01       	movw	r24, r28
    11b0:	8b 5b       	subi	r24, 0xBB	; 187
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <motor_encoder_calib+0x51a>
    11be:	9e 01       	movw	r18, r28
    11c0:	2b 5b       	subi	r18, 0xBB	; 187
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	f9 01       	movw	r30, r18
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ca:	ce 01       	movw	r24, r28
    11cc:	8d 5b       	subi	r24, 0xBD	; 189
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	9e 01       	movw	r18, r28
    11d2:	2d 5b       	subi	r18, 0xBD	; 189
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	f9 01       	movw	r30, r18
    11d8:	20 81       	ld	r18, Z
    11da:	31 81       	ldd	r19, Z+1	; 0x01
    11dc:	21 50       	subi	r18, 0x01	; 1
    11de:	31 09       	sbc	r19, r1
    11e0:	fc 01       	movw	r30, r24
    11e2:	31 83       	std	Z+1, r19	; 0x01
    11e4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	ce 01       	movw	r24, r28
    11e8:	8d 5b       	subi	r24, 0xBD	; 189
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	a1 f6       	brne	.-88     	; 0x119e <motor_encoder_calib+0x4fe>
    11f6:	2b c0       	rjmp	.+86     	; 0x124e <motor_encoder_calib+0x5ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	8e 01       	movw	r16, r28
    11fa:	0d 5b       	subi	r16, 0xBD	; 189
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	ce 01       	movw	r24, r28
    1200:	cf 96       	adiw	r24, 0x3f	; 63
    1202:	fc 01       	movw	r30, r24
    1204:	60 81       	ld	r22, Z
    1206:	71 81       	ldd	r23, Z+1	; 0x01
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	f8 01       	movw	r30, r16
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24
    121a:	ce 01       	movw	r24, r28
    121c:	89 5b       	subi	r24, 0xB9	; 185
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	9e 01       	movw	r18, r28
    1222:	2d 5b       	subi	r18, 0xBD	; 189
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	f9 01       	movw	r30, r18
    1228:	20 81       	ld	r18, Z
    122a:	31 81       	ldd	r19, Z+1	; 0x01
    122c:	fc 01       	movw	r30, r24
    122e:	31 83       	std	Z+1, r19	; 0x01
    1230:	20 83       	st	Z, r18
    1232:	ce 01       	movw	r24, r28
    1234:	89 5b       	subi	r24, 0xB9	; 185
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <motor_encoder_calib+0x59e>
    1242:	9e 01       	movw	r18, r28
    1244:	29 5b       	subi	r18, 0xB9	; 185
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	f9 01       	movw	r30, r18
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	80 83       	st	Z, r24
		_delay_ms(10);
		last_encoder = motor_encoder_read();
    124e:	4d d1       	rcall	.+666    	; 0x14ea <motor_encoder_read>
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
		printf("%i \n", last_encoder);
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	8f 93       	push	r24
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	8f 93       	push	r24
    125c:	87 e0       	ldi	r24, 0x07	; 7
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	89 2f       	mov	r24, r25
    1262:	8f 93       	push	r24
    1264:	87 e0       	ldi	r24, 0x07	; 7
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	8f 93       	push	r24
    126a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <printf>
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
	_delay_ms(200);
	motor_speed(5);
	_delay_ms(10);
	last_encoder = motor_encoder_read();
	printf("%i \n", last_encoder);
	while(motor_encoder_read() != last_encoder){				
    1276:	39 d1       	rcall	.+626    	; 0x14ea <motor_encoder_read>
    1278:	9c 01       	movw	r18, r24
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	28 17       	cp	r18, r24
    1280:	39 07       	cpc	r19, r25
    1282:	09 f0       	breq	.+2      	; 0x1286 <motor_encoder_calib+0x5e6>
    1284:	2f cf       	rjmp	.-418    	; 0x10e4 <motor_encoder_calib+0x444>
		_delay_ms(10);
		last_encoder = motor_encoder_read();
		printf("%i \n", last_encoder);
	}
	max = -last_encoder;
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	91 95       	neg	r25
    128c:	81 95       	neg	r24
    128e:	91 09       	sbc	r25, r1
    1290:	90 93 0e 02 	sts	0x020E, r25
    1294:	80 93 0d 02 	sts	0x020D, r24
	motor_encoder_reset();
    1298:	12 d0       	rcall	.+36     	; 0x12be <motor_encoder_reset>
	motor_speed(50);
    129a:	82 e3       	ldi	r24, 0x32	; 50
    129c:	ae da       	rcall	.-2724   	; 0x7fa <motor_speed>
	return max;
    129e:	80 91 0d 02 	lds	r24, 0x020D
    12a2:	90 91 0e 02 	lds	r25, 0x020E
}
    12a6:	c8 5b       	subi	r28, 0xB8	; 184
    12a8:	df 4f       	sbci	r29, 0xFF	; 255
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <motor_encoder_reset>:
void motor_encoder_reset(){
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	a0 97       	sbiw	r28, 0x20	; 32
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
	set_bit(DDRH,DDH6);				//sets data direction of RST
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	21 e0       	ldi	r18, 0x01	; 1
    12d8:	31 e0       	ldi	r19, 0x01	; 1
    12da:	f9 01       	movw	r30, r18
    12dc:	20 81       	ld	r18, Z
    12de:	20 64       	ori	r18, 0x40	; 64
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18
	clear_bit(PORTH,PORTH6);		//resets by pulling RST low
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	22 e0       	ldi	r18, 0x02	; 2
    12ea:	31 e0       	ldi	r19, 0x01	; 1
    12ec:	f9 01       	movw	r30, r18
    12ee:	20 81       	ld	r18, Z
    12f0:	2f 7b       	andi	r18, 0xBF	; 191
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 83       	st	Z, r18
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a0 ea       	ldi	r26, 0xA0	; 160
    12fc:	b1 e4       	ldi	r27, 0x41	; 65
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	ab 83       	std	Y+3, r26	; 0x03
    1304:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1306:	2b ea       	ldi	r18, 0xAB	; 171
    1308:	3a ea       	ldi	r19, 0xAA	; 170
    130a:	4a ea       	ldi	r20, 0xAA	; 170
    130c:	50 e4       	ldi	r21, 0x40	; 64
    130e:	69 81       	ldd	r22, Y+1	; 0x01
    1310:	7a 81       	ldd	r23, Y+2	; 0x02
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	af 83       	std	Y+7, r26	; 0x07
    1324:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	50 e4       	ldi	r21, 0x40	; 64
    132e:	69 81       	ldd	r22, Y+1	; 0x01
    1330:	7a 81       	ldd	r23, Y+2	; 0x02
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	89 87       	std	Y+9, r24	; 0x09
    1340:	9a 87       	std	Y+10, r25	; 0x0a
    1342:	ab 87       	std	Y+11, r26	; 0x0b
    1344:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e8       	ldi	r20, 0x80	; 128
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	6d 81       	ldd	r22, Y+5	; 0x05
    1350:	7e 81       	ldd	r23, Y+6	; 0x06
    1352:	8f 81       	ldd	r24, Y+7	; 0x07
    1354:	98 85       	ldd	r25, Y+8	; 0x08
    1356:	59 d7       	rcall	.+3762   	; 0x220a <__cmpsf2>
    1358:	88 23       	and	r24, r24
    135a:	1c f4       	brge	.+6      	; 0x1362 <motor_encoder_reset+0xa4>
		__ticks = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	8d 87       	std	Y+13, r24	; 0x0d
    1360:	ac c0       	rjmp	.+344    	; 0x14ba <motor_encoder_reset+0x1fc>
	else if (__tmp2 > 65535)
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	69 85       	ldd	r22, Y+9	; 0x09
    136c:	7a 85       	ldd	r23, Y+10	; 0x0a
    136e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1370:	9c 85       	ldd	r25, Y+12	; 0x0c
    1372:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
    1376:	18 16       	cp	r1, r24
    1378:	0c f0       	brlt	.+2      	; 0x137c <motor_encoder_reset+0xbe>
    137a:	77 c0       	rjmp	.+238    	; 0x146a <motor_encoder_reset+0x1ac>
	{
		_delay_ms(__us / 1000.0);
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	4a e7       	ldi	r20, 0x7A	; 122
    1382:	54 e4       	ldi	r21, 0x44	; 68
    1384:	69 81       	ldd	r22, Y+1	; 0x01
    1386:	7a 81       	ldd	r23, Y+2	; 0x02
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	42 d7       	rcall	.+3716   	; 0x2212 <__divsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	8e 87       	std	Y+14, r24	; 0x0e
    1394:	9f 87       	std	Y+15, r25	; 0x0f
    1396:	a8 8b       	std	Y+16, r26	; 0x10
    1398:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	4a e7       	ldi	r20, 0x7A	; 122
    13a0:	55 e4       	ldi	r21, 0x45	; 69
    13a2:	6e 85       	ldd	r22, Y+14	; 0x0e
    13a4:	7f 85       	ldd	r23, Y+15	; 0x0f
    13a6:	88 89       	ldd	r24, Y+16	; 0x10
    13a8:	99 89       	ldd	r25, Y+17	; 0x11
    13aa:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8a 8b       	std	Y+18, r24	; 0x12
    13b4:	9b 8b       	std	Y+19, r25	; 0x13
    13b6:	ac 8b       	std	Y+20, r26	; 0x14
    13b8:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e8       	ldi	r20, 0x80	; 128
    13c0:	5f e3       	ldi	r21, 0x3F	; 63
    13c2:	6a 89       	ldd	r22, Y+18	; 0x12
    13c4:	7b 89       	ldd	r23, Y+19	; 0x13
    13c6:	8c 89       	ldd	r24, Y+20	; 0x14
    13c8:	9d 89       	ldd	r25, Y+21	; 0x15
    13ca:	1f d7       	rcall	.+3646   	; 0x220a <__cmpsf2>
    13cc:	88 23       	and	r24, r24
    13ce:	2c f4       	brge	.+10     	; 0x13da <motor_encoder_reset+0x11c>
		__ticks = 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9f 8b       	std	Y+23, r25	; 0x17
    13d6:	8e 8b       	std	Y+22, r24	; 0x16
    13d8:	3d c0       	rjmp	.+122    	; 0x1454 <motor_encoder_reset+0x196>
	else if (__tmp > 65535)
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	6a 89       	ldd	r22, Y+18	; 0x12
    13e4:	7b 89       	ldd	r23, Y+19	; 0x13
    13e6:	8c 89       	ldd	r24, Y+20	; 0x14
    13e8:	9d 89       	ldd	r25, Y+21	; 0x15
    13ea:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
    13ee:	18 16       	cp	r1, r24
    13f0:	44 f5       	brge	.+80     	; 0x1442 <motor_encoder_reset+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	6e 85       	ldd	r22, Y+14	; 0x0e
    13fc:	7f 85       	ldd	r23, Y+15	; 0x0f
    13fe:	88 89       	ldd	r24, Y+16	; 0x10
    1400:	99 89       	ldd	r25, Y+17	; 0x11
    1402:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	bc 01       	movw	r22, r24
    140c:	cd 01       	movw	r24, r26
    140e:	6e d7       	rcall	.+3804   	; 0x22ec <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9f 8b       	std	Y+23, r25	; 0x17
    1416:	8e 8b       	std	Y+22, r24	; 0x16
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <motor_encoder_reset+0x17a>
    141a:	80 e9       	ldi	r24, 0x90	; 144
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	99 8f       	std	Y+25, r25	; 0x19
    1420:	88 8f       	std	Y+24, r24	; 0x18
    1422:	88 8d       	ldd	r24, Y+24	; 0x18
    1424:	99 8d       	ldd	r25, Y+25	; 0x19
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <motor_encoder_reset+0x168>
    142a:	99 8f       	std	Y+25, r25	; 0x19
    142c:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142e:	8e 89       	ldd	r24, Y+22	; 0x16
    1430:	9f 89       	ldd	r25, Y+23	; 0x17
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9f 8b       	std	Y+23, r25	; 0x17
    1436:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1438:	8e 89       	ldd	r24, Y+22	; 0x16
    143a:	9f 89       	ldd	r25, Y+23	; 0x17
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f7       	brne	.-38     	; 0x141a <motor_encoder_reset+0x15c>
    1440:	3c c0       	rjmp	.+120    	; 0x14ba <motor_encoder_reset+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1442:	6a 89       	ldd	r22, Y+18	; 0x12
    1444:	7b 89       	ldd	r23, Y+19	; 0x13
    1446:	8c 89       	ldd	r24, Y+20	; 0x14
    1448:	9d 89       	ldd	r25, Y+21	; 0x15
    144a:	50 d7       	rcall	.+3744   	; 0x22ec <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9f 8b       	std	Y+23, r25	; 0x17
    1452:	8e 8b       	std	Y+22, r24	; 0x16
    1454:	8e 89       	ldd	r24, Y+22	; 0x16
    1456:	9f 89       	ldd	r25, Y+23	; 0x17
    1458:	9b 8f       	std	Y+27, r25	; 0x1b
    145a:	8a 8f       	std	Y+26, r24	; 0x1a
    145c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    145e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <motor_encoder_reset+0x1a2>
    1464:	9b 8f       	std	Y+27, r25	; 0x1b
    1466:	8a 8f       	std	Y+26, r24	; 0x1a
    1468:	28 c0       	rjmp	.+80     	; 0x14ba <motor_encoder_reset+0x1fc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	53 e4       	ldi	r21, 0x43	; 67
    1472:	6d 81       	ldd	r22, Y+5	; 0x05
    1474:	7e 81       	ldd	r23, Y+6	; 0x06
    1476:	8f 81       	ldd	r24, Y+7	; 0x07
    1478:	98 85       	ldd	r25, Y+8	; 0x08
    147a:	0e 94 a7 12 	call	0x254e	; 0x254e <__gesf2>
    147e:	18 16       	cp	r1, r24
    1480:	a4 f4       	brge	.+40     	; 0x14aa <motor_encoder_reset+0x1ec>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1482:	69 85       	ldd	r22, Y+9	; 0x09
    1484:	7a 85       	ldd	r23, Y+10	; 0x0a
    1486:	8b 85       	ldd	r24, Y+11	; 0x0b
    1488:	9c 85       	ldd	r25, Y+12	; 0x0c
    148a:	30 d7       	rcall	.+3680   	; 0x22ec <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9d 8f       	std	Y+29, r25	; 0x1d
    1492:	8c 8f       	std	Y+28, r24	; 0x1c
    1494:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1496:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1498:	9f 8f       	std	Y+31, r25	; 0x1f
    149a:	8e 8f       	std	Y+30, r24	; 0x1e
    149c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    149e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <motor_encoder_reset+0x1e2>
    14a4:	9f 8f       	std	Y+31, r25	; 0x1f
    14a6:	8e 8f       	std	Y+30, r24	; 0x1e
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <motor_encoder_reset+0x208>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14aa:	6d 81       	ldd	r22, Y+5	; 0x05
    14ac:	7e 81       	ldd	r23, Y+6	; 0x06
    14ae:	8f 81       	ldd	r24, Y+7	; 0x07
    14b0:	98 85       	ldd	r25, Y+8	; 0x08
    14b2:	1c d7       	rcall	.+3640   	; 0x22ec <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	8d 87       	std	Y+13, r24	; 0x0d
    14ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    14bc:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14be:	88 a1       	ldd	r24, Y+32	; 0x20
    14c0:	8a 95       	dec	r24
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <motor_encoder_reset+0x202>
    14c4:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(20);
	set_bit(PORTH, PORTH6);			//sets RST high
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	22 e0       	ldi	r18, 0x02	; 2
    14cc:	31 e0       	ldi	r19, 0x01	; 1
    14ce:	f9 01       	movw	r30, r18
    14d0:	20 81       	ld	r18, Z
    14d2:	20 64       	ori	r18, 0x40	; 64
    14d4:	fc 01       	movw	r30, r24
    14d6:	20 83       	st	Z, r18
}
    14d8:	a0 96       	adiw	r28, 0x20	; 32
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <motor_encoder_read>:
int16_t motor_encoder_read(){
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	c2 54       	subi	r28, 0x42	; 66
    14f4:	d1 09       	sbc	r29, r1
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
	motor_encoder_enable(1);		//enable encoder
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	a5 db       	rcall	.-2230   	; 0xc4e <motor_encoder_enable>
	set_bit(DDRH, DDH3);			//sets data direction of SEL
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	21 e0       	ldi	r18, 0x01	; 1
    150a:	31 e0       	ldi	r19, 0x01	; 1
    150c:	f9 01       	movw	r30, r18
    150e:	20 81       	ld	r18, Z
    1510:	28 60       	ori	r18, 0x08	; 8
    1512:	fc 01       	movw	r30, r24
    1514:	20 83       	st	Z, r18
	clear_bit(PORTH, PORTH3);		//pulls SEL low to get high bits
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	22 e0       	ldi	r18, 0x02	; 2
    151c:	31 e0       	ldi	r19, 0x01	; 1
    151e:	f9 01       	movw	r30, r18
    1520:	20 81       	ld	r18, Z
    1522:	27 7f       	andi	r18, 0xF7	; 247
    1524:	fc 01       	movw	r30, r24
    1526:	20 83       	st	Z, r18
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 ea       	ldi	r26, 0xA0	; 160
    152e:	b1 e4       	ldi	r27, 0x41	; 65
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	ad 83       	std	Y+5, r26	; 0x05
    1536:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1538:	2b ea       	ldi	r18, 0xAB	; 171
    153a:	3a ea       	ldi	r19, 0xAA	; 170
    153c:	4a ea       	ldi	r20, 0xAA	; 170
    153e:	50 e4       	ldi	r21, 0x40	; 64
    1540:	6b 81       	ldd	r22, Y+3	; 0x03
    1542:	7c 81       	ldd	r23, Y+4	; 0x04
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	0e 94 ab 12 	call	0x2556	; 0x2556 <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8f 83       	std	Y+7, r24	; 0x07
    1552:	98 87       	std	Y+8, r25	; 0x08
    1554:	a9 87       	std	Y+9, r26	; 0x09
    1556:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	50 e4       	ldi	r21, 0x40	; 64
    1560:	6b 81       	ldd	r22, Y+3	; 0x03
    1562:	7c 81       	ldd	r23, Y+4	; 0x04
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	f6 d7       	rcall	.+4076   	; 0x2556 <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	8b 87       	std	Y+11, r24	; 0x0b
    1570:	9c 87       	std	Y+12, r25	; 0x0c
    1572:	ad 87       	std	Y+13, r26	; 0x0d
    1574:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	6f 81       	ldd	r22, Y+7	; 0x07
    1580:	78 85       	ldd	r23, Y+8	; 0x08
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	41 d6       	rcall	.+3202   	; 0x220a <__cmpsf2>
    1588:	88 23       	and	r24, r24
    158a:	1c f4       	brge	.+6      	; 0x1592 <motor_encoder_read+0xa8>
		__ticks = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	8f 87       	std	Y+15, r24	; 0x0f
    1590:	a7 c0       	rjmp	.+334    	; 0x16e0 <motor_encoder_read+0x1f6>
	else if (__tmp2 > 65535)
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	4f e7       	ldi	r20, 0x7F	; 127
    1598:	57 e4       	ldi	r21, 0x47	; 71
    159a:	6b 85       	ldd	r22, Y+11	; 0x0b
    159c:	7c 85       	ldd	r23, Y+12	; 0x0c
    159e:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a2:	d5 d7       	rcall	.+4010   	; 0x254e <__gesf2>
    15a4:	18 16       	cp	r1, r24
    15a6:	0c f0       	brlt	.+2      	; 0x15aa <motor_encoder_read+0xc0>
    15a8:	74 c0       	rjmp	.+232    	; 0x1692 <motor_encoder_read+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a e7       	ldi	r20, 0x7A	; 122
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	6b 81       	ldd	r22, Y+3	; 0x03
    15b4:	7c 81       	ldd	r23, Y+4	; 0x04
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	2b d6       	rcall	.+3158   	; 0x2212 <__divsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	88 8b       	std	Y+16, r24	; 0x10
    15c2:	99 8b       	std	Y+17, r25	; 0x11
    15c4:	aa 8b       	std	Y+18, r26	; 0x12
    15c6:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4a e7       	ldi	r20, 0x7A	; 122
    15ce:	55 e4       	ldi	r21, 0x45	; 69
    15d0:	68 89       	ldd	r22, Y+16	; 0x10
    15d2:	79 89       	ldd	r23, Y+17	; 0x11
    15d4:	8a 89       	ldd	r24, Y+18	; 0x12
    15d6:	9b 89       	ldd	r25, Y+19	; 0x13
    15d8:	be d7       	rcall	.+3964   	; 0x2556 <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8c 8b       	std	Y+20, r24	; 0x14
    15e0:	9d 8b       	std	Y+21, r25	; 0x15
    15e2:	ae 8b       	std	Y+22, r26	; 0x16
    15e4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e8       	ldi	r20, 0x80	; 128
    15ec:	5f e3       	ldi	r21, 0x3F	; 63
    15ee:	6c 89       	ldd	r22, Y+20	; 0x14
    15f0:	7d 89       	ldd	r23, Y+21	; 0x15
    15f2:	8e 89       	ldd	r24, Y+22	; 0x16
    15f4:	9f 89       	ldd	r25, Y+23	; 0x17
    15f6:	09 d6       	rcall	.+3090   	; 0x220a <__cmpsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <motor_encoder_read+0x11c>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	99 8f       	std	Y+25, r25	; 0x19
    1602:	88 8f       	std	Y+24, r24	; 0x18
    1604:	3b c0       	rjmp	.+118    	; 0x167c <motor_encoder_read+0x192>
	else if (__tmp > 65535)
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	6c 89       	ldd	r22, Y+20	; 0x14
    1610:	7d 89       	ldd	r23, Y+21	; 0x15
    1612:	8e 89       	ldd	r24, Y+22	; 0x16
    1614:	9f 89       	ldd	r25, Y+23	; 0x17
    1616:	9b d7       	rcall	.+3894   	; 0x254e <__gesf2>
    1618:	18 16       	cp	r1, r24
    161a:	3c f5       	brge	.+78     	; 0x166a <motor_encoder_read+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e2       	ldi	r20, 0x20	; 32
    1622:	51 e4       	ldi	r21, 0x41	; 65
    1624:	68 89       	ldd	r22, Y+16	; 0x10
    1626:	79 89       	ldd	r23, Y+17	; 0x11
    1628:	8a 89       	ldd	r24, Y+18	; 0x12
    162a:	9b 89       	ldd	r25, Y+19	; 0x13
    162c:	94 d7       	rcall	.+3880   	; 0x2556 <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	5a d6       	rcall	.+3252   	; 0x22ec <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	99 8f       	std	Y+25, r25	; 0x19
    163e:	88 8f       	std	Y+24, r24	; 0x18
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <motor_encoder_read+0x176>
    1642:	80 e9       	ldi	r24, 0x90	; 144
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	9b 8f       	std	Y+27, r25	; 0x1b
    1648:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    164a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    164c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <motor_encoder_read+0x164>
    1652:	9b 8f       	std	Y+27, r25	; 0x1b
    1654:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1656:	88 8d       	ldd	r24, Y+24	; 0x18
    1658:	99 8d       	ldd	r25, Y+25	; 0x19
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	99 8f       	std	Y+25, r25	; 0x19
    165e:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1660:	88 8d       	ldd	r24, Y+24	; 0x18
    1662:	99 8d       	ldd	r25, Y+25	; 0x19
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	69 f7       	brne	.-38     	; 0x1642 <motor_encoder_read+0x158>
    1668:	3b c0       	rjmp	.+118    	; 0x16e0 <motor_encoder_read+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166a:	6c 89       	ldd	r22, Y+20	; 0x14
    166c:	7d 89       	ldd	r23, Y+21	; 0x15
    166e:	8e 89       	ldd	r24, Y+22	; 0x16
    1670:	9f 89       	ldd	r25, Y+23	; 0x17
    1672:	3c d6       	rcall	.+3192   	; 0x22ec <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	99 8f       	std	Y+25, r25	; 0x19
    167a:	88 8f       	std	Y+24, r24	; 0x18
    167c:	88 8d       	ldd	r24, Y+24	; 0x18
    167e:	99 8d       	ldd	r25, Y+25	; 0x19
    1680:	9d 8f       	std	Y+29, r25	; 0x1d
    1682:	8c 8f       	std	Y+28, r24	; 0x1c
    1684:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1686:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <motor_encoder_read+0x19e>
    168c:	9d 8f       	std	Y+29, r25	; 0x1d
    168e:	8c 8f       	std	Y+28, r24	; 0x1c
    1690:	27 c0       	rjmp	.+78     	; 0x16e0 <motor_encoder_read+0x1f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	53 e4       	ldi	r21, 0x43	; 67
    169a:	6f 81       	ldd	r22, Y+7	; 0x07
    169c:	78 85       	ldd	r23, Y+8	; 0x08
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	55 d7       	rcall	.+3754   	; 0x254e <__gesf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	a4 f4       	brge	.+40     	; 0x16d0 <motor_encoder_read+0x1e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    16a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	1d d6       	rcall	.+3130   	; 0x22ec <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9f 8f       	std	Y+31, r25	; 0x1f
    16b8:	8e 8f       	std	Y+30, r24	; 0x1e
    16ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16be:	99 a3       	std	Y+33, r25	; 0x21
    16c0:	88 a3       	std	Y+32, r24	; 0x20
    16c2:	88 a1       	ldd	r24, Y+32	; 0x20
    16c4:	99 a1       	ldd	r25, Y+33	; 0x21
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <motor_encoder_read+0x1dc>
    16ca:	99 a3       	std	Y+33, r25	; 0x21
    16cc:	88 a3       	std	Y+32, r24	; 0x20
    16ce:	0e c0       	rjmp	.+28     	; 0x16ec <motor_encoder_read+0x202>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	09 d6       	rcall	.+3090   	; 0x22ec <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8f 87       	std	Y+15, r24	; 0x0f
    16e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e2:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16e4:	8a a1       	ldd	r24, Y+34	; 0x22
    16e6:	8a 95       	dec	r24
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <motor_encoder_read+0x1fc>
    16ea:	8a a3       	std	Y+34, r24	; 0x22
	_delay_us(20);					//wait 20 us
	int16_t data = (PINK<<8);		//loads high bits into data and left shifts 8 times
    16ec:	86 e0       	ldi	r24, 0x06	; 6
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	fc 01       	movw	r30, r24
    16f2:	80 81       	ld	r24, Z
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	98 2f       	mov	r25, r24
    16fa:	88 27       	eor	r24, r24
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
		
	set_bit(PORTH, PORTH3);			//sets SEL high to get low bits
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	91 e0       	ldi	r25, 0x01	; 1
    1704:	22 e0       	ldi	r18, 0x02	; 2
    1706:	31 e0       	ldi	r19, 0x01	; 1
    1708:	f9 01       	movw	r30, r18
    170a:	20 81       	ld	r18, Z
    170c:	28 60       	ori	r18, 0x08	; 8
    170e:	fc 01       	movw	r30, r24
    1710:	20 83       	st	Z, r18
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 ea       	ldi	r26, 0xA0	; 160
    1718:	b1 e4       	ldi	r27, 0x41	; 65
    171a:	8b a3       	std	Y+35, r24	; 0x23
    171c:	9c a3       	std	Y+36, r25	; 0x24
    171e:	ad a3       	std	Y+37, r26	; 0x25
    1720:	be a3       	std	Y+38, r27	; 0x26
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1722:	2b ea       	ldi	r18, 0xAB	; 171
    1724:	3a ea       	ldi	r19, 0xAA	; 170
    1726:	4a ea       	ldi	r20, 0xAA	; 170
    1728:	50 e4       	ldi	r21, 0x40	; 64
    172a:	6b a1       	ldd	r22, Y+35	; 0x23
    172c:	7c a1       	ldd	r23, Y+36	; 0x24
    172e:	8d a1       	ldd	r24, Y+37	; 0x25
    1730:	9e a1       	ldd	r25, Y+38	; 0x26
    1732:	11 d7       	rcall	.+3618   	; 0x2556 <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	8f a3       	std	Y+39, r24	; 0x27
    173a:	98 a7       	std	Y+40, r25	; 0x28
    173c:	a9 a7       	std	Y+41, r26	; 0x29
    173e:	ba a7       	std	Y+42, r27	; 0x2a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	50 e4       	ldi	r21, 0x40	; 64
    1748:	6b a1       	ldd	r22, Y+35	; 0x23
    174a:	7c a1       	ldd	r23, Y+36	; 0x24
    174c:	8d a1       	ldd	r24, Y+37	; 0x25
    174e:	9e a1       	ldd	r25, Y+38	; 0x26
    1750:	02 d7       	rcall	.+3588   	; 0x2556 <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8b a7       	std	Y+43, r24	; 0x2b
    1758:	9c a7       	std	Y+44, r25	; 0x2c
    175a:	ad a7       	std	Y+45, r26	; 0x2d
    175c:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e8       	ldi	r20, 0x80	; 128
    1764:	5f e3       	ldi	r21, 0x3F	; 63
    1766:	6f a1       	ldd	r22, Y+39	; 0x27
    1768:	78 a5       	ldd	r23, Y+40	; 0x28
    176a:	89 a5       	ldd	r24, Y+41	; 0x29
    176c:	9a a5       	ldd	r25, Y+42	; 0x2a
    176e:	4d d5       	rcall	.+2714   	; 0x220a <__cmpsf2>
    1770:	88 23       	and	r24, r24
    1772:	1c f4       	brge	.+6      	; 0x177a <motor_encoder_read+0x290>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	8f a7       	std	Y+47, r24	; 0x2f
    1778:	b3 c0       	rjmp	.+358    	; 0x18e0 <motor_encoder_read+0x3f6>
	else if (__tmp2 > 65535)
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	3f ef       	ldi	r19, 0xFF	; 255
    177e:	4f e7       	ldi	r20, 0x7F	; 127
    1780:	57 e4       	ldi	r21, 0x47	; 71
    1782:	6b a5       	ldd	r22, Y+43	; 0x2b
    1784:	7c a5       	ldd	r23, Y+44	; 0x2c
    1786:	8d a5       	ldd	r24, Y+45	; 0x2d
    1788:	9e a5       	ldd	r25, Y+46	; 0x2e
    178a:	e1 d6       	rcall	.+3522   	; 0x254e <__gesf2>
    178c:	18 16       	cp	r1, r24
    178e:	0c f0       	brlt	.+2      	; 0x1792 <motor_encoder_read+0x2a8>
    1790:	74 c0       	rjmp	.+232    	; 0x187a <motor_encoder_read+0x390>
	{
		_delay_ms(__us / 1000.0);
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a e7       	ldi	r20, 0x7A	; 122
    1798:	54 e4       	ldi	r21, 0x44	; 68
    179a:	6b a1       	ldd	r22, Y+35	; 0x23
    179c:	7c a1       	ldd	r23, Y+36	; 0x24
    179e:	8d a1       	ldd	r24, Y+37	; 0x25
    17a0:	9e a1       	ldd	r25, Y+38	; 0x26
    17a2:	37 d5       	rcall	.+2670   	; 0x2212 <__divsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	88 ab       	std	Y+48, r24	; 0x30
    17aa:	99 ab       	std	Y+49, r25	; 0x31
    17ac:	aa ab       	std	Y+50, r26	; 0x32
    17ae:	bb ab       	std	Y+51, r27	; 0x33

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4a e7       	ldi	r20, 0x7A	; 122
    17b6:	55 e4       	ldi	r21, 0x45	; 69
    17b8:	68 a9       	ldd	r22, Y+48	; 0x30
    17ba:	79 a9       	ldd	r23, Y+49	; 0x31
    17bc:	8a a9       	ldd	r24, Y+50	; 0x32
    17be:	9b a9       	ldd	r25, Y+51	; 0x33
    17c0:	ca d6       	rcall	.+3476   	; 0x2556 <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	8c ab       	std	Y+52, r24	; 0x34
    17c8:	9d ab       	std	Y+53, r25	; 0x35
    17ca:	ae ab       	std	Y+54, r26	; 0x36
    17cc:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e8       	ldi	r20, 0x80	; 128
    17d4:	5f e3       	ldi	r21, 0x3F	; 63
    17d6:	6c a9       	ldd	r22, Y+52	; 0x34
    17d8:	7d a9       	ldd	r23, Y+53	; 0x35
    17da:	8e a9       	ldd	r24, Y+54	; 0x36
    17dc:	9f a9       	ldd	r25, Y+55	; 0x37
    17de:	15 d5       	rcall	.+2602   	; 0x220a <__cmpsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	2c f4       	brge	.+10     	; 0x17ee <motor_encoder_read+0x304>
		__ticks = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	99 af       	std	Y+57, r25	; 0x39
    17ea:	88 af       	std	Y+56, r24	; 0x38
    17ec:	3b c0       	rjmp	.+118    	; 0x1864 <motor_encoder_read+0x37a>
	else if (__tmp > 65535)
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	6c a9       	ldd	r22, Y+52	; 0x34
    17f8:	7d a9       	ldd	r23, Y+53	; 0x35
    17fa:	8e a9       	ldd	r24, Y+54	; 0x36
    17fc:	9f a9       	ldd	r25, Y+55	; 0x37
    17fe:	a7 d6       	rcall	.+3406   	; 0x254e <__gesf2>
    1800:	18 16       	cp	r1, r24
    1802:	3c f5       	brge	.+78     	; 0x1852 <motor_encoder_read+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e2       	ldi	r20, 0x20	; 32
    180a:	51 e4       	ldi	r21, 0x41	; 65
    180c:	68 a9       	ldd	r22, Y+48	; 0x30
    180e:	79 a9       	ldd	r23, Y+49	; 0x31
    1810:	8a a9       	ldd	r24, Y+50	; 0x32
    1812:	9b a9       	ldd	r25, Y+51	; 0x33
    1814:	a0 d6       	rcall	.+3392   	; 0x2556 <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	66 d5       	rcall	.+2764   	; 0x22ec <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	99 af       	std	Y+57, r25	; 0x39
    1826:	88 af       	std	Y+56, r24	; 0x38
    1828:	0f c0       	rjmp	.+30     	; 0x1848 <motor_encoder_read+0x35e>
    182a:	80 e9       	ldi	r24, 0x90	; 144
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	9b af       	std	Y+59, r25	; 0x3b
    1830:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1832:	8a ad       	ldd	r24, Y+58	; 0x3a
    1834:	9b ad       	ldd	r25, Y+59	; 0x3b
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <motor_encoder_read+0x34c>
    183a:	9b af       	std	Y+59, r25	; 0x3b
    183c:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	88 ad       	ldd	r24, Y+56	; 0x38
    1840:	99 ad       	ldd	r25, Y+57	; 0x39
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	99 af       	std	Y+57, r25	; 0x39
    1846:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1848:	88 ad       	ldd	r24, Y+56	; 0x38
    184a:	99 ad       	ldd	r25, Y+57	; 0x39
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	69 f7       	brne	.-38     	; 0x182a <motor_encoder_read+0x340>
    1850:	47 c0       	rjmp	.+142    	; 0x18e0 <motor_encoder_read+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	6c a9       	ldd	r22, Y+52	; 0x34
    1854:	7d a9       	ldd	r23, Y+53	; 0x35
    1856:	8e a9       	ldd	r24, Y+54	; 0x36
    1858:	9f a9       	ldd	r25, Y+55	; 0x37
    185a:	48 d5       	rcall	.+2704   	; 0x22ec <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	99 af       	std	Y+57, r25	; 0x39
    1862:	88 af       	std	Y+56, r24	; 0x38
    1864:	88 ad       	ldd	r24, Y+56	; 0x38
    1866:	99 ad       	ldd	r25, Y+57	; 0x39
    1868:	9d af       	std	Y+61, r25	; 0x3d
    186a:	8c af       	std	Y+60, r24	; 0x3c
    186c:	8c ad       	ldd	r24, Y+60	; 0x3c
    186e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <motor_encoder_read+0x386>
    1874:	9d af       	std	Y+61, r25	; 0x3d
    1876:	8c af       	std	Y+60, r24	; 0x3c
    1878:	33 c0       	rjmp	.+102    	; 0x18e0 <motor_encoder_read+0x3f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	53 e4       	ldi	r21, 0x43	; 67
    1882:	6f a1       	ldd	r22, Y+39	; 0x27
    1884:	78 a5       	ldd	r23, Y+40	; 0x28
    1886:	89 a5       	ldd	r24, Y+41	; 0x29
    1888:	9a a5       	ldd	r25, Y+42	; 0x2a
    188a:	61 d6       	rcall	.+3266   	; 0x254e <__gesf2>
    188c:	18 16       	cp	r1, r24
    188e:	04 f5       	brge	.+64     	; 0x18d0 <motor_encoder_read+0x3e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1890:	6b a5       	ldd	r22, Y+43	; 0x2b
    1892:	7c a5       	ldd	r23, Y+44	; 0x2c
    1894:	8d a5       	ldd	r24, Y+45	; 0x2d
    1896:	9e a5       	ldd	r25, Y+46	; 0x2e
    1898:	29 d5       	rcall	.+2642   	; 0x22ec <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	9f af       	std	Y+63, r25	; 0x3f
    18a0:	8e af       	std	Y+62, r24	; 0x3e
    18a2:	ce 01       	movw	r24, r28
    18a4:	80 5c       	subi	r24, 0xC0	; 192
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	2e ad       	ldd	r18, Y+62	; 0x3e
    18aa:	3f ad       	ldd	r19, Y+63	; 0x3f
    18ac:	fc 01       	movw	r30, r24
    18ae:	31 83       	std	Z+1, r19	; 0x01
    18b0:	20 83       	st	Z, r18
    18b2:	ce 01       	movw	r24, r28
    18b4:	80 5c       	subi	r24, 0xC0	; 192
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	fc 01       	movw	r30, r24
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <motor_encoder_read+0x3d4>
    18c2:	9e 01       	movw	r18, r28
    18c4:	20 5c       	subi	r18, 0xC0	; 192
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
    18c8:	f9 01       	movw	r30, r18
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
    18ce:	1b c0       	rjmp	.+54     	; 0x1906 <motor_encoder_read+0x41c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18d0:	6f a1       	ldd	r22, Y+39	; 0x27
    18d2:	78 a5       	ldd	r23, Y+40	; 0x28
    18d4:	89 a5       	ldd	r24, Y+41	; 0x29
    18d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d8:	09 d5       	rcall	.+2578   	; 0x22ec <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	8f a7       	std	Y+47, r24	; 0x2f
    18e0:	ce 01       	movw	r24, r28
    18e2:	8e 5b       	subi	r24, 0xBE	; 190
    18e4:	9f 4f       	sbci	r25, 0xFF	; 255
    18e6:	2f a5       	ldd	r18, Y+47	; 0x2f
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18ec:	ce 01       	movw	r24, r28
    18ee:	8e 5b       	subi	r24, 0xBE	; 190
    18f0:	9f 4f       	sbci	r25, 0xFF	; 255
    18f2:	fc 01       	movw	r30, r24
    18f4:	80 81       	ld	r24, Z
    18f6:	28 2f       	mov	r18, r24
    18f8:	2a 95       	dec	r18
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <motor_encoder_read+0x40e>
    18fc:	ce 01       	movw	r24, r28
    18fe:	8e 5b       	subi	r24, 0xBE	; 190
    1900:	9f 4f       	sbci	r25, 0xFF	; 255
    1902:	fc 01       	movw	r30, r24
    1904:	20 83       	st	Z, r18
	_delay_us(20);					//wait 20 us
	data += PINK;					//add the least significant byte
    1906:	86 e0       	ldi	r24, 0x06	; 6
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	29 81       	ldd	r18, Y+1	; 0x01
    1914:	3a 81       	ldd	r19, Y+2	; 0x02
    1916:	82 0f       	add	r24, r18
    1918:	93 1f       	adc	r25, r19
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
	motor_encoder_enable(0);		//Turns the encoder off
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	96 d9       	rcall	.-3284   	; 0xc4e <motor_encoder_enable>
	
	return ((~data)+1);				//inverts the output
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	91 95       	neg	r25
    1928:	81 95       	neg	r24
    192a:	91 09       	sbc	r25, r1
}
    192c:	ce 5b       	subi	r28, 0xBE	; 190
    192e:	df 4f       	sbci	r29, 0xFF	; 255
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <solenoid_init>:
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	80 e3       	ldi	r24, 0x30	; 48
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	20 e3       	ldi	r18, 0x30	; 48
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	f9 01       	movw	r30, r18
    1952:	20 81       	ld	r18, Z
    1954:	22 60       	ori	r18, 0x02	; 2
    1956:	fc 01       	movw	r30, r24
    1958:	20 83       	st	Z, r18
    195a:	81 e3       	ldi	r24, 0x31	; 49
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	21 e3       	ldi	r18, 0x31	; 49
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	f9 01       	movw	r30, r18
    1964:	20 81       	ld	r18, Z
    1966:	22 60       	ori	r18, 0x02	; 2
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <solenoid_punch>:
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	2e 97       	sbiw	r28, 0x0e	; 14
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	81 e3       	ldi	r24, 0x31	; 49
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	21 e3       	ldi	r18, 0x31	; 49
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	f9 01       	movw	r30, r18
    1990:	20 81       	ld	r18, Z
    1992:	2d 7f       	andi	r18, 0xFD	; 253
    1994:	fc 01       	movw	r30, r24
    1996:	20 83       	st	Z, r18
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	ac e8       	ldi	r26, 0x8C	; 140
    199e:	b2 e4       	ldi	r27, 0x42	; 66
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	ab 83       	std	Y+3, r26	; 0x03
    19a6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a e7       	ldi	r20, 0x7A	; 122
    19ae:	55 e4       	ldi	r21, 0x45	; 69
    19b0:	69 81       	ldd	r22, Y+1	; 0x01
    19b2:	7a 81       	ldd	r23, Y+2	; 0x02
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	ce d5       	rcall	.+2972   	; 0x2556 <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	af 83       	std	Y+7, r26	; 0x07
    19c4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e8       	ldi	r20, 0x80	; 128
    19cc:	5f e3       	ldi	r21, 0x3F	; 63
    19ce:	6d 81       	ldd	r22, Y+5	; 0x05
    19d0:	7e 81       	ldd	r23, Y+6	; 0x06
    19d2:	8f 81       	ldd	r24, Y+7	; 0x07
    19d4:	98 85       	ldd	r25, Y+8	; 0x08
    19d6:	19 d4       	rcall	.+2098   	; 0x220a <__cmpsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <solenoid_punch+0x74>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9a 87       	std	Y+10, r25	; 0x0a
    19e2:	89 87       	std	Y+9, r24	; 0x09
    19e4:	3b c0       	rjmp	.+118    	; 0x1a5c <solenoid_punch+0xea>
	else if (__tmp > 65535)
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	6d 81       	ldd	r22, Y+5	; 0x05
    19f0:	7e 81       	ldd	r23, Y+6	; 0x06
    19f2:	8f 81       	ldd	r24, Y+7	; 0x07
    19f4:	98 85       	ldd	r25, Y+8	; 0x08
    19f6:	ab d5       	rcall	.+2902   	; 0x254e <__gesf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	3c f5       	brge	.+78     	; 0x1a4a <solenoid_punch+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e2       	ldi	r20, 0x20	; 32
    1a02:	51 e4       	ldi	r21, 0x41	; 65
    1a04:	69 81       	ldd	r22, Y+1	; 0x01
    1a06:	7a 81       	ldd	r23, Y+2	; 0x02
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	a4 d5       	rcall	.+2888   	; 0x2556 <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	6a d4       	rcall	.+2260   	; 0x22ec <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9a 87       	std	Y+10, r25	; 0x0a
    1a1e:	89 87       	std	Y+9, r24	; 0x09
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <solenoid_punch+0xce>
    1a22:	80 e9       	ldi	r24, 0x90	; 144
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	9c 87       	std	Y+12, r25	; 0x0c
    1a28:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <solenoid_punch+0xbc>
    1a32:	9c 87       	std	Y+12, r25	; 0x0c
    1a34:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	9a 87       	std	Y+10, r25	; 0x0a
    1a3e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <solenoid_punch+0xb0>
    1a48:	13 c0       	rjmp	.+38     	; 0x1a70 <solenoid_punch+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a50:	98 85       	ldd	r25, Y+8	; 0x08
    1a52:	4c d4       	rcall	.+2200   	; 0x22ec <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9a 87       	std	Y+10, r25	; 0x0a
    1a5a:	89 87       	std	Y+9, r24	; 0x09
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	9e 87       	std	Y+14, r25	; 0x0e
    1a62:	8d 87       	std	Y+13, r24	; 0x0d
    1a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <solenoid_punch+0xf6>
    1a6c:	9e 87       	std	Y+14, r25	; 0x0e
    1a6e:	8d 87       	std	Y+13, r24	; 0x0d
    1a70:	81 e3       	ldi	r24, 0x31	; 49
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	21 e3       	ldi	r18, 0x31	; 49
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	f9 01       	movw	r30, r18
    1a7a:	20 81       	ld	r18, Z
    1a7c:	22 60       	ori	r18, 0x02	; 2
    1a7e:	fc 01       	movw	r30, r24
    1a80:	20 83       	st	Z, r18
    1a82:	2e 96       	adiw	r28, 0x0e	; 14
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <spi_init>:
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	84 e2       	ldi	r24, 0x24	; 36
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	24 e2       	ldi	r18, 0x24	; 36
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	f9 01       	movw	r30, r18
    1aa6:	20 81       	ld	r18, Z
    1aa8:	21 60       	ori	r18, 0x01	; 1
    1aaa:	fc 01       	movw	r30, r24
    1aac:	20 83       	st	Z, r18
    1aae:	84 e2       	ldi	r24, 0x24	; 36
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	24 e2       	ldi	r18, 0x24	; 36
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	20 81       	ld	r18, Z
    1aba:	22 60       	ori	r18, 0x02	; 2
    1abc:	fc 01       	movw	r30, r24
    1abe:	20 83       	st	Z, r18
    1ac0:	84 e2       	ldi	r24, 0x24	; 36
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	24 e2       	ldi	r18, 0x24	; 36
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	f9 01       	movw	r30, r18
    1aca:	20 81       	ld	r18, Z
    1acc:	24 60       	ori	r18, 0x04	; 4
    1ace:	fc 01       	movw	r30, r24
    1ad0:	20 83       	st	Z, r18
    1ad2:	84 e2       	ldi	r24, 0x24	; 36
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	24 e2       	ldi	r18, 0x24	; 36
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	f9 01       	movw	r30, r18
    1adc:	20 81       	ld	r18, Z
    1ade:	27 7f       	andi	r18, 0xF7	; 247
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	20 83       	st	Z, r18
    1ae4:	85 e2       	ldi	r24, 0x25	; 37
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	25 e2       	ldi	r18, 0x25	; 37
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	f9 01       	movw	r30, r18
    1aee:	20 81       	ld	r18, Z
    1af0:	28 60       	ori	r18, 0x08	; 8
    1af2:	fc 01       	movw	r30, r24
    1af4:	20 83       	st	Z, r18
    1af6:	84 e2       	ldi	r24, 0x24	; 36
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	24 e2       	ldi	r18, 0x24	; 36
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	f9 01       	movw	r30, r18
    1b00:	20 81       	ld	r18, Z
    1b02:	20 68       	ori	r18, 0x80	; 128
    1b04:	fc 01       	movw	r30, r24
    1b06:	20 83       	st	Z, r18
    1b08:	8c e4       	ldi	r24, 0x4C	; 76
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	2c e4       	ldi	r18, 0x4C	; 76
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	f9 01       	movw	r30, r18
    1b12:	20 81       	ld	r18, Z
    1b14:	20 64       	ori	r18, 0x40	; 64
    1b16:	fc 01       	movw	r30, r24
    1b18:	20 83       	st	Z, r18
    1b1a:	8c e4       	ldi	r24, 0x4C	; 76
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	2c e4       	ldi	r18, 0x4C	; 76
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	f9 01       	movw	r30, r18
    1b24:	20 81       	ld	r18, Z
    1b26:	21 60       	ori	r18, 0x01	; 1
    1b28:	fc 01       	movw	r30, r24
    1b2a:	20 83       	st	Z, r18
    1b2c:	85 e2       	ldi	r24, 0x25	; 37
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	25 e2       	ldi	r18, 0x25	; 37
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	f9 01       	movw	r30, r18
    1b36:	20 81       	ld	r18, Z
    1b38:	21 60       	ori	r18, 0x01	; 1
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	20 83       	st	Z, r18
    1b3e:	8c e4       	ldi	r24, 0x4C	; 76
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	2c e4       	ldi	r18, 0x4C	; 76
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	f9 01       	movw	r30, r18
    1b48:	20 81       	ld	r18, Z
    1b4a:	20 61       	ori	r18, 0x10	; 16
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	20 83       	st	Z, r18
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	08 95       	ret

00001b56 <spi_transmit>:
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	1f 92       	push	r1
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	8e e4       	ldi	r24, 0x4E	; 78
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	29 81       	ldd	r18, Y+1	; 0x01
    1b68:	fc 01       	movw	r30, r24
    1b6a:	20 83       	st	Z, r18
    1b6c:	8d e4       	ldi	r24, 0x4D	; 77
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	fc 01       	movw	r30, r24
    1b72:	80 81       	ld	r24, Z
    1b74:	88 23       	and	r24, r24
    1b76:	d4 f7       	brge	.-12     	; 0x1b6c <spi_transmit+0x16>
    1b78:	8e e4       	ldi	r24, 0x4E	; 78
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	80 81       	ld	r24, Z
    1b80:	0f 90       	pop	r0
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <spi_select>:
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	85 e2       	ldi	r24, 0x25	; 37
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	25 e2       	ldi	r18, 0x25	; 37
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	f9 01       	movw	r30, r18
    1b9a:	20 81       	ld	r18, Z
    1b9c:	2f 77       	andi	r18, 0x7F	; 127
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	20 83       	st	Z, r18
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	08 95       	ret

00001ba8 <spi_deselect>:
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	85 e2       	ldi	r24, 0x25	; 37
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	25 e2       	ldi	r18, 0x25	; 37
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	f9 01       	movw	r30, r18
    1bba:	20 81       	ld	r18, Z
    1bbc:	20 68       	ori	r18, 0x80	; 128
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	20 83       	st	Z, r18
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <timer_pwm_init>:
	set_bit(TIMSK3, OCIE3A);		//Enables interrupt on timer 3 
}

void timer_PID_disable(){
	clear_bit(TIMSK3, OCIE3A);		//disables interrupt
}
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	80 e8       	ldi	r24, 0x80	; 128
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	20 e8       	ldi	r18, 0x80	; 128
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	f9 01       	movw	r30, r18
    1bda:	20 81       	ld	r18, Z
    1bdc:	2e 7f       	andi	r18, 0xFE	; 254
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 83       	st	Z, r18
    1be2:	80 e8       	ldi	r24, 0x80	; 128
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	20 e8       	ldi	r18, 0x80	; 128
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	f9 01       	movw	r30, r18
    1bec:	20 81       	ld	r18, Z
    1bee:	22 60       	ori	r18, 0x02	; 2
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 83       	st	Z, r18
    1bf4:	81 e8       	ldi	r24, 0x81	; 129
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	21 e8       	ldi	r18, 0x81	; 129
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	20 81       	ld	r18, Z
    1c00:	28 60       	ori	r18, 0x08	; 8
    1c02:	fc 01       	movw	r30, r24
    1c04:	20 83       	st	Z, r18
    1c06:	81 e8       	ldi	r24, 0x81	; 129
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	21 e8       	ldi	r18, 0x81	; 129
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	f9 01       	movw	r30, r18
    1c10:	20 81       	ld	r18, Z
    1c12:	20 61       	ori	r18, 0x10	; 16
    1c14:	fc 01       	movw	r30, r24
    1c16:	20 83       	st	Z, r18
    1c18:	86 e8       	ldi	r24, 0x86	; 134
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	20 e4       	ldi	r18, 0x40	; 64
    1c1e:	3c e9       	ldi	r19, 0x9C	; 156
    1c20:	fc 01       	movw	r30, r24
    1c22:	31 83       	std	Z+1, r19	; 0x01
    1c24:	20 83       	st	Z, r18
    1c26:	81 e8       	ldi	r24, 0x81	; 129
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	21 e8       	ldi	r18, 0x81	; 129
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	f9 01       	movw	r30, r18
    1c30:	20 81       	ld	r18, Z
    1c32:	2e 7f       	andi	r18, 0xFE	; 254
    1c34:	fc 01       	movw	r30, r24
    1c36:	20 83       	st	Z, r18
    1c38:	81 e8       	ldi	r24, 0x81	; 129
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	21 e8       	ldi	r18, 0x81	; 129
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	f9 01       	movw	r30, r18
    1c42:	20 81       	ld	r18, Z
    1c44:	22 60       	ori	r18, 0x02	; 2
    1c46:	fc 01       	movw	r30, r24
    1c48:	20 83       	st	Z, r18
    1c4a:	81 e8       	ldi	r24, 0x81	; 129
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	21 e8       	ldi	r18, 0x81	; 129
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	f9 01       	movw	r30, r18
    1c54:	20 81       	ld	r18, Z
    1c56:	2b 7f       	andi	r18, 0xFB	; 251
    1c58:	fc 01       	movw	r30, r24
    1c5a:	20 83       	st	Z, r18
    1c5c:	80 e8       	ldi	r24, 0x80	; 128
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	20 e8       	ldi	r18, 0x80	; 128
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	f9 01       	movw	r30, r18
    1c66:	20 81       	ld	r18, Z
    1c68:	2f 7b       	andi	r18, 0xBF	; 191
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	20 83       	st	Z, r18
    1c6e:	80 e8       	ldi	r24, 0x80	; 128
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	20 e8       	ldi	r18, 0x80	; 128
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	f9 01       	movw	r30, r18
    1c78:	20 81       	ld	r18, Z
    1c7a:	20 68       	ori	r18, 0x80	; 128
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	20 83       	st	Z, r18
    1c80:	84 e2       	ldi	r24, 0x24	; 36
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	24 e2       	ldi	r18, 0x24	; 36
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	f9 01       	movw	r30, r18
    1c8a:	20 81       	ld	r18, Z
    1c8c:	20 62       	ori	r18, 0x20	; 32
    1c8e:	fc 01       	movw	r30, r24
    1c90:	20 83       	st	Z, r18
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	08 95       	ret

00001c98 <timer_PID_init>:
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	80 e9       	ldi	r24, 0x90	; 144
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	20 e9       	ldi	r18, 0x90	; 144
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	f9 01       	movw	r30, r18
    1caa:	20 81       	ld	r18, Z
    1cac:	2e 7f       	andi	r18, 0xFE	; 254
    1cae:	fc 01       	movw	r30, r24
    1cb0:	20 83       	st	Z, r18
    1cb2:	80 e9       	ldi	r24, 0x90	; 144
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	20 e9       	ldi	r18, 0x90	; 144
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	f9 01       	movw	r30, r18
    1cbc:	20 81       	ld	r18, Z
    1cbe:	2d 7f       	andi	r18, 0xFD	; 253
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	20 83       	st	Z, r18
    1cc4:	81 e9       	ldi	r24, 0x91	; 145
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	21 e9       	ldi	r18, 0x91	; 145
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	f9 01       	movw	r30, r18
    1cce:	20 81       	ld	r18, Z
    1cd0:	28 60       	ori	r18, 0x08	; 8
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	20 83       	st	Z, r18
    1cd6:	81 e9       	ldi	r24, 0x91	; 145
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	21 e9       	ldi	r18, 0x91	; 145
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	f9 01       	movw	r30, r18
    1ce0:	20 81       	ld	r18, Z
    1ce2:	2f 7e       	andi	r18, 0xEF	; 239
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	20 83       	st	Z, r18
    1ce8:	88 e9       	ldi	r24, 0x98	; 152
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	2c e9       	ldi	r18, 0x9C	; 156
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	31 83       	std	Z+1, r19	; 0x01
    1cf4:	20 83       	st	Z, r18
    1cf6:	81 e9       	ldi	r24, 0x91	; 145
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	21 e9       	ldi	r18, 0x91	; 145
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	f9 01       	movw	r30, r18
    1d00:	20 81       	ld	r18, Z
    1d02:	21 60       	ori	r18, 0x01	; 1
    1d04:	fc 01       	movw	r30, r24
    1d06:	20 83       	st	Z, r18
    1d08:	81 e9       	ldi	r24, 0x91	; 145
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	21 e9       	ldi	r18, 0x91	; 145
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	f9 01       	movw	r30, r18
    1d12:	20 81       	ld	r18, Z
    1d14:	2d 7f       	andi	r18, 0xFD	; 253
    1d16:	fc 01       	movw	r30, r24
    1d18:	20 83       	st	Z, r18
    1d1a:	81 e9       	ldi	r24, 0x91	; 145
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	21 e9       	ldi	r18, 0x91	; 145
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	f9 01       	movw	r30, r18
    1d24:	20 81       	ld	r18, Z
    1d26:	24 60       	ori	r18, 0x04	; 4
    1d28:	fc 01       	movw	r30, r24
    1d2a:	20 83       	st	Z, r18
    1d2c:	81 e7       	ldi	r24, 0x71	; 113
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	21 e7       	ldi	r18, 0x71	; 113
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	f9 01       	movw	r30, r18
    1d36:	20 81       	ld	r18, Z
    1d38:	22 60       	ori	r18, 0x02	; 2
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	20 83       	st	Z, r18
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	08 95       	ret

00001d44 <timer_pwm_send_message>:



void timer_pwm_send_message(char d,uint8_t invert){
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <timer_pwm_send_message+0xa>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <timer_pwm_send_message+0xc>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	8d 83       	std	Y+5, r24	; 0x05
    1d56:	6e 83       	std	Y+6, r22	; 0x06
	if (d>100){
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	85 36       	cpi	r24, 0x65	; 101
    1d5c:	10 f0       	brcs	.+4      	; 0x1d62 <timer_pwm_send_message+0x1e>
		d=100;
    1d5e:	84 e6       	ldi	r24, 0x64	; 100
    1d60:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(d<0){
		d=0;
	}
	if (invert){
    1d62:	8e 81       	ldd	r24, Y+6	; 0x06
    1d64:	88 23       	and	r24, r24
    1d66:	31 f0       	breq	.+12     	; 0x1d74 <timer_pwm_send_message+0x30>
		
		d = (d-100)*-1;
    1d68:	94 e6       	ldi	r25, 0x64	; 100
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	29 2f       	mov	r18, r25
    1d6e:	28 1b       	sub	r18, r24
    1d70:	82 2f       	mov	r24, r18
    1d72:	8d 83       	std	Y+5, r24	; 0x05
	}
	double a = (((double)d/100.0)*1.2+0.9)/(T_MAX_PWM*1000.0);
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 e0       	ldi	r26, 0x00	; 0
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	e0 d2       	rcall	.+1472   	; 0x2344 <__floatunsisf>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	48 ec       	ldi	r20, 0xC8	; 200
    1d8e:	52 e4       	ldi	r21, 0x42	; 66
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	3e d2       	rcall	.+1148   	; 0x2212 <__divsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	2a e9       	ldi	r18, 0x9A	; 154
    1d9c:	39 e9       	ldi	r19, 0x99	; 153
    1d9e:	49 e9       	ldi	r20, 0x99	; 153
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	d7 d3       	rcall	.+1966   	; 0x2556 <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	26 e6       	ldi	r18, 0x66	; 102
    1dae:	36 e6       	ldi	r19, 0x66	; 102
    1db0:	46 e6       	ldi	r20, 0x66	; 102
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	c4 d1       	rcall	.+904    	; 0x2142 <__addsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 ea       	ldi	r20, 0xA0	; 160
    1dc4:	51 e4       	ldi	r21, 0x41	; 65
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	23 d2       	rcall	.+1094   	; 0x2212 <__divsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	ab 83       	std	Y+3, r26	; 0x03
    1dd6:	bc 83       	std	Y+4, r27	; 0x04

	OCR1A = floor(a*TOP_PWM); 
    1dd8:	08 e8       	ldi	r16, 0x88	; 136
    1dda:	10 e0       	ldi	r17, 0x00	; 0
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	34 e2       	ldi	r19, 0x24	; 36
    1de0:	44 e7       	ldi	r20, 0x74	; 116
    1de2:	5b e4       	ldi	r21, 0x4B	; 75
    1de4:	69 81       	ldd	r22, Y+1	; 0x01
    1de6:	7a 81       	ldd	r23, Y+2	; 0x02
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	b4 d3       	rcall	.+1896   	; 0x2556 <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	2a e0       	ldi	r18, 0x0A	; 10
    1df4:	37 ed       	ldi	r19, 0xD7	; 215
    1df6:	43 ea       	ldi	r20, 0xA3	; 163
    1df8:	5c e3       	ldi	r21, 0x3C	; 60
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	ab d3       	rcall	.+1878   	; 0x2556 <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	51 e4       	ldi	r21, 0x41	; 65
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	00 d2       	rcall	.+1024   	; 0x2212 <__divsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	d1 d2       	rcall	.+1442   	; 0x23be <floor>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	63 d2       	rcall	.+1222   	; 0x22ec <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
}
    1e30:	26 96       	adiw	r28, 0x06	; 6
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	08 95       	ret

00001e46 <TWI_Master_Initialise>:
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	88 eb       	ldi	r24, 0xB8	; 184
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	2c e0       	ldi	r18, 0x0C	; 12
    1e54:	fc 01       	movw	r30, r24
    1e56:	20 83       	st	Z, r18
    1e58:	8b eb       	ldi	r24, 0xBB	; 187
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	2f ef       	ldi	r18, 0xFF	; 255
    1e5e:	fc 01       	movw	r30, r24
    1e60:	20 83       	st	Z, r18
    1e62:	8c eb       	ldi	r24, 0xBC	; 188
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	24 e0       	ldi	r18, 0x04	; 4
    1e68:	fc 01       	movw	r30, r24
    1e6a:	20 83       	st	Z, r18
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	08 95       	ret

00001e72 <TWI_Transceiver_Busy>:
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	8c eb       	ldi	r24, 0xBC	; 188
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	fc 01       	movw	r30, r24
    1e80:	80 81       	ld	r24, Z
    1e82:	81 70       	andi	r24, 0x01	; 1
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <TWI_Start_Transceiver_With_Data>:
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <TWI_Start_Transceiver_With_Data+0x6>
    1e90:	1f 92       	push	r1
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9b 83       	std	Y+3, r25	; 0x03
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	6c 83       	std	Y+4, r22	; 0x04
    1e9c:	00 00       	nop
    1e9e:	e9 df       	rcall	.-46     	; 0x1e72 <TWI_Transceiver_Busy>
    1ea0:	88 23       	and	r24, r24
    1ea2:	e9 f7       	brne	.-6      	; 0x1e9e <TWI_Start_Transceiver_With_Data+0x14>
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	80 93 1f 02 	sts	0x021F, r24
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	fc 01       	movw	r30, r24
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 93 1b 02 	sts	0x021B, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	fc 01       	movw	r30, r24
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	81 70       	andi	r24, 0x01	; 1
    1ec4:	99 27       	eor	r25, r25
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	d1 f4       	brne	.+52     	; 0x1efe <TWI_Start_Transceiver_With_Data+0x74>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	13 c0       	rjmp	.+38     	; 0x1ef6 <TWI_Start_Transceiver_With_Data+0x6c>
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	29 81       	ldd	r18, Y+1	; 0x01
    1ed8:	22 2f       	mov	r18, r18
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a 81       	ldd	r20, Y+2	; 0x02
    1ede:	5b 81       	ldd	r21, Y+3	; 0x03
    1ee0:	24 0f       	add	r18, r20
    1ee2:	35 1f       	adc	r19, r21
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	20 81       	ld	r18, Z
    1ee8:	85 5e       	subi	r24, 0xE5	; 229
    1eea:	9d 4f       	sbci	r25, 0xFD	; 253
    1eec:	fc 01       	movw	r30, r24
    1eee:	20 83       	st	Z, r18
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	99 81       	ldd	r25, Y+1	; 0x01
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	98 17       	cp	r25, r24
    1efc:	48 f3       	brcs	.-46     	; 0x1ed0 <TWI_Start_Transceiver_With_Data+0x46>
    1efe:	10 92 20 02 	sts	0x0220, r1
    1f02:	88 ef       	ldi	r24, 0xF8	; 248
    1f04:	80 93 06 02 	sts	0x0206, r24
    1f08:	8c eb       	ldi	r24, 0xBC	; 188
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	25 ea       	ldi	r18, 0xA5	; 165
    1f0e:	fc 01       	movw	r30, r24
    1f10:	20 83       	st	Z, r18
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	08 95       	ret

00001f20 <__vector_39>:
    1f20:	1f 92       	push	r1
    1f22:	0f 92       	push	r0
    1f24:	00 90 5f 00 	lds	r0, 0x005F
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	00 90 5b 00 	lds	r0, 0x005B
    1f30:	0f 92       	push	r0
    1f32:	2f 93       	push	r18
    1f34:	3f 93       	push	r19
    1f36:	4f 93       	push	r20
    1f38:	5f 93       	push	r21
    1f3a:	8f 93       	push	r24
    1f3c:	9f 93       	push	r25
    1f3e:	af 93       	push	r26
    1f40:	bf 93       	push	r27
    1f42:	ef 93       	push	r30
    1f44:	ff 93       	push	r31
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	89 eb       	ldi	r24, 0xB9	; 185
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	fc 01       	movw	r30, r24
    1f54:	80 81       	ld	r24, Z
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	aa 27       	eor	r26, r26
    1f5c:	97 fd       	sbrc	r25, 7
    1f5e:	a0 95       	com	r26
    1f60:	ba 2f       	mov	r27, r26
    1f62:	48 e0       	ldi	r20, 0x08	; 8
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	20 e5       	ldi	r18, 0x50	; 80
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	84 1b       	sub	r24, r20
    1f6c:	95 0b       	sbc	r25, r21
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	08 f4       	brcc	.+2      	; 0x1f76 <__vector_39+0x56>
    1f74:	72 c0       	rjmp	.+228    	; 0x205a <__vector_39+0x13a>
    1f76:	8e 58       	subi	r24, 0x8E	; 142
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	8d c3       	rjmp	.+1818   	; 0x2698 <__tablejump2__>
    1f7e:	10 92 21 02 	sts	0x0221, r1
    1f82:	90 91 21 02 	lds	r25, 0x0221
    1f86:	80 91 1f 02 	lds	r24, 0x021F
    1f8a:	98 17       	cp	r25, r24
    1f8c:	b0 f4       	brcc	.+44     	; 0x1fba <__vector_39+0x9a>
    1f8e:	8b eb       	ldi	r24, 0xBB	; 187
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	20 91 21 02 	lds	r18, 0x0221
    1f96:	31 e0       	ldi	r19, 0x01	; 1
    1f98:	32 0f       	add	r19, r18
    1f9a:	30 93 21 02 	sts	0x0221, r19
    1f9e:	22 2f       	mov	r18, r18
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	25 5e       	subi	r18, 0xE5	; 229
    1fa4:	3d 4f       	sbci	r19, 0xFD	; 253
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	20 81       	ld	r18, Z
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18
    1fae:	8c eb       	ldi	r24, 0xBC	; 188
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	25 e8       	ldi	r18, 0x85	; 133
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	20 83       	st	Z, r18
    1fb8:	5b c0       	rjmp	.+182    	; 0x2070 <__vector_39+0x150>
    1fba:	80 91 20 02 	lds	r24, 0x0220
    1fbe:	81 60       	ori	r24, 0x01	; 1
    1fc0:	80 93 20 02 	sts	0x0220, r24
    1fc4:	8c eb       	ldi	r24, 0xBC	; 188
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	24 e9       	ldi	r18, 0x94	; 148
    1fca:	fc 01       	movw	r30, r24
    1fcc:	20 83       	st	Z, r18
    1fce:	50 c0       	rjmp	.+160    	; 0x2070 <__vector_39+0x150>
    1fd0:	80 91 21 02 	lds	r24, 0x0221
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	98 0f       	add	r25, r24
    1fd8:	90 93 21 02 	sts	0x0221, r25
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	2b eb       	ldi	r18, 0xBB	; 187
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	f9 01       	movw	r30, r18
    1fe6:	20 81       	ld	r18, Z
    1fe8:	85 5e       	subi	r24, 0xE5	; 229
    1fea:	9d 4f       	sbci	r25, 0xFD	; 253
    1fec:	fc 01       	movw	r30, r24
    1fee:	20 83       	st	Z, r18
    1ff0:	80 91 21 02 	lds	r24, 0x0221
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	80 91 1f 02 	lds	r24, 0x021F
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	28 17       	cp	r18, r24
    2004:	39 07       	cpc	r19, r25
    2006:	34 f4       	brge	.+12     	; 0x2014 <__vector_39+0xf4>
    2008:	8c eb       	ldi	r24, 0xBC	; 188
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	25 ec       	ldi	r18, 0xC5	; 197
    200e:	fc 01       	movw	r30, r24
    2010:	20 83       	st	Z, r18
    2012:	2e c0       	rjmp	.+92     	; 0x2070 <__vector_39+0x150>
    2014:	8c eb       	ldi	r24, 0xBC	; 188
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	25 e8       	ldi	r18, 0x85	; 133
    201a:	fc 01       	movw	r30, r24
    201c:	20 83       	st	Z, r18
    201e:	28 c0       	rjmp	.+80     	; 0x2070 <__vector_39+0x150>
    2020:	80 91 21 02 	lds	r24, 0x0221
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	2b eb       	ldi	r18, 0xBB	; 187
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	f9 01       	movw	r30, r18
    202e:	20 81       	ld	r18, Z
    2030:	85 5e       	subi	r24, 0xE5	; 229
    2032:	9d 4f       	sbci	r25, 0xFD	; 253
    2034:	fc 01       	movw	r30, r24
    2036:	20 83       	st	Z, r18
    2038:	80 91 20 02 	lds	r24, 0x0220
    203c:	81 60       	ori	r24, 0x01	; 1
    203e:	80 93 20 02 	sts	0x0220, r24
    2042:	8c eb       	ldi	r24, 0xBC	; 188
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	24 e9       	ldi	r18, 0x94	; 148
    2048:	fc 01       	movw	r30, r24
    204a:	20 83       	st	Z, r18
    204c:	11 c0       	rjmp	.+34     	; 0x2070 <__vector_39+0x150>
    204e:	8c eb       	ldi	r24, 0xBC	; 188
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	25 ea       	ldi	r18, 0xA5	; 165
    2054:	fc 01       	movw	r30, r24
    2056:	20 83       	st	Z, r18
    2058:	0b c0       	rjmp	.+22     	; 0x2070 <__vector_39+0x150>
    205a:	89 eb       	ldi	r24, 0xB9	; 185
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	fc 01       	movw	r30, r24
    2060:	80 81       	ld	r24, Z
    2062:	80 93 06 02 	sts	0x0206, r24
    2066:	8c eb       	ldi	r24, 0xBC	; 188
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	24 e0       	ldi	r18, 0x04	; 4
    206c:	fc 01       	movw	r30, r24
    206e:	20 83       	st	Z, r18
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	ff 91       	pop	r31
    2076:	ef 91       	pop	r30
    2078:	bf 91       	pop	r27
    207a:	af 91       	pop	r26
    207c:	9f 91       	pop	r25
    207e:	8f 91       	pop	r24
    2080:	5f 91       	pop	r21
    2082:	4f 91       	pop	r20
    2084:	3f 91       	pop	r19
    2086:	2f 91       	pop	r18
    2088:	0f 90       	pop	r0
    208a:	00 92 5b 00 	sts	0x005B, r0
    208e:	0f 90       	pop	r0
    2090:	00 92 5f 00 	sts	0x005F, r0
    2094:	0f 90       	pop	r0
    2096:	1f 90       	pop	r1
    2098:	18 95       	reti

0000209a <uart_transmit>:
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	1f 92       	push	r1
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	80 ec       	ldi	r24, 0xC0	; 192
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	fc 01       	movw	r30, r24
    20ac:	80 81       	ld	r24, Z
    20ae:	88 2f       	mov	r24, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	80 72       	andi	r24, 0x20	; 32
    20b4:	99 27       	eor	r25, r25
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	b1 f3       	breq	.-20     	; 0x20a6 <uart_transmit+0xc>
    20ba:	86 ec       	ldi	r24, 0xC6	; 198
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	29 81       	ldd	r18, Y+1	; 0x01
    20c0:	fc 01       	movw	r30, r24
    20c2:	20 83       	st	Z, r18
    20c4:	0f 90       	pop	r0
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <uart_receive>:
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	80 ec       	ldi	r24, 0xC0	; 192
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	fc 01       	movw	r30, r24
    20da:	80 81       	ld	r24, Z
    20dc:	88 23       	and	r24, r24
    20de:	d4 f7       	brge	.-12     	; 0x20d4 <uart_receive+0x8>
    20e0:	86 ec       	ldi	r24, 0xC6	; 198
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	08 95       	ret

000020ee <uart_init>:
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	1f 92       	push	r1
    20f4:	1f 92       	push	r1
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	85 ec       	ldi	r24, 0xC5	; 197
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	29 81       	ldd	r18, Y+1	; 0x01
    2104:	3a 81       	ldd	r19, Y+2	; 0x02
    2106:	23 2f       	mov	r18, r19
    2108:	33 27       	eor	r19, r19
    210a:	fc 01       	movw	r30, r24
    210c:	20 83       	st	Z, r18
    210e:	84 ec       	ldi	r24, 0xC4	; 196
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	29 81       	ldd	r18, Y+1	; 0x01
    2114:	fc 01       	movw	r30, r24
    2116:	20 83       	st	Z, r18
    2118:	81 ec       	ldi	r24, 0xC1	; 193
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	28 e1       	ldi	r18, 0x18	; 24
    211e:	fc 01       	movw	r30, r24
    2120:	20 83       	st	Z, r18
    2122:	82 ec       	ldi	r24, 0xC2	; 194
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	2e e0       	ldi	r18, 0x0E	; 14
    2128:	fc 01       	movw	r30, r24
    212a:	20 83       	st	Z, r18
    212c:	66 e6       	ldi	r22, 0x66	; 102
    212e:	70 e1       	ldi	r23, 0x10	; 16
    2130:	8d e4       	ldi	r24, 0x4D	; 77
    2132:	90 e1       	ldi	r25, 0x10	; 16
    2134:	06 d3       	rcall	.+1548   	; 0x2742 <fdevopen>
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <__subsf3>:
    2140:	50 58       	subi	r21, 0x80	; 128

00002142 <__addsf3>:
    2142:	bb 27       	eor	r27, r27
    2144:	aa 27       	eor	r26, r26
    2146:	0e d0       	rcall	.+28     	; 0x2164 <__addsf3x>
    2148:	b1 c1       	rjmp	.+866    	; 0x24ac <__fp_round>
    214a:	a2 d1       	rcall	.+836    	; 0x2490 <__fp_pscA>
    214c:	30 f0       	brcs	.+12     	; 0x215a <__addsf3+0x18>
    214e:	a7 d1       	rcall	.+846    	; 0x249e <__fp_pscB>
    2150:	20 f0       	brcs	.+8      	; 0x215a <__addsf3+0x18>
    2152:	31 f4       	brne	.+12     	; 0x2160 <__addsf3+0x1e>
    2154:	9f 3f       	cpi	r25, 0xFF	; 255
    2156:	11 f4       	brne	.+4      	; 0x215c <__addsf3+0x1a>
    2158:	1e f4       	brtc	.+6      	; 0x2160 <__addsf3+0x1e>
    215a:	97 c1       	rjmp	.+814    	; 0x248a <__fp_nan>
    215c:	0e f4       	brtc	.+2      	; 0x2160 <__addsf3+0x1e>
    215e:	e0 95       	com	r30
    2160:	e7 fb       	bst	r30, 7
    2162:	64 c1       	rjmp	.+712    	; 0x242c <__fp_inf>

00002164 <__addsf3x>:
    2164:	e9 2f       	mov	r30, r25
    2166:	b3 d1       	rcall	.+870    	; 0x24ce <__fp_split3>
    2168:	80 f3       	brcs	.-32     	; 0x214a <__addsf3+0x8>
    216a:	ba 17       	cp	r27, r26
    216c:	62 07       	cpc	r22, r18
    216e:	73 07       	cpc	r23, r19
    2170:	84 07       	cpc	r24, r20
    2172:	95 07       	cpc	r25, r21
    2174:	18 f0       	brcs	.+6      	; 0x217c <__addsf3x+0x18>
    2176:	71 f4       	brne	.+28     	; 0x2194 <__addsf3x+0x30>
    2178:	9e f5       	brtc	.+102    	; 0x21e0 <__addsf3x+0x7c>
    217a:	e2 c1       	rjmp	.+964    	; 0x2540 <__fp_zero>
    217c:	0e f4       	brtc	.+2      	; 0x2180 <__addsf3x+0x1c>
    217e:	e0 95       	com	r30
    2180:	0b 2e       	mov	r0, r27
    2182:	ba 2f       	mov	r27, r26
    2184:	a0 2d       	mov	r26, r0
    2186:	0b 01       	movw	r0, r22
    2188:	b9 01       	movw	r22, r18
    218a:	90 01       	movw	r18, r0
    218c:	0c 01       	movw	r0, r24
    218e:	ca 01       	movw	r24, r20
    2190:	a0 01       	movw	r20, r0
    2192:	11 24       	eor	r1, r1
    2194:	ff 27       	eor	r31, r31
    2196:	59 1b       	sub	r21, r25
    2198:	99 f0       	breq	.+38     	; 0x21c0 <__addsf3x+0x5c>
    219a:	59 3f       	cpi	r21, 0xF9	; 249
    219c:	50 f4       	brcc	.+20     	; 0x21b2 <__addsf3x+0x4e>
    219e:	50 3e       	cpi	r21, 0xE0	; 224
    21a0:	68 f1       	brcs	.+90     	; 0x21fc <__addsf3x+0x98>
    21a2:	1a 16       	cp	r1, r26
    21a4:	f0 40       	sbci	r31, 0x00	; 0
    21a6:	a2 2f       	mov	r26, r18
    21a8:	23 2f       	mov	r18, r19
    21aa:	34 2f       	mov	r19, r20
    21ac:	44 27       	eor	r20, r20
    21ae:	58 5f       	subi	r21, 0xF8	; 248
    21b0:	f3 cf       	rjmp	.-26     	; 0x2198 <__addsf3x+0x34>
    21b2:	46 95       	lsr	r20
    21b4:	37 95       	ror	r19
    21b6:	27 95       	ror	r18
    21b8:	a7 95       	ror	r26
    21ba:	f0 40       	sbci	r31, 0x00	; 0
    21bc:	53 95       	inc	r21
    21be:	c9 f7       	brne	.-14     	; 0x21b2 <__addsf3x+0x4e>
    21c0:	7e f4       	brtc	.+30     	; 0x21e0 <__addsf3x+0x7c>
    21c2:	1f 16       	cp	r1, r31
    21c4:	ba 0b       	sbc	r27, r26
    21c6:	62 0b       	sbc	r22, r18
    21c8:	73 0b       	sbc	r23, r19
    21ca:	84 0b       	sbc	r24, r20
    21cc:	ba f0       	brmi	.+46     	; 0x21fc <__addsf3x+0x98>
    21ce:	91 50       	subi	r25, 0x01	; 1
    21d0:	a1 f0       	breq	.+40     	; 0x21fa <__addsf3x+0x96>
    21d2:	ff 0f       	add	r31, r31
    21d4:	bb 1f       	adc	r27, r27
    21d6:	66 1f       	adc	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	88 1f       	adc	r24, r24
    21dc:	c2 f7       	brpl	.-16     	; 0x21ce <__addsf3x+0x6a>
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <__addsf3x+0x98>
    21e0:	ba 0f       	add	r27, r26
    21e2:	62 1f       	adc	r22, r18
    21e4:	73 1f       	adc	r23, r19
    21e6:	84 1f       	adc	r24, r20
    21e8:	48 f4       	brcc	.+18     	; 0x21fc <__addsf3x+0x98>
    21ea:	87 95       	ror	r24
    21ec:	77 95       	ror	r23
    21ee:	67 95       	ror	r22
    21f0:	b7 95       	ror	r27
    21f2:	f7 95       	ror	r31
    21f4:	9e 3f       	cpi	r25, 0xFE	; 254
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <__addsf3x+0x96>
    21f8:	b3 cf       	rjmp	.-154    	; 0x2160 <__addsf3+0x1e>
    21fa:	93 95       	inc	r25
    21fc:	88 0f       	add	r24, r24
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <__stack+0x3>
    2200:	99 27       	eor	r25, r25
    2202:	ee 0f       	add	r30, r30
    2204:	97 95       	ror	r25
    2206:	87 95       	ror	r24
    2208:	08 95       	ret

0000220a <__cmpsf2>:
    220a:	ec d0       	rcall	.+472    	; 0x23e4 <__fp_cmp>
    220c:	08 f4       	brcc	.+2      	; 0x2210 <__cmpsf2+0x6>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	08 95       	ret

00002212 <__divsf3>:
    2212:	0c d0       	rcall	.+24     	; 0x222c <__divsf3x>
    2214:	4b c1       	rjmp	.+662    	; 0x24ac <__fp_round>
    2216:	43 d1       	rcall	.+646    	; 0x249e <__fp_pscB>
    2218:	40 f0       	brcs	.+16     	; 0x222a <__divsf3+0x18>
    221a:	3a d1       	rcall	.+628    	; 0x2490 <__fp_pscA>
    221c:	30 f0       	brcs	.+12     	; 0x222a <__divsf3+0x18>
    221e:	21 f4       	brne	.+8      	; 0x2228 <__divsf3+0x16>
    2220:	5f 3f       	cpi	r21, 0xFF	; 255
    2222:	19 f0       	breq	.+6      	; 0x222a <__divsf3+0x18>
    2224:	03 c1       	rjmp	.+518    	; 0x242c <__fp_inf>
    2226:	51 11       	cpse	r21, r1
    2228:	8c c1       	rjmp	.+792    	; 0x2542 <__fp_szero>
    222a:	2f c1       	rjmp	.+606    	; 0x248a <__fp_nan>

0000222c <__divsf3x>:
    222c:	50 d1       	rcall	.+672    	; 0x24ce <__fp_split3>
    222e:	98 f3       	brcs	.-26     	; 0x2216 <__divsf3+0x4>

00002230 <__divsf3_pse>:
    2230:	99 23       	and	r25, r25
    2232:	c9 f3       	breq	.-14     	; 0x2226 <__divsf3+0x14>
    2234:	55 23       	and	r21, r21
    2236:	b1 f3       	breq	.-20     	; 0x2224 <__divsf3+0x12>
    2238:	95 1b       	sub	r25, r21
    223a:	55 0b       	sbc	r21, r21
    223c:	bb 27       	eor	r27, r27
    223e:	aa 27       	eor	r26, r26
    2240:	62 17       	cp	r22, r18
    2242:	73 07       	cpc	r23, r19
    2244:	84 07       	cpc	r24, r20
    2246:	38 f0       	brcs	.+14     	; 0x2256 <__divsf3_pse+0x26>
    2248:	9f 5f       	subi	r25, 0xFF	; 255
    224a:	5f 4f       	sbci	r21, 0xFF	; 255
    224c:	22 0f       	add	r18, r18
    224e:	33 1f       	adc	r19, r19
    2250:	44 1f       	adc	r20, r20
    2252:	aa 1f       	adc	r26, r26
    2254:	a9 f3       	breq	.-22     	; 0x2240 <__divsf3_pse+0x10>
    2256:	33 d0       	rcall	.+102    	; 0x22be <__divsf3_pse+0x8e>
    2258:	0e 2e       	mov	r0, r30
    225a:	3a f0       	brmi	.+14     	; 0x226a <__divsf3_pse+0x3a>
    225c:	e0 e8       	ldi	r30, 0x80	; 128
    225e:	30 d0       	rcall	.+96     	; 0x22c0 <__divsf3_pse+0x90>
    2260:	91 50       	subi	r25, 0x01	; 1
    2262:	50 40       	sbci	r21, 0x00	; 0
    2264:	e6 95       	lsr	r30
    2266:	00 1c       	adc	r0, r0
    2268:	ca f7       	brpl	.-14     	; 0x225c <__divsf3_pse+0x2c>
    226a:	29 d0       	rcall	.+82     	; 0x22be <__divsf3_pse+0x8e>
    226c:	fe 2f       	mov	r31, r30
    226e:	27 d0       	rcall	.+78     	; 0x22be <__divsf3_pse+0x8e>
    2270:	66 0f       	add	r22, r22
    2272:	77 1f       	adc	r23, r23
    2274:	88 1f       	adc	r24, r24
    2276:	bb 1f       	adc	r27, r27
    2278:	26 17       	cp	r18, r22
    227a:	37 07       	cpc	r19, r23
    227c:	48 07       	cpc	r20, r24
    227e:	ab 07       	cpc	r26, r27
    2280:	b0 e8       	ldi	r27, 0x80	; 128
    2282:	09 f0       	breq	.+2      	; 0x2286 <__divsf3_pse+0x56>
    2284:	bb 0b       	sbc	r27, r27
    2286:	80 2d       	mov	r24, r0
    2288:	bf 01       	movw	r22, r30
    228a:	ff 27       	eor	r31, r31
    228c:	93 58       	subi	r25, 0x83	; 131
    228e:	5f 4f       	sbci	r21, 0xFF	; 255
    2290:	2a f0       	brmi	.+10     	; 0x229c <__divsf3_pse+0x6c>
    2292:	9e 3f       	cpi	r25, 0xFE	; 254
    2294:	51 05       	cpc	r21, r1
    2296:	68 f0       	brcs	.+26     	; 0x22b2 <__divsf3_pse+0x82>
    2298:	c9 c0       	rjmp	.+402    	; 0x242c <__fp_inf>
    229a:	53 c1       	rjmp	.+678    	; 0x2542 <__fp_szero>
    229c:	5f 3f       	cpi	r21, 0xFF	; 255
    229e:	ec f3       	brlt	.-6      	; 0x229a <__divsf3_pse+0x6a>
    22a0:	98 3e       	cpi	r25, 0xE8	; 232
    22a2:	dc f3       	brlt	.-10     	; 0x229a <__divsf3_pse+0x6a>
    22a4:	86 95       	lsr	r24
    22a6:	77 95       	ror	r23
    22a8:	67 95       	ror	r22
    22aa:	b7 95       	ror	r27
    22ac:	f7 95       	ror	r31
    22ae:	9f 5f       	subi	r25, 0xFF	; 255
    22b0:	c9 f7       	brne	.-14     	; 0x22a4 <__divsf3_pse+0x74>
    22b2:	88 0f       	add	r24, r24
    22b4:	91 1d       	adc	r25, r1
    22b6:	96 95       	lsr	r25
    22b8:	87 95       	ror	r24
    22ba:	97 f9       	bld	r25, 7
    22bc:	08 95       	ret
    22be:	e1 e0       	ldi	r30, 0x01	; 1
    22c0:	66 0f       	add	r22, r22
    22c2:	77 1f       	adc	r23, r23
    22c4:	88 1f       	adc	r24, r24
    22c6:	bb 1f       	adc	r27, r27
    22c8:	62 17       	cp	r22, r18
    22ca:	73 07       	cpc	r23, r19
    22cc:	84 07       	cpc	r24, r20
    22ce:	ba 07       	cpc	r27, r26
    22d0:	20 f0       	brcs	.+8      	; 0x22da <__divsf3_pse+0xaa>
    22d2:	62 1b       	sub	r22, r18
    22d4:	73 0b       	sbc	r23, r19
    22d6:	84 0b       	sbc	r24, r20
    22d8:	ba 0b       	sbc	r27, r26
    22da:	ee 1f       	adc	r30, r30
    22dc:	88 f7       	brcc	.-30     	; 0x22c0 <__divsf3_pse+0x90>
    22de:	e0 95       	com	r30
    22e0:	08 95       	ret

000022e2 <__fixsfsi>:
    22e2:	04 d0       	rcall	.+8      	; 0x22ec <__fixunssfsi>
    22e4:	68 94       	set
    22e6:	b1 11       	cpse	r27, r1
    22e8:	2c c1       	rjmp	.+600    	; 0x2542 <__fp_szero>
    22ea:	08 95       	ret

000022ec <__fixunssfsi>:
    22ec:	f8 d0       	rcall	.+496    	; 0x24de <__fp_splitA>
    22ee:	88 f0       	brcs	.+34     	; 0x2312 <__fixunssfsi+0x26>
    22f0:	9f 57       	subi	r25, 0x7F	; 127
    22f2:	90 f0       	brcs	.+36     	; 0x2318 <__fixunssfsi+0x2c>
    22f4:	b9 2f       	mov	r27, r25
    22f6:	99 27       	eor	r25, r25
    22f8:	b7 51       	subi	r27, 0x17	; 23
    22fa:	a0 f0       	brcs	.+40     	; 0x2324 <__fixunssfsi+0x38>
    22fc:	d1 f0       	breq	.+52     	; 0x2332 <__fixunssfsi+0x46>
    22fe:	66 0f       	add	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	1a f0       	brmi	.+6      	; 0x230e <__fixunssfsi+0x22>
    2308:	ba 95       	dec	r27
    230a:	c9 f7       	brne	.-14     	; 0x22fe <__fixunssfsi+0x12>
    230c:	12 c0       	rjmp	.+36     	; 0x2332 <__fixunssfsi+0x46>
    230e:	b1 30       	cpi	r27, 0x01	; 1
    2310:	81 f0       	breq	.+32     	; 0x2332 <__fixunssfsi+0x46>
    2312:	16 d1       	rcall	.+556    	; 0x2540 <__fp_zero>
    2314:	b1 e0       	ldi	r27, 0x01	; 1
    2316:	08 95       	ret
    2318:	13 c1       	rjmp	.+550    	; 0x2540 <__fp_zero>
    231a:	67 2f       	mov	r22, r23
    231c:	78 2f       	mov	r23, r24
    231e:	88 27       	eor	r24, r24
    2320:	b8 5f       	subi	r27, 0xF8	; 248
    2322:	39 f0       	breq	.+14     	; 0x2332 <__fixunssfsi+0x46>
    2324:	b9 3f       	cpi	r27, 0xF9	; 249
    2326:	cc f3       	brlt	.-14     	; 0x231a <__fixunssfsi+0x2e>
    2328:	86 95       	lsr	r24
    232a:	77 95       	ror	r23
    232c:	67 95       	ror	r22
    232e:	b3 95       	inc	r27
    2330:	d9 f7       	brne	.-10     	; 0x2328 <__fixunssfsi+0x3c>
    2332:	3e f4       	brtc	.+14     	; 0x2342 <__fixunssfsi+0x56>
    2334:	90 95       	com	r25
    2336:	80 95       	com	r24
    2338:	70 95       	com	r23
    233a:	61 95       	neg	r22
    233c:	7f 4f       	sbci	r23, 0xFF	; 255
    233e:	8f 4f       	sbci	r24, 0xFF	; 255
    2340:	9f 4f       	sbci	r25, 0xFF	; 255
    2342:	08 95       	ret

00002344 <__floatunsisf>:
    2344:	e8 94       	clt
    2346:	09 c0       	rjmp	.+18     	; 0x235a <__floatsisf+0x12>

00002348 <__floatsisf>:
    2348:	97 fb       	bst	r25, 7
    234a:	3e f4       	brtc	.+14     	; 0x235a <__floatsisf+0x12>
    234c:	90 95       	com	r25
    234e:	80 95       	com	r24
    2350:	70 95       	com	r23
    2352:	61 95       	neg	r22
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	8f 4f       	sbci	r24, 0xFF	; 255
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	99 23       	and	r25, r25
    235c:	a9 f0       	breq	.+42     	; 0x2388 <__floatsisf+0x40>
    235e:	f9 2f       	mov	r31, r25
    2360:	96 e9       	ldi	r25, 0x96	; 150
    2362:	bb 27       	eor	r27, r27
    2364:	93 95       	inc	r25
    2366:	f6 95       	lsr	r31
    2368:	87 95       	ror	r24
    236a:	77 95       	ror	r23
    236c:	67 95       	ror	r22
    236e:	b7 95       	ror	r27
    2370:	f1 11       	cpse	r31, r1
    2372:	f8 cf       	rjmp	.-16     	; 0x2364 <__floatsisf+0x1c>
    2374:	fa f4       	brpl	.+62     	; 0x23b4 <__floatsisf+0x6c>
    2376:	bb 0f       	add	r27, r27
    2378:	11 f4       	brne	.+4      	; 0x237e <__floatsisf+0x36>
    237a:	60 ff       	sbrs	r22, 0
    237c:	1b c0       	rjmp	.+54     	; 0x23b4 <__floatsisf+0x6c>
    237e:	6f 5f       	subi	r22, 0xFF	; 255
    2380:	7f 4f       	sbci	r23, 0xFF	; 255
    2382:	8f 4f       	sbci	r24, 0xFF	; 255
    2384:	9f 4f       	sbci	r25, 0xFF	; 255
    2386:	16 c0       	rjmp	.+44     	; 0x23b4 <__floatsisf+0x6c>
    2388:	88 23       	and	r24, r24
    238a:	11 f0       	breq	.+4      	; 0x2390 <__floatsisf+0x48>
    238c:	96 e9       	ldi	r25, 0x96	; 150
    238e:	11 c0       	rjmp	.+34     	; 0x23b2 <__floatsisf+0x6a>
    2390:	77 23       	and	r23, r23
    2392:	21 f0       	breq	.+8      	; 0x239c <__floatsisf+0x54>
    2394:	9e e8       	ldi	r25, 0x8E	; 142
    2396:	87 2f       	mov	r24, r23
    2398:	76 2f       	mov	r23, r22
    239a:	05 c0       	rjmp	.+10     	; 0x23a6 <__floatsisf+0x5e>
    239c:	66 23       	and	r22, r22
    239e:	71 f0       	breq	.+28     	; 0x23bc <__floatsisf+0x74>
    23a0:	96 e8       	ldi	r25, 0x86	; 134
    23a2:	86 2f       	mov	r24, r22
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	2a f0       	brmi	.+10     	; 0x23b4 <__floatsisf+0x6c>
    23aa:	9a 95       	dec	r25
    23ac:	66 0f       	add	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	88 1f       	adc	r24, r24
    23b2:	da f7       	brpl	.-10     	; 0x23aa <__floatsisf+0x62>
    23b4:	88 0f       	add	r24, r24
    23b6:	96 95       	lsr	r25
    23b8:	87 95       	ror	r24
    23ba:	97 f9       	bld	r25, 7
    23bc:	08 95       	ret

000023be <floor>:
    23be:	a9 d0       	rcall	.+338    	; 0x2512 <__fp_trunc>
    23c0:	80 f0       	brcs	.+32     	; 0x23e2 <floor+0x24>
    23c2:	9f 37       	cpi	r25, 0x7F	; 127
    23c4:	40 f4       	brcc	.+16     	; 0x23d6 <floor+0x18>
    23c6:	91 11       	cpse	r25, r1
    23c8:	0e f0       	brts	.+2      	; 0x23cc <floor+0xe>
    23ca:	bb c0       	rjmp	.+374    	; 0x2542 <__fp_szero>
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	70 e0       	ldi	r23, 0x00	; 0
    23d0:	80 e8       	ldi	r24, 0x80	; 128
    23d2:	9f eb       	ldi	r25, 0xBF	; 191
    23d4:	08 95       	ret
    23d6:	26 f4       	brtc	.+8      	; 0x23e0 <floor+0x22>
    23d8:	1b 16       	cp	r1, r27
    23da:	61 1d       	adc	r22, r1
    23dc:	71 1d       	adc	r23, r1
    23de:	81 1d       	adc	r24, r1
    23e0:	2b c0       	rjmp	.+86     	; 0x2438 <__fp_mintl>
    23e2:	45 c0       	rjmp	.+138    	; 0x246e <__fp_mpack>

000023e4 <__fp_cmp>:
    23e4:	99 0f       	add	r25, r25
    23e6:	00 08       	sbc	r0, r0
    23e8:	55 0f       	add	r21, r21
    23ea:	aa 0b       	sbc	r26, r26
    23ec:	e0 e8       	ldi	r30, 0x80	; 128
    23ee:	fe ef       	ldi	r31, 0xFE	; 254
    23f0:	16 16       	cp	r1, r22
    23f2:	17 06       	cpc	r1, r23
    23f4:	e8 07       	cpc	r30, r24
    23f6:	f9 07       	cpc	r31, r25
    23f8:	c0 f0       	brcs	.+48     	; 0x242a <__fp_cmp+0x46>
    23fa:	12 16       	cp	r1, r18
    23fc:	13 06       	cpc	r1, r19
    23fe:	e4 07       	cpc	r30, r20
    2400:	f5 07       	cpc	r31, r21
    2402:	98 f0       	brcs	.+38     	; 0x242a <__fp_cmp+0x46>
    2404:	62 1b       	sub	r22, r18
    2406:	73 0b       	sbc	r23, r19
    2408:	84 0b       	sbc	r24, r20
    240a:	95 0b       	sbc	r25, r21
    240c:	39 f4       	brne	.+14     	; 0x241c <__fp_cmp+0x38>
    240e:	0a 26       	eor	r0, r26
    2410:	61 f0       	breq	.+24     	; 0x242a <__fp_cmp+0x46>
    2412:	23 2b       	or	r18, r19
    2414:	24 2b       	or	r18, r20
    2416:	25 2b       	or	r18, r21
    2418:	21 f4       	brne	.+8      	; 0x2422 <__fp_cmp+0x3e>
    241a:	08 95       	ret
    241c:	0a 26       	eor	r0, r26
    241e:	09 f4       	brne	.+2      	; 0x2422 <__fp_cmp+0x3e>
    2420:	a1 40       	sbci	r26, 0x01	; 1
    2422:	a6 95       	lsr	r26
    2424:	8f ef       	ldi	r24, 0xFF	; 255
    2426:	81 1d       	adc	r24, r1
    2428:	81 1d       	adc	r24, r1
    242a:	08 95       	ret

0000242c <__fp_inf>:
    242c:	97 f9       	bld	r25, 7
    242e:	9f 67       	ori	r25, 0x7F	; 127
    2430:	80 e8       	ldi	r24, 0x80	; 128
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	08 95       	ret

00002438 <__fp_mintl>:
    2438:	88 23       	and	r24, r24
    243a:	71 f4       	brne	.+28     	; 0x2458 <__fp_mintl+0x20>
    243c:	77 23       	and	r23, r23
    243e:	21 f0       	breq	.+8      	; 0x2448 <__fp_mintl+0x10>
    2440:	98 50       	subi	r25, 0x08	; 8
    2442:	87 2b       	or	r24, r23
    2444:	76 2f       	mov	r23, r22
    2446:	07 c0       	rjmp	.+14     	; 0x2456 <__fp_mintl+0x1e>
    2448:	66 23       	and	r22, r22
    244a:	11 f4       	brne	.+4      	; 0x2450 <__fp_mintl+0x18>
    244c:	99 27       	eor	r25, r25
    244e:	0d c0       	rjmp	.+26     	; 0x246a <__fp_mintl+0x32>
    2450:	90 51       	subi	r25, 0x10	; 16
    2452:	86 2b       	or	r24, r22
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	2a f0       	brmi	.+10     	; 0x2464 <__fp_mintl+0x2c>
    245a:	9a 95       	dec	r25
    245c:	66 0f       	add	r22, r22
    245e:	77 1f       	adc	r23, r23
    2460:	88 1f       	adc	r24, r24
    2462:	da f7       	brpl	.-10     	; 0x245a <__fp_mintl+0x22>
    2464:	88 0f       	add	r24, r24
    2466:	96 95       	lsr	r25
    2468:	87 95       	ror	r24
    246a:	97 f9       	bld	r25, 7
    246c:	08 95       	ret

0000246e <__fp_mpack>:
    246e:	9f 3f       	cpi	r25, 0xFF	; 255
    2470:	31 f0       	breq	.+12     	; 0x247e <__fp_mpack_finite+0xc>

00002472 <__fp_mpack_finite>:
    2472:	91 50       	subi	r25, 0x01	; 1
    2474:	20 f4       	brcc	.+8      	; 0x247e <__fp_mpack_finite+0xc>
    2476:	87 95       	ror	r24
    2478:	77 95       	ror	r23
    247a:	67 95       	ror	r22
    247c:	b7 95       	ror	r27
    247e:	88 0f       	add	r24, r24
    2480:	91 1d       	adc	r25, r1
    2482:	96 95       	lsr	r25
    2484:	87 95       	ror	r24
    2486:	97 f9       	bld	r25, 7
    2488:	08 95       	ret

0000248a <__fp_nan>:
    248a:	9f ef       	ldi	r25, 0xFF	; 255
    248c:	80 ec       	ldi	r24, 0xC0	; 192
    248e:	08 95       	ret

00002490 <__fp_pscA>:
    2490:	00 24       	eor	r0, r0
    2492:	0a 94       	dec	r0
    2494:	16 16       	cp	r1, r22
    2496:	17 06       	cpc	r1, r23
    2498:	18 06       	cpc	r1, r24
    249a:	09 06       	cpc	r0, r25
    249c:	08 95       	ret

0000249e <__fp_pscB>:
    249e:	00 24       	eor	r0, r0
    24a0:	0a 94       	dec	r0
    24a2:	12 16       	cp	r1, r18
    24a4:	13 06       	cpc	r1, r19
    24a6:	14 06       	cpc	r1, r20
    24a8:	05 06       	cpc	r0, r21
    24aa:	08 95       	ret

000024ac <__fp_round>:
    24ac:	09 2e       	mov	r0, r25
    24ae:	03 94       	inc	r0
    24b0:	00 0c       	add	r0, r0
    24b2:	11 f4       	brne	.+4      	; 0x24b8 <__fp_round+0xc>
    24b4:	88 23       	and	r24, r24
    24b6:	52 f0       	brmi	.+20     	; 0x24cc <__fp_round+0x20>
    24b8:	bb 0f       	add	r27, r27
    24ba:	40 f4       	brcc	.+16     	; 0x24cc <__fp_round+0x20>
    24bc:	bf 2b       	or	r27, r31
    24be:	11 f4       	brne	.+4      	; 0x24c4 <__fp_round+0x18>
    24c0:	60 ff       	sbrs	r22, 0
    24c2:	04 c0       	rjmp	.+8      	; 0x24cc <__fp_round+0x20>
    24c4:	6f 5f       	subi	r22, 0xFF	; 255
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	08 95       	ret

000024ce <__fp_split3>:
    24ce:	57 fd       	sbrc	r21, 7
    24d0:	90 58       	subi	r25, 0x80	; 128
    24d2:	44 0f       	add	r20, r20
    24d4:	55 1f       	adc	r21, r21
    24d6:	59 f0       	breq	.+22     	; 0x24ee <__fp_splitA+0x10>
    24d8:	5f 3f       	cpi	r21, 0xFF	; 255
    24da:	71 f0       	breq	.+28     	; 0x24f8 <__fp_splitA+0x1a>
    24dc:	47 95       	ror	r20

000024de <__fp_splitA>:
    24de:	88 0f       	add	r24, r24
    24e0:	97 fb       	bst	r25, 7
    24e2:	99 1f       	adc	r25, r25
    24e4:	61 f0       	breq	.+24     	; 0x24fe <__fp_splitA+0x20>
    24e6:	9f 3f       	cpi	r25, 0xFF	; 255
    24e8:	79 f0       	breq	.+30     	; 0x2508 <__fp_splitA+0x2a>
    24ea:	87 95       	ror	r24
    24ec:	08 95       	ret
    24ee:	12 16       	cp	r1, r18
    24f0:	13 06       	cpc	r1, r19
    24f2:	14 06       	cpc	r1, r20
    24f4:	55 1f       	adc	r21, r21
    24f6:	f2 cf       	rjmp	.-28     	; 0x24dc <__fp_split3+0xe>
    24f8:	46 95       	lsr	r20
    24fa:	f1 df       	rcall	.-30     	; 0x24de <__fp_splitA>
    24fc:	08 c0       	rjmp	.+16     	; 0x250e <__fp_splitA+0x30>
    24fe:	16 16       	cp	r1, r22
    2500:	17 06       	cpc	r1, r23
    2502:	18 06       	cpc	r1, r24
    2504:	99 1f       	adc	r25, r25
    2506:	f1 cf       	rjmp	.-30     	; 0x24ea <__fp_splitA+0xc>
    2508:	86 95       	lsr	r24
    250a:	71 05       	cpc	r23, r1
    250c:	61 05       	cpc	r22, r1
    250e:	08 94       	sec
    2510:	08 95       	ret

00002512 <__fp_trunc>:
    2512:	e5 df       	rcall	.-54     	; 0x24de <__fp_splitA>
    2514:	a0 f0       	brcs	.+40     	; 0x253e <__fp_trunc+0x2c>
    2516:	be e7       	ldi	r27, 0x7E	; 126
    2518:	b9 17       	cp	r27, r25
    251a:	88 f4       	brcc	.+34     	; 0x253e <__fp_trunc+0x2c>
    251c:	bb 27       	eor	r27, r27
    251e:	9f 38       	cpi	r25, 0x8F	; 143
    2520:	60 f4       	brcc	.+24     	; 0x253a <__fp_trunc+0x28>
    2522:	16 16       	cp	r1, r22
    2524:	b1 1d       	adc	r27, r1
    2526:	67 2f       	mov	r22, r23
    2528:	78 2f       	mov	r23, r24
    252a:	88 27       	eor	r24, r24
    252c:	98 5f       	subi	r25, 0xF8	; 248
    252e:	f7 cf       	rjmp	.-18     	; 0x251e <__fp_trunc+0xc>
    2530:	86 95       	lsr	r24
    2532:	77 95       	ror	r23
    2534:	67 95       	ror	r22
    2536:	b1 1d       	adc	r27, r1
    2538:	93 95       	inc	r25
    253a:	96 39       	cpi	r25, 0x96	; 150
    253c:	c8 f3       	brcs	.-14     	; 0x2530 <__fp_trunc+0x1e>
    253e:	08 95       	ret

00002540 <__fp_zero>:
    2540:	e8 94       	clt

00002542 <__fp_szero>:
    2542:	bb 27       	eor	r27, r27
    2544:	66 27       	eor	r22, r22
    2546:	77 27       	eor	r23, r23
    2548:	cb 01       	movw	r24, r22
    254a:	97 f9       	bld	r25, 7
    254c:	08 95       	ret

0000254e <__gesf2>:
    254e:	4a df       	rcall	.-364    	; 0x23e4 <__fp_cmp>
    2550:	08 f4       	brcc	.+2      	; 0x2554 <__gesf2+0x6>
    2552:	8f ef       	ldi	r24, 0xFF	; 255
    2554:	08 95       	ret

00002556 <__mulsf3>:
    2556:	0b d0       	rcall	.+22     	; 0x256e <__mulsf3x>
    2558:	a9 cf       	rjmp	.-174    	; 0x24ac <__fp_round>
    255a:	9a df       	rcall	.-204    	; 0x2490 <__fp_pscA>
    255c:	28 f0       	brcs	.+10     	; 0x2568 <__mulsf3+0x12>
    255e:	9f df       	rcall	.-194    	; 0x249e <__fp_pscB>
    2560:	18 f0       	brcs	.+6      	; 0x2568 <__mulsf3+0x12>
    2562:	95 23       	and	r25, r21
    2564:	09 f0       	breq	.+2      	; 0x2568 <__mulsf3+0x12>
    2566:	62 cf       	rjmp	.-316    	; 0x242c <__fp_inf>
    2568:	90 cf       	rjmp	.-224    	; 0x248a <__fp_nan>
    256a:	11 24       	eor	r1, r1
    256c:	ea cf       	rjmp	.-44     	; 0x2542 <__fp_szero>

0000256e <__mulsf3x>:
    256e:	af df       	rcall	.-162    	; 0x24ce <__fp_split3>
    2570:	a0 f3       	brcs	.-24     	; 0x255a <__mulsf3+0x4>

00002572 <__mulsf3_pse>:
    2572:	95 9f       	mul	r25, r21
    2574:	d1 f3       	breq	.-12     	; 0x256a <__mulsf3+0x14>
    2576:	95 0f       	add	r25, r21
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	55 1f       	adc	r21, r21
    257c:	62 9f       	mul	r22, r18
    257e:	f0 01       	movw	r30, r0
    2580:	72 9f       	mul	r23, r18
    2582:	bb 27       	eor	r27, r27
    2584:	f0 0d       	add	r31, r0
    2586:	b1 1d       	adc	r27, r1
    2588:	63 9f       	mul	r22, r19
    258a:	aa 27       	eor	r26, r26
    258c:	f0 0d       	add	r31, r0
    258e:	b1 1d       	adc	r27, r1
    2590:	aa 1f       	adc	r26, r26
    2592:	64 9f       	mul	r22, r20
    2594:	66 27       	eor	r22, r22
    2596:	b0 0d       	add	r27, r0
    2598:	a1 1d       	adc	r26, r1
    259a:	66 1f       	adc	r22, r22
    259c:	82 9f       	mul	r24, r18
    259e:	22 27       	eor	r18, r18
    25a0:	b0 0d       	add	r27, r0
    25a2:	a1 1d       	adc	r26, r1
    25a4:	62 1f       	adc	r22, r18
    25a6:	73 9f       	mul	r23, r19
    25a8:	b0 0d       	add	r27, r0
    25aa:	a1 1d       	adc	r26, r1
    25ac:	62 1f       	adc	r22, r18
    25ae:	83 9f       	mul	r24, r19
    25b0:	a0 0d       	add	r26, r0
    25b2:	61 1d       	adc	r22, r1
    25b4:	22 1f       	adc	r18, r18
    25b6:	74 9f       	mul	r23, r20
    25b8:	33 27       	eor	r19, r19
    25ba:	a0 0d       	add	r26, r0
    25bc:	61 1d       	adc	r22, r1
    25be:	23 1f       	adc	r18, r19
    25c0:	84 9f       	mul	r24, r20
    25c2:	60 0d       	add	r22, r0
    25c4:	21 1d       	adc	r18, r1
    25c6:	82 2f       	mov	r24, r18
    25c8:	76 2f       	mov	r23, r22
    25ca:	6a 2f       	mov	r22, r26
    25cc:	11 24       	eor	r1, r1
    25ce:	9f 57       	subi	r25, 0x7F	; 127
    25d0:	50 40       	sbci	r21, 0x00	; 0
    25d2:	8a f0       	brmi	.+34     	; 0x25f6 <__mulsf3_pse+0x84>
    25d4:	e1 f0       	breq	.+56     	; 0x260e <__mulsf3_pse+0x9c>
    25d6:	88 23       	and	r24, r24
    25d8:	4a f0       	brmi	.+18     	; 0x25ec <__mulsf3_pse+0x7a>
    25da:	ee 0f       	add	r30, r30
    25dc:	ff 1f       	adc	r31, r31
    25de:	bb 1f       	adc	r27, r27
    25e0:	66 1f       	adc	r22, r22
    25e2:	77 1f       	adc	r23, r23
    25e4:	88 1f       	adc	r24, r24
    25e6:	91 50       	subi	r25, 0x01	; 1
    25e8:	50 40       	sbci	r21, 0x00	; 0
    25ea:	a9 f7       	brne	.-22     	; 0x25d6 <__mulsf3_pse+0x64>
    25ec:	9e 3f       	cpi	r25, 0xFE	; 254
    25ee:	51 05       	cpc	r21, r1
    25f0:	70 f0       	brcs	.+28     	; 0x260e <__mulsf3_pse+0x9c>
    25f2:	1c cf       	rjmp	.-456    	; 0x242c <__fp_inf>
    25f4:	a6 cf       	rjmp	.-180    	; 0x2542 <__fp_szero>
    25f6:	5f 3f       	cpi	r21, 0xFF	; 255
    25f8:	ec f3       	brlt	.-6      	; 0x25f4 <__mulsf3_pse+0x82>
    25fa:	98 3e       	cpi	r25, 0xE8	; 232
    25fc:	dc f3       	brlt	.-10     	; 0x25f4 <__mulsf3_pse+0x82>
    25fe:	86 95       	lsr	r24
    2600:	77 95       	ror	r23
    2602:	67 95       	ror	r22
    2604:	b7 95       	ror	r27
    2606:	f7 95       	ror	r31
    2608:	e7 95       	ror	r30
    260a:	9f 5f       	subi	r25, 0xFF	; 255
    260c:	c1 f7       	brne	.-16     	; 0x25fe <__mulsf3_pse+0x8c>
    260e:	fe 2b       	or	r31, r30
    2610:	88 0f       	add	r24, r24
    2612:	91 1d       	adc	r25, r1
    2614:	96 95       	lsr	r25
    2616:	87 95       	ror	r24
    2618:	97 f9       	bld	r25, 7
    261a:	08 95       	ret

0000261c <__mulsi3>:
    261c:	db 01       	movw	r26, r22
    261e:	8f 93       	push	r24
    2620:	9f 93       	push	r25
    2622:	40 d0       	rcall	.+128    	; 0x26a4 <__muluhisi3>
    2624:	bf 91       	pop	r27
    2626:	af 91       	pop	r26
    2628:	a2 9f       	mul	r26, r18
    262a:	80 0d       	add	r24, r0
    262c:	91 1d       	adc	r25, r1
    262e:	a3 9f       	mul	r26, r19
    2630:	90 0d       	add	r25, r0
    2632:	b2 9f       	mul	r27, r18
    2634:	90 0d       	add	r25, r0
    2636:	11 24       	eor	r1, r1
    2638:	08 95       	ret

0000263a <__divmodhi4>:
    263a:	97 fb       	bst	r25, 7
    263c:	07 2e       	mov	r0, r23
    263e:	16 f4       	brtc	.+4      	; 0x2644 <__divmodhi4+0xa>
    2640:	00 94       	com	r0
    2642:	06 d0       	rcall	.+12     	; 0x2650 <__divmodhi4_neg1>
    2644:	77 fd       	sbrc	r23, 7
    2646:	08 d0       	rcall	.+16     	; 0x2658 <__divmodhi4_neg2>
    2648:	37 d0       	rcall	.+110    	; 0x26b8 <__udivmodhi4>
    264a:	07 fc       	sbrc	r0, 7
    264c:	05 d0       	rcall	.+10     	; 0x2658 <__divmodhi4_neg2>
    264e:	3e f4       	brtc	.+14     	; 0x265e <__divmodhi4_exit>

00002650 <__divmodhi4_neg1>:
    2650:	90 95       	com	r25
    2652:	81 95       	neg	r24
    2654:	9f 4f       	sbci	r25, 0xFF	; 255
    2656:	08 95       	ret

00002658 <__divmodhi4_neg2>:
    2658:	70 95       	com	r23
    265a:	61 95       	neg	r22
    265c:	7f 4f       	sbci	r23, 0xFF	; 255

0000265e <__divmodhi4_exit>:
    265e:	08 95       	ret

00002660 <__divmodsi4>:
    2660:	05 2e       	mov	r0, r21
    2662:	97 fb       	bst	r25, 7
    2664:	16 f4       	brtc	.+4      	; 0x266a <__divmodsi4+0xa>
    2666:	00 94       	com	r0
    2668:	0f d0       	rcall	.+30     	; 0x2688 <__negsi2>
    266a:	57 fd       	sbrc	r21, 7
    266c:	05 d0       	rcall	.+10     	; 0x2678 <__divmodsi4_neg2>
    266e:	38 d0       	rcall	.+112    	; 0x26e0 <__udivmodsi4>
    2670:	07 fc       	sbrc	r0, 7
    2672:	02 d0       	rcall	.+4      	; 0x2678 <__divmodsi4_neg2>
    2674:	46 f4       	brtc	.+16     	; 0x2686 <__divmodsi4_exit>
    2676:	08 c0       	rjmp	.+16     	; 0x2688 <__negsi2>

00002678 <__divmodsi4_neg2>:
    2678:	50 95       	com	r21
    267a:	40 95       	com	r20
    267c:	30 95       	com	r19
    267e:	21 95       	neg	r18
    2680:	3f 4f       	sbci	r19, 0xFF	; 255
    2682:	4f 4f       	sbci	r20, 0xFF	; 255
    2684:	5f 4f       	sbci	r21, 0xFF	; 255

00002686 <__divmodsi4_exit>:
    2686:	08 95       	ret

00002688 <__negsi2>:
    2688:	90 95       	com	r25
    268a:	80 95       	com	r24
    268c:	70 95       	com	r23
    268e:	61 95       	neg	r22
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	8f 4f       	sbci	r24, 0xFF	; 255
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	08 95       	ret

00002698 <__tablejump2__>:
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31

0000269c <__tablejump__>:
    269c:	05 90       	lpm	r0, Z+
    269e:	f4 91       	lpm	r31, Z
    26a0:	e0 2d       	mov	r30, r0
    26a2:	19 94       	eijmp

000026a4 <__muluhisi3>:
    26a4:	3f d0       	rcall	.+126    	; 0x2724 <__umulhisi3>
    26a6:	a5 9f       	mul	r26, r21
    26a8:	90 0d       	add	r25, r0
    26aa:	b4 9f       	mul	r27, r20
    26ac:	90 0d       	add	r25, r0
    26ae:	a4 9f       	mul	r26, r20
    26b0:	80 0d       	add	r24, r0
    26b2:	91 1d       	adc	r25, r1
    26b4:	11 24       	eor	r1, r1
    26b6:	08 95       	ret

000026b8 <__udivmodhi4>:
    26b8:	aa 1b       	sub	r26, r26
    26ba:	bb 1b       	sub	r27, r27
    26bc:	51 e1       	ldi	r21, 0x11	; 17
    26be:	07 c0       	rjmp	.+14     	; 0x26ce <__udivmodhi4_ep>

000026c0 <__udivmodhi4_loop>:
    26c0:	aa 1f       	adc	r26, r26
    26c2:	bb 1f       	adc	r27, r27
    26c4:	a6 17       	cp	r26, r22
    26c6:	b7 07       	cpc	r27, r23
    26c8:	10 f0       	brcs	.+4      	; 0x26ce <__udivmodhi4_ep>
    26ca:	a6 1b       	sub	r26, r22
    26cc:	b7 0b       	sbc	r27, r23

000026ce <__udivmodhi4_ep>:
    26ce:	88 1f       	adc	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	5a 95       	dec	r21
    26d4:	a9 f7       	brne	.-22     	; 0x26c0 <__udivmodhi4_loop>
    26d6:	80 95       	com	r24
    26d8:	90 95       	com	r25
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	08 95       	ret

000026e0 <__udivmodsi4>:
    26e0:	a1 e2       	ldi	r26, 0x21	; 33
    26e2:	1a 2e       	mov	r1, r26
    26e4:	aa 1b       	sub	r26, r26
    26e6:	bb 1b       	sub	r27, r27
    26e8:	fd 01       	movw	r30, r26
    26ea:	0d c0       	rjmp	.+26     	; 0x2706 <__udivmodsi4_ep>

000026ec <__udivmodsi4_loop>:
    26ec:	aa 1f       	adc	r26, r26
    26ee:	bb 1f       	adc	r27, r27
    26f0:	ee 1f       	adc	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	a2 17       	cp	r26, r18
    26f6:	b3 07       	cpc	r27, r19
    26f8:	e4 07       	cpc	r30, r20
    26fa:	f5 07       	cpc	r31, r21
    26fc:	20 f0       	brcs	.+8      	; 0x2706 <__udivmodsi4_ep>
    26fe:	a2 1b       	sub	r26, r18
    2700:	b3 0b       	sbc	r27, r19
    2702:	e4 0b       	sbc	r30, r20
    2704:	f5 0b       	sbc	r31, r21

00002706 <__udivmodsi4_ep>:
    2706:	66 1f       	adc	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	88 1f       	adc	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	1a 94       	dec	r1
    2710:	69 f7       	brne	.-38     	; 0x26ec <__udivmodsi4_loop>
    2712:	60 95       	com	r22
    2714:	70 95       	com	r23
    2716:	80 95       	com	r24
    2718:	90 95       	com	r25
    271a:	9b 01       	movw	r18, r22
    271c:	ac 01       	movw	r20, r24
    271e:	bd 01       	movw	r22, r26
    2720:	cf 01       	movw	r24, r30
    2722:	08 95       	ret

00002724 <__umulhisi3>:
    2724:	a2 9f       	mul	r26, r18
    2726:	b0 01       	movw	r22, r0
    2728:	b3 9f       	mul	r27, r19
    272a:	c0 01       	movw	r24, r0
    272c:	a3 9f       	mul	r26, r19
    272e:	70 0d       	add	r23, r0
    2730:	81 1d       	adc	r24, r1
    2732:	11 24       	eor	r1, r1
    2734:	91 1d       	adc	r25, r1
    2736:	b2 9f       	mul	r27, r18
    2738:	70 0d       	add	r23, r0
    273a:	81 1d       	adc	r24, r1
    273c:	11 24       	eor	r1, r1
    273e:	91 1d       	adc	r25, r1
    2740:	08 95       	ret

00002742 <fdevopen>:
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	ec 01       	movw	r28, r24
    274c:	8b 01       	movw	r16, r22
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	31 f4       	brne	.+12     	; 0x275e <fdevopen+0x1c>
    2752:	61 15       	cp	r22, r1
    2754:	71 05       	cpc	r23, r1
    2756:	19 f4       	brne	.+6      	; 0x275e <fdevopen+0x1c>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	37 c0       	rjmp	.+110    	; 0x27cc <fdevopen+0x8a>
    275e:	6e e0       	ldi	r22, 0x0E	; 14
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	36 d2       	rcall	.+1132   	; 0x2bd4 <calloc>
    2768:	fc 01       	movw	r30, r24
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	a9 f3       	breq	.-22     	; 0x2758 <fdevopen+0x16>
    276e:	80 e8       	ldi	r24, 0x80	; 128
    2770:	83 83       	std	Z+3, r24	; 0x03
    2772:	01 15       	cp	r16, r1
    2774:	11 05       	cpc	r17, r1
    2776:	71 f0       	breq	.+28     	; 0x2794 <fdevopen+0x52>
    2778:	13 87       	std	Z+11, r17	; 0x0b
    277a:	02 87       	std	Z+10, r16	; 0x0a
    277c:	81 e8       	ldi	r24, 0x81	; 129
    277e:	83 83       	std	Z+3, r24	; 0x03
    2780:	80 91 22 02 	lds	r24, 0x0222
    2784:	90 91 23 02 	lds	r25, 0x0223
    2788:	89 2b       	or	r24, r25
    278a:	21 f4       	brne	.+8      	; 0x2794 <fdevopen+0x52>
    278c:	f0 93 23 02 	sts	0x0223, r31
    2790:	e0 93 22 02 	sts	0x0222, r30
    2794:	20 97       	sbiw	r28, 0x00	; 0
    2796:	c9 f0       	breq	.+50     	; 0x27ca <fdevopen+0x88>
    2798:	d1 87       	std	Z+9, r29	; 0x09
    279a:	c0 87       	std	Z+8, r28	; 0x08
    279c:	83 81       	ldd	r24, Z+3	; 0x03
    279e:	82 60       	ori	r24, 0x02	; 2
    27a0:	83 83       	std	Z+3, r24	; 0x03
    27a2:	80 91 24 02 	lds	r24, 0x0224
    27a6:	90 91 25 02 	lds	r25, 0x0225
    27aa:	89 2b       	or	r24, r25
    27ac:	71 f4       	brne	.+28     	; 0x27ca <fdevopen+0x88>
    27ae:	f0 93 25 02 	sts	0x0225, r31
    27b2:	e0 93 24 02 	sts	0x0224, r30
    27b6:	80 91 26 02 	lds	r24, 0x0226
    27ba:	90 91 27 02 	lds	r25, 0x0227
    27be:	89 2b       	or	r24, r25
    27c0:	21 f4       	brne	.+8      	; 0x27ca <fdevopen+0x88>
    27c2:	f0 93 27 02 	sts	0x0227, r31
    27c6:	e0 93 26 02 	sts	0x0226, r30
    27ca:	cf 01       	movw	r24, r30
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	08 95       	ret

000027d6 <printf>:
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	fe 01       	movw	r30, r28
    27e0:	36 96       	adiw	r30, 0x06	; 6
    27e2:	61 91       	ld	r22, Z+
    27e4:	71 91       	ld	r23, Z+
    27e6:	af 01       	movw	r20, r30
    27e8:	80 91 24 02 	lds	r24, 0x0224
    27ec:	90 91 25 02 	lds	r25, 0x0225
    27f0:	03 d0       	rcall	.+6      	; 0x27f8 <vfprintf>
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <vfprintf>:
    27f8:	2f 92       	push	r2
    27fa:	3f 92       	push	r3
    27fc:	4f 92       	push	r4
    27fe:	5f 92       	push	r5
    2800:	6f 92       	push	r6
    2802:	7f 92       	push	r7
    2804:	8f 92       	push	r8
    2806:	9f 92       	push	r9
    2808:	af 92       	push	r10
    280a:	bf 92       	push	r11
    280c:	cf 92       	push	r12
    280e:	df 92       	push	r13
    2810:	ef 92       	push	r14
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
    2816:	1f 93       	push	r17
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	2c 97       	sbiw	r28, 0x0c	; 12
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	7c 01       	movw	r14, r24
    282e:	6b 01       	movw	r12, r22
    2830:	8a 01       	movw	r16, r20
    2832:	fc 01       	movw	r30, r24
    2834:	17 82       	std	Z+7, r1	; 0x07
    2836:	16 82       	std	Z+6, r1	; 0x06
    2838:	83 81       	ldd	r24, Z+3	; 0x03
    283a:	81 ff       	sbrs	r24, 1
    283c:	b0 c1       	rjmp	.+864    	; 0x2b9e <vfprintf+0x3a6>
    283e:	ce 01       	movw	r24, r28
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	4c 01       	movw	r8, r24
    2844:	f7 01       	movw	r30, r14
    2846:	93 81       	ldd	r25, Z+3	; 0x03
    2848:	f6 01       	movw	r30, r12
    284a:	93 fd       	sbrc	r25, 3
    284c:	85 91       	lpm	r24, Z+
    284e:	93 ff       	sbrs	r25, 3
    2850:	81 91       	ld	r24, Z+
    2852:	6f 01       	movw	r12, r30
    2854:	88 23       	and	r24, r24
    2856:	09 f4       	brne	.+2      	; 0x285a <vfprintf+0x62>
    2858:	9e c1       	rjmp	.+828    	; 0x2b96 <vfprintf+0x39e>
    285a:	85 32       	cpi	r24, 0x25	; 37
    285c:	39 f4       	brne	.+14     	; 0x286c <vfprintf+0x74>
    285e:	93 fd       	sbrc	r25, 3
    2860:	85 91       	lpm	r24, Z+
    2862:	93 ff       	sbrs	r25, 3
    2864:	81 91       	ld	r24, Z+
    2866:	6f 01       	movw	r12, r30
    2868:	85 32       	cpi	r24, 0x25	; 37
    286a:	21 f4       	brne	.+8      	; 0x2874 <vfprintf+0x7c>
    286c:	b7 01       	movw	r22, r14
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0f d3       	rcall	.+1566   	; 0x2e90 <fputc>
    2872:	e8 cf       	rjmp	.-48     	; 0x2844 <vfprintf+0x4c>
    2874:	51 2c       	mov	r5, r1
    2876:	31 2c       	mov	r3, r1
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	20 32       	cpi	r18, 0x20	; 32
    287c:	a0 f4       	brcc	.+40     	; 0x28a6 <vfprintf+0xae>
    287e:	8b 32       	cpi	r24, 0x2B	; 43
    2880:	69 f0       	breq	.+26     	; 0x289c <vfprintf+0xa4>
    2882:	30 f4       	brcc	.+12     	; 0x2890 <vfprintf+0x98>
    2884:	80 32       	cpi	r24, 0x20	; 32
    2886:	59 f0       	breq	.+22     	; 0x289e <vfprintf+0xa6>
    2888:	83 32       	cpi	r24, 0x23	; 35
    288a:	69 f4       	brne	.+26     	; 0x28a6 <vfprintf+0xae>
    288c:	20 61       	ori	r18, 0x10	; 16
    288e:	2c c0       	rjmp	.+88     	; 0x28e8 <vfprintf+0xf0>
    2890:	8d 32       	cpi	r24, 0x2D	; 45
    2892:	39 f0       	breq	.+14     	; 0x28a2 <vfprintf+0xaa>
    2894:	80 33       	cpi	r24, 0x30	; 48
    2896:	39 f4       	brne	.+14     	; 0x28a6 <vfprintf+0xae>
    2898:	21 60       	ori	r18, 0x01	; 1
    289a:	26 c0       	rjmp	.+76     	; 0x28e8 <vfprintf+0xf0>
    289c:	22 60       	ori	r18, 0x02	; 2
    289e:	24 60       	ori	r18, 0x04	; 4
    28a0:	23 c0       	rjmp	.+70     	; 0x28e8 <vfprintf+0xf0>
    28a2:	28 60       	ori	r18, 0x08	; 8
    28a4:	21 c0       	rjmp	.+66     	; 0x28e8 <vfprintf+0xf0>
    28a6:	27 fd       	sbrc	r18, 7
    28a8:	27 c0       	rjmp	.+78     	; 0x28f8 <vfprintf+0x100>
    28aa:	30 ed       	ldi	r19, 0xD0	; 208
    28ac:	38 0f       	add	r19, r24
    28ae:	3a 30       	cpi	r19, 0x0A	; 10
    28b0:	78 f4       	brcc	.+30     	; 0x28d0 <vfprintf+0xd8>
    28b2:	26 ff       	sbrs	r18, 6
    28b4:	06 c0       	rjmp	.+12     	; 0x28c2 <vfprintf+0xca>
    28b6:	fa e0       	ldi	r31, 0x0A	; 10
    28b8:	5f 9e       	mul	r5, r31
    28ba:	30 0d       	add	r19, r0
    28bc:	11 24       	eor	r1, r1
    28be:	53 2e       	mov	r5, r19
    28c0:	13 c0       	rjmp	.+38     	; 0x28e8 <vfprintf+0xf0>
    28c2:	8a e0       	ldi	r24, 0x0A	; 10
    28c4:	38 9e       	mul	r3, r24
    28c6:	30 0d       	add	r19, r0
    28c8:	11 24       	eor	r1, r1
    28ca:	33 2e       	mov	r3, r19
    28cc:	20 62       	ori	r18, 0x20	; 32
    28ce:	0c c0       	rjmp	.+24     	; 0x28e8 <vfprintf+0xf0>
    28d0:	8e 32       	cpi	r24, 0x2E	; 46
    28d2:	21 f4       	brne	.+8      	; 0x28dc <vfprintf+0xe4>
    28d4:	26 fd       	sbrc	r18, 6
    28d6:	5f c1       	rjmp	.+702    	; 0x2b96 <vfprintf+0x39e>
    28d8:	20 64       	ori	r18, 0x40	; 64
    28da:	06 c0       	rjmp	.+12     	; 0x28e8 <vfprintf+0xf0>
    28dc:	8c 36       	cpi	r24, 0x6C	; 108
    28de:	11 f4       	brne	.+4      	; 0x28e4 <vfprintf+0xec>
    28e0:	20 68       	ori	r18, 0x80	; 128
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <vfprintf+0xf0>
    28e4:	88 36       	cpi	r24, 0x68	; 104
    28e6:	41 f4       	brne	.+16     	; 0x28f8 <vfprintf+0x100>
    28e8:	f6 01       	movw	r30, r12
    28ea:	93 fd       	sbrc	r25, 3
    28ec:	85 91       	lpm	r24, Z+
    28ee:	93 ff       	sbrs	r25, 3
    28f0:	81 91       	ld	r24, Z+
    28f2:	6f 01       	movw	r12, r30
    28f4:	81 11       	cpse	r24, r1
    28f6:	c1 cf       	rjmp	.-126    	; 0x287a <vfprintf+0x82>
    28f8:	98 2f       	mov	r25, r24
    28fa:	9f 7d       	andi	r25, 0xDF	; 223
    28fc:	95 54       	subi	r25, 0x45	; 69
    28fe:	93 30       	cpi	r25, 0x03	; 3
    2900:	28 f4       	brcc	.+10     	; 0x290c <vfprintf+0x114>
    2902:	0c 5f       	subi	r16, 0xFC	; 252
    2904:	1f 4f       	sbci	r17, 0xFF	; 255
    2906:	ff e3       	ldi	r31, 0x3F	; 63
    2908:	f9 83       	std	Y+1, r31	; 0x01
    290a:	0d c0       	rjmp	.+26     	; 0x2926 <vfprintf+0x12e>
    290c:	83 36       	cpi	r24, 0x63	; 99
    290e:	31 f0       	breq	.+12     	; 0x291c <vfprintf+0x124>
    2910:	83 37       	cpi	r24, 0x73	; 115
    2912:	71 f0       	breq	.+28     	; 0x2930 <vfprintf+0x138>
    2914:	83 35       	cpi	r24, 0x53	; 83
    2916:	09 f0       	breq	.+2      	; 0x291a <vfprintf+0x122>
    2918:	57 c0       	rjmp	.+174    	; 0x29c8 <vfprintf+0x1d0>
    291a:	21 c0       	rjmp	.+66     	; 0x295e <vfprintf+0x166>
    291c:	f8 01       	movw	r30, r16
    291e:	80 81       	ld	r24, Z
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	0e 5f       	subi	r16, 0xFE	; 254
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
    2926:	44 24       	eor	r4, r4
    2928:	43 94       	inc	r4
    292a:	51 2c       	mov	r5, r1
    292c:	54 01       	movw	r10, r8
    292e:	14 c0       	rjmp	.+40     	; 0x2958 <vfprintf+0x160>
    2930:	38 01       	movw	r6, r16
    2932:	f2 e0       	ldi	r31, 0x02	; 2
    2934:	6f 0e       	add	r6, r31
    2936:	71 1c       	adc	r7, r1
    2938:	f8 01       	movw	r30, r16
    293a:	a0 80       	ld	r10, Z
    293c:	b1 80       	ldd	r11, Z+1	; 0x01
    293e:	26 ff       	sbrs	r18, 6
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <vfprintf+0x150>
    2942:	65 2d       	mov	r22, r5
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	02 c0       	rjmp	.+4      	; 0x294c <vfprintf+0x154>
    2948:	6f ef       	ldi	r22, 0xFF	; 255
    294a:	7f ef       	ldi	r23, 0xFF	; 255
    294c:	c5 01       	movw	r24, r10
    294e:	2c 87       	std	Y+12, r18	; 0x0c
    2950:	94 d2       	rcall	.+1320   	; 0x2e7a <strnlen>
    2952:	2c 01       	movw	r4, r24
    2954:	83 01       	movw	r16, r6
    2956:	2c 85       	ldd	r18, Y+12	; 0x0c
    2958:	2f 77       	andi	r18, 0x7F	; 127
    295a:	22 2e       	mov	r2, r18
    295c:	16 c0       	rjmp	.+44     	; 0x298a <vfprintf+0x192>
    295e:	38 01       	movw	r6, r16
    2960:	f2 e0       	ldi	r31, 0x02	; 2
    2962:	6f 0e       	add	r6, r31
    2964:	71 1c       	adc	r7, r1
    2966:	f8 01       	movw	r30, r16
    2968:	a0 80       	ld	r10, Z
    296a:	b1 80       	ldd	r11, Z+1	; 0x01
    296c:	26 ff       	sbrs	r18, 6
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <vfprintf+0x17e>
    2970:	65 2d       	mov	r22, r5
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	02 c0       	rjmp	.+4      	; 0x297a <vfprintf+0x182>
    2976:	6f ef       	ldi	r22, 0xFF	; 255
    2978:	7f ef       	ldi	r23, 0xFF	; 255
    297a:	c5 01       	movw	r24, r10
    297c:	2c 87       	std	Y+12, r18	; 0x0c
    297e:	6b d2       	rcall	.+1238   	; 0x2e56 <strnlen_P>
    2980:	2c 01       	movw	r4, r24
    2982:	2c 85       	ldd	r18, Y+12	; 0x0c
    2984:	20 68       	ori	r18, 0x80	; 128
    2986:	22 2e       	mov	r2, r18
    2988:	83 01       	movw	r16, r6
    298a:	23 fc       	sbrc	r2, 3
    298c:	19 c0       	rjmp	.+50     	; 0x29c0 <vfprintf+0x1c8>
    298e:	83 2d       	mov	r24, r3
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	48 16       	cp	r4, r24
    2994:	59 06       	cpc	r5, r25
    2996:	a0 f4       	brcc	.+40     	; 0x29c0 <vfprintf+0x1c8>
    2998:	b7 01       	movw	r22, r14
    299a:	80 e2       	ldi	r24, 0x20	; 32
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	78 d2       	rcall	.+1264   	; 0x2e90 <fputc>
    29a0:	3a 94       	dec	r3
    29a2:	f5 cf       	rjmp	.-22     	; 0x298e <vfprintf+0x196>
    29a4:	f5 01       	movw	r30, r10
    29a6:	27 fc       	sbrc	r2, 7
    29a8:	85 91       	lpm	r24, Z+
    29aa:	27 fe       	sbrs	r2, 7
    29ac:	81 91       	ld	r24, Z+
    29ae:	5f 01       	movw	r10, r30
    29b0:	b7 01       	movw	r22, r14
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	6d d2       	rcall	.+1242   	; 0x2e90 <fputc>
    29b6:	31 10       	cpse	r3, r1
    29b8:	3a 94       	dec	r3
    29ba:	f1 e0       	ldi	r31, 0x01	; 1
    29bc:	4f 1a       	sub	r4, r31
    29be:	51 08       	sbc	r5, r1
    29c0:	41 14       	cp	r4, r1
    29c2:	51 04       	cpc	r5, r1
    29c4:	79 f7       	brne	.-34     	; 0x29a4 <vfprintf+0x1ac>
    29c6:	de c0       	rjmp	.+444    	; 0x2b84 <vfprintf+0x38c>
    29c8:	84 36       	cpi	r24, 0x64	; 100
    29ca:	11 f0       	breq	.+4      	; 0x29d0 <vfprintf+0x1d8>
    29cc:	89 36       	cpi	r24, 0x69	; 105
    29ce:	31 f5       	brne	.+76     	; 0x2a1c <vfprintf+0x224>
    29d0:	f8 01       	movw	r30, r16
    29d2:	27 ff       	sbrs	r18, 7
    29d4:	07 c0       	rjmp	.+14     	; 0x29e4 <vfprintf+0x1ec>
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	0c 5f       	subi	r16, 0xFC	; 252
    29e0:	1f 4f       	sbci	r17, 0xFF	; 255
    29e2:	08 c0       	rjmp	.+16     	; 0x29f4 <vfprintf+0x1fc>
    29e4:	60 81       	ld	r22, Z
    29e6:	71 81       	ldd	r23, Z+1	; 0x01
    29e8:	88 27       	eor	r24, r24
    29ea:	77 fd       	sbrc	r23, 7
    29ec:	80 95       	com	r24
    29ee:	98 2f       	mov	r25, r24
    29f0:	0e 5f       	subi	r16, 0xFE	; 254
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	2f 76       	andi	r18, 0x6F	; 111
    29f6:	b2 2e       	mov	r11, r18
    29f8:	97 ff       	sbrs	r25, 7
    29fa:	09 c0       	rjmp	.+18     	; 0x2a0e <vfprintf+0x216>
    29fc:	90 95       	com	r25
    29fe:	80 95       	com	r24
    2a00:	70 95       	com	r23
    2a02:	61 95       	neg	r22
    2a04:	7f 4f       	sbci	r23, 0xFF	; 255
    2a06:	8f 4f       	sbci	r24, 0xFF	; 255
    2a08:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0a:	20 68       	ori	r18, 0x80	; 128
    2a0c:	b2 2e       	mov	r11, r18
    2a0e:	2a e0       	ldi	r18, 0x0A	; 10
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	a4 01       	movw	r20, r8
    2a14:	6f d2       	rcall	.+1246   	; 0x2ef4 <__ultoa_invert>
    2a16:	a8 2e       	mov	r10, r24
    2a18:	a8 18       	sub	r10, r8
    2a1a:	43 c0       	rjmp	.+134    	; 0x2aa2 <vfprintf+0x2aa>
    2a1c:	85 37       	cpi	r24, 0x75	; 117
    2a1e:	29 f4       	brne	.+10     	; 0x2a2a <vfprintf+0x232>
    2a20:	2f 7e       	andi	r18, 0xEF	; 239
    2a22:	b2 2e       	mov	r11, r18
    2a24:	2a e0       	ldi	r18, 0x0A	; 10
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	25 c0       	rjmp	.+74     	; 0x2a74 <vfprintf+0x27c>
    2a2a:	f2 2f       	mov	r31, r18
    2a2c:	f9 7f       	andi	r31, 0xF9	; 249
    2a2e:	bf 2e       	mov	r11, r31
    2a30:	8f 36       	cpi	r24, 0x6F	; 111
    2a32:	c1 f0       	breq	.+48     	; 0x2a64 <vfprintf+0x26c>
    2a34:	18 f4       	brcc	.+6      	; 0x2a3c <vfprintf+0x244>
    2a36:	88 35       	cpi	r24, 0x58	; 88
    2a38:	79 f0       	breq	.+30     	; 0x2a58 <vfprintf+0x260>
    2a3a:	ad c0       	rjmp	.+346    	; 0x2b96 <vfprintf+0x39e>
    2a3c:	80 37       	cpi	r24, 0x70	; 112
    2a3e:	19 f0       	breq	.+6      	; 0x2a46 <vfprintf+0x24e>
    2a40:	88 37       	cpi	r24, 0x78	; 120
    2a42:	21 f0       	breq	.+8      	; 0x2a4c <vfprintf+0x254>
    2a44:	a8 c0       	rjmp	.+336    	; 0x2b96 <vfprintf+0x39e>
    2a46:	2f 2f       	mov	r18, r31
    2a48:	20 61       	ori	r18, 0x10	; 16
    2a4a:	b2 2e       	mov	r11, r18
    2a4c:	b4 fe       	sbrs	r11, 4
    2a4e:	0d c0       	rjmp	.+26     	; 0x2a6a <vfprintf+0x272>
    2a50:	8b 2d       	mov	r24, r11
    2a52:	84 60       	ori	r24, 0x04	; 4
    2a54:	b8 2e       	mov	r11, r24
    2a56:	09 c0       	rjmp	.+18     	; 0x2a6a <vfprintf+0x272>
    2a58:	24 ff       	sbrs	r18, 4
    2a5a:	0a c0       	rjmp	.+20     	; 0x2a70 <vfprintf+0x278>
    2a5c:	9f 2f       	mov	r25, r31
    2a5e:	96 60       	ori	r25, 0x06	; 6
    2a60:	b9 2e       	mov	r11, r25
    2a62:	06 c0       	rjmp	.+12     	; 0x2a70 <vfprintf+0x278>
    2a64:	28 e0       	ldi	r18, 0x08	; 8
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	05 c0       	rjmp	.+10     	; 0x2a74 <vfprintf+0x27c>
    2a6a:	20 e1       	ldi	r18, 0x10	; 16
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <vfprintf+0x27c>
    2a70:	20 e1       	ldi	r18, 0x10	; 16
    2a72:	32 e0       	ldi	r19, 0x02	; 2
    2a74:	f8 01       	movw	r30, r16
    2a76:	b7 fe       	sbrs	r11, 7
    2a78:	07 c0       	rjmp	.+14     	; 0x2a88 <vfprintf+0x290>
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	0c 5f       	subi	r16, 0xFC	; 252
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	06 c0       	rjmp	.+12     	; 0x2a94 <vfprintf+0x29c>
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	0e 5f       	subi	r16, 0xFE	; 254
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	a4 01       	movw	r20, r8
    2a96:	2e d2       	rcall	.+1116   	; 0x2ef4 <__ultoa_invert>
    2a98:	a8 2e       	mov	r10, r24
    2a9a:	a8 18       	sub	r10, r8
    2a9c:	fb 2d       	mov	r31, r11
    2a9e:	ff 77       	andi	r31, 0x7F	; 127
    2aa0:	bf 2e       	mov	r11, r31
    2aa2:	b6 fe       	sbrs	r11, 6
    2aa4:	0b c0       	rjmp	.+22     	; 0x2abc <vfprintf+0x2c4>
    2aa6:	2b 2d       	mov	r18, r11
    2aa8:	2e 7f       	andi	r18, 0xFE	; 254
    2aaa:	a5 14       	cp	r10, r5
    2aac:	50 f4       	brcc	.+20     	; 0x2ac2 <vfprintf+0x2ca>
    2aae:	b4 fe       	sbrs	r11, 4
    2ab0:	0a c0       	rjmp	.+20     	; 0x2ac6 <vfprintf+0x2ce>
    2ab2:	b2 fc       	sbrc	r11, 2
    2ab4:	08 c0       	rjmp	.+16     	; 0x2ac6 <vfprintf+0x2ce>
    2ab6:	2b 2d       	mov	r18, r11
    2ab8:	2e 7e       	andi	r18, 0xEE	; 238
    2aba:	05 c0       	rjmp	.+10     	; 0x2ac6 <vfprintf+0x2ce>
    2abc:	7a 2c       	mov	r7, r10
    2abe:	2b 2d       	mov	r18, r11
    2ac0:	03 c0       	rjmp	.+6      	; 0x2ac8 <vfprintf+0x2d0>
    2ac2:	7a 2c       	mov	r7, r10
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <vfprintf+0x2d0>
    2ac6:	75 2c       	mov	r7, r5
    2ac8:	24 ff       	sbrs	r18, 4
    2aca:	0d c0       	rjmp	.+26     	; 0x2ae6 <vfprintf+0x2ee>
    2acc:	fe 01       	movw	r30, r28
    2ace:	ea 0d       	add	r30, r10
    2ad0:	f1 1d       	adc	r31, r1
    2ad2:	80 81       	ld	r24, Z
    2ad4:	80 33       	cpi	r24, 0x30	; 48
    2ad6:	11 f4       	brne	.+4      	; 0x2adc <vfprintf+0x2e4>
    2ad8:	29 7e       	andi	r18, 0xE9	; 233
    2ada:	09 c0       	rjmp	.+18     	; 0x2aee <vfprintf+0x2f6>
    2adc:	22 ff       	sbrs	r18, 2
    2ade:	06 c0       	rjmp	.+12     	; 0x2aec <vfprintf+0x2f4>
    2ae0:	73 94       	inc	r7
    2ae2:	73 94       	inc	r7
    2ae4:	04 c0       	rjmp	.+8      	; 0x2aee <vfprintf+0x2f6>
    2ae6:	82 2f       	mov	r24, r18
    2ae8:	86 78       	andi	r24, 0x86	; 134
    2aea:	09 f0       	breq	.+2      	; 0x2aee <vfprintf+0x2f6>
    2aec:	73 94       	inc	r7
    2aee:	23 fd       	sbrc	r18, 3
    2af0:	12 c0       	rjmp	.+36     	; 0x2b16 <vfprintf+0x31e>
    2af2:	20 ff       	sbrs	r18, 0
    2af4:	06 c0       	rjmp	.+12     	; 0x2b02 <vfprintf+0x30a>
    2af6:	5a 2c       	mov	r5, r10
    2af8:	73 14       	cp	r7, r3
    2afa:	18 f4       	brcc	.+6      	; 0x2b02 <vfprintf+0x30a>
    2afc:	53 0c       	add	r5, r3
    2afe:	57 18       	sub	r5, r7
    2b00:	73 2c       	mov	r7, r3
    2b02:	73 14       	cp	r7, r3
    2b04:	60 f4       	brcc	.+24     	; 0x2b1e <vfprintf+0x326>
    2b06:	b7 01       	movw	r22, r14
    2b08:	80 e2       	ldi	r24, 0x20	; 32
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	2c 87       	std	Y+12, r18	; 0x0c
    2b0e:	c0 d1       	rcall	.+896    	; 0x2e90 <fputc>
    2b10:	73 94       	inc	r7
    2b12:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b14:	f6 cf       	rjmp	.-20     	; 0x2b02 <vfprintf+0x30a>
    2b16:	73 14       	cp	r7, r3
    2b18:	10 f4       	brcc	.+4      	; 0x2b1e <vfprintf+0x326>
    2b1a:	37 18       	sub	r3, r7
    2b1c:	01 c0       	rjmp	.+2      	; 0x2b20 <vfprintf+0x328>
    2b1e:	31 2c       	mov	r3, r1
    2b20:	24 ff       	sbrs	r18, 4
    2b22:	11 c0       	rjmp	.+34     	; 0x2b46 <vfprintf+0x34e>
    2b24:	b7 01       	movw	r22, r14
    2b26:	80 e3       	ldi	r24, 0x30	; 48
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	2c 87       	std	Y+12, r18	; 0x0c
    2b2c:	b1 d1       	rcall	.+866    	; 0x2e90 <fputc>
    2b2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b30:	22 ff       	sbrs	r18, 2
    2b32:	16 c0       	rjmp	.+44     	; 0x2b60 <vfprintf+0x368>
    2b34:	21 ff       	sbrs	r18, 1
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <vfprintf+0x346>
    2b38:	88 e5       	ldi	r24, 0x58	; 88
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <vfprintf+0x34a>
    2b3e:	88 e7       	ldi	r24, 0x78	; 120
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	b7 01       	movw	r22, r14
    2b44:	0c c0       	rjmp	.+24     	; 0x2b5e <vfprintf+0x366>
    2b46:	82 2f       	mov	r24, r18
    2b48:	86 78       	andi	r24, 0x86	; 134
    2b4a:	51 f0       	breq	.+20     	; 0x2b60 <vfprintf+0x368>
    2b4c:	21 fd       	sbrc	r18, 1
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <vfprintf+0x35c>
    2b50:	80 e2       	ldi	r24, 0x20	; 32
    2b52:	01 c0       	rjmp	.+2      	; 0x2b56 <vfprintf+0x35e>
    2b54:	8b e2       	ldi	r24, 0x2B	; 43
    2b56:	27 fd       	sbrc	r18, 7
    2b58:	8d e2       	ldi	r24, 0x2D	; 45
    2b5a:	b7 01       	movw	r22, r14
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	98 d1       	rcall	.+816    	; 0x2e90 <fputc>
    2b60:	a5 14       	cp	r10, r5
    2b62:	30 f4       	brcc	.+12     	; 0x2b70 <vfprintf+0x378>
    2b64:	b7 01       	movw	r22, r14
    2b66:	80 e3       	ldi	r24, 0x30	; 48
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	92 d1       	rcall	.+804    	; 0x2e90 <fputc>
    2b6c:	5a 94       	dec	r5
    2b6e:	f8 cf       	rjmp	.-16     	; 0x2b60 <vfprintf+0x368>
    2b70:	aa 94       	dec	r10
    2b72:	f4 01       	movw	r30, r8
    2b74:	ea 0d       	add	r30, r10
    2b76:	f1 1d       	adc	r31, r1
    2b78:	80 81       	ld	r24, Z
    2b7a:	b7 01       	movw	r22, r14
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	88 d1       	rcall	.+784    	; 0x2e90 <fputc>
    2b80:	a1 10       	cpse	r10, r1
    2b82:	f6 cf       	rjmp	.-20     	; 0x2b70 <vfprintf+0x378>
    2b84:	33 20       	and	r3, r3
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <vfprintf+0x392>
    2b88:	5d ce       	rjmp	.-838    	; 0x2844 <vfprintf+0x4c>
    2b8a:	b7 01       	movw	r22, r14
    2b8c:	80 e2       	ldi	r24, 0x20	; 32
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	7f d1       	rcall	.+766    	; 0x2e90 <fputc>
    2b92:	3a 94       	dec	r3
    2b94:	f7 cf       	rjmp	.-18     	; 0x2b84 <vfprintf+0x38c>
    2b96:	f7 01       	movw	r30, r14
    2b98:	86 81       	ldd	r24, Z+6	; 0x06
    2b9a:	97 81       	ldd	r25, Z+7	; 0x07
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <vfprintf+0x3aa>
    2b9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ba0:	9f ef       	ldi	r25, 0xFF	; 255
    2ba2:	2c 96       	adiw	r28, 0x0c	; 12
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	ff 90       	pop	r15
    2bb8:	ef 90       	pop	r14
    2bba:	df 90       	pop	r13
    2bbc:	cf 90       	pop	r12
    2bbe:	bf 90       	pop	r11
    2bc0:	af 90       	pop	r10
    2bc2:	9f 90       	pop	r9
    2bc4:	8f 90       	pop	r8
    2bc6:	7f 90       	pop	r7
    2bc8:	6f 90       	pop	r6
    2bca:	5f 90       	pop	r5
    2bcc:	4f 90       	pop	r4
    2bce:	3f 90       	pop	r3
    2bd0:	2f 90       	pop	r2
    2bd2:	08 95       	ret

00002bd4 <calloc>:
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	86 9f       	mul	r24, r22
    2bde:	80 01       	movw	r16, r0
    2be0:	87 9f       	mul	r24, r23
    2be2:	10 0d       	add	r17, r0
    2be4:	96 9f       	mul	r25, r22
    2be6:	10 0d       	add	r17, r0
    2be8:	11 24       	eor	r1, r1
    2bea:	c8 01       	movw	r24, r16
    2bec:	0d d0       	rcall	.+26     	; 0x2c08 <malloc>
    2bee:	ec 01       	movw	r28, r24
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	21 f0       	breq	.+8      	; 0x2bfc <calloc+0x28>
    2bf4:	a8 01       	movw	r20, r16
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	38 d1       	rcall	.+624    	; 0x2e6c <memset>
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	08 95       	ret

00002c08 <malloc>:
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	82 30       	cpi	r24, 0x02	; 2
    2c0e:	91 05       	cpc	r25, r1
    2c10:	10 f4       	brcc	.+4      	; 0x2c16 <malloc+0xe>
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	e0 91 2a 02 	lds	r30, 0x022A
    2c1a:	f0 91 2b 02 	lds	r31, 0x022B
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	a0 e0       	ldi	r26, 0x00	; 0
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	30 97       	sbiw	r30, 0x00	; 0
    2c28:	39 f1       	breq	.+78     	; 0x2c78 <malloc+0x70>
    2c2a:	40 81       	ld	r20, Z
    2c2c:	51 81       	ldd	r21, Z+1	; 0x01
    2c2e:	48 17       	cp	r20, r24
    2c30:	59 07       	cpc	r21, r25
    2c32:	b8 f0       	brcs	.+46     	; 0x2c62 <malloc+0x5a>
    2c34:	48 17       	cp	r20, r24
    2c36:	59 07       	cpc	r21, r25
    2c38:	71 f4       	brne	.+28     	; 0x2c56 <malloc+0x4e>
    2c3a:	82 81       	ldd	r24, Z+2	; 0x02
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	10 97       	sbiw	r26, 0x00	; 0
    2c40:	29 f0       	breq	.+10     	; 0x2c4c <malloc+0x44>
    2c42:	13 96       	adiw	r26, 0x03	; 3
    2c44:	9c 93       	st	X, r25
    2c46:	8e 93       	st	-X, r24
    2c48:	12 97       	sbiw	r26, 0x02	; 2
    2c4a:	2c c0       	rjmp	.+88     	; 0x2ca4 <malloc+0x9c>
    2c4c:	90 93 2b 02 	sts	0x022B, r25
    2c50:	80 93 2a 02 	sts	0x022A, r24
    2c54:	27 c0       	rjmp	.+78     	; 0x2ca4 <malloc+0x9c>
    2c56:	21 15       	cp	r18, r1
    2c58:	31 05       	cpc	r19, r1
    2c5a:	31 f0       	breq	.+12     	; 0x2c68 <malloc+0x60>
    2c5c:	42 17       	cp	r20, r18
    2c5e:	53 07       	cpc	r21, r19
    2c60:	18 f0       	brcs	.+6      	; 0x2c68 <malloc+0x60>
    2c62:	a9 01       	movw	r20, r18
    2c64:	db 01       	movw	r26, r22
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <malloc+0x62>
    2c68:	ef 01       	movw	r28, r30
    2c6a:	9a 01       	movw	r18, r20
    2c6c:	bd 01       	movw	r22, r26
    2c6e:	df 01       	movw	r26, r30
    2c70:	02 80       	ldd	r0, Z+2	; 0x02
    2c72:	f3 81       	ldd	r31, Z+3	; 0x03
    2c74:	e0 2d       	mov	r30, r0
    2c76:	d7 cf       	rjmp	.-82     	; 0x2c26 <malloc+0x1e>
    2c78:	21 15       	cp	r18, r1
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	f9 f0       	breq	.+62     	; 0x2cbc <malloc+0xb4>
    2c7e:	28 1b       	sub	r18, r24
    2c80:	39 0b       	sbc	r19, r25
    2c82:	24 30       	cpi	r18, 0x04	; 4
    2c84:	31 05       	cpc	r19, r1
    2c86:	80 f4       	brcc	.+32     	; 0x2ca8 <malloc+0xa0>
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	61 15       	cp	r22, r1
    2c8e:	71 05       	cpc	r23, r1
    2c90:	21 f0       	breq	.+8      	; 0x2c9a <malloc+0x92>
    2c92:	fb 01       	movw	r30, r22
    2c94:	93 83       	std	Z+3, r25	; 0x03
    2c96:	82 83       	std	Z+2, r24	; 0x02
    2c98:	04 c0       	rjmp	.+8      	; 0x2ca2 <malloc+0x9a>
    2c9a:	90 93 2b 02 	sts	0x022B, r25
    2c9e:	80 93 2a 02 	sts	0x022A, r24
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	32 96       	adiw	r30, 0x02	; 2
    2ca6:	44 c0       	rjmp	.+136    	; 0x2d30 <malloc+0x128>
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e2 0f       	add	r30, r18
    2cac:	f3 1f       	adc	r31, r19
    2cae:	81 93       	st	Z+, r24
    2cb0:	91 93       	st	Z+, r25
    2cb2:	22 50       	subi	r18, 0x02	; 2
    2cb4:	31 09       	sbc	r19, r1
    2cb6:	39 83       	std	Y+1, r19	; 0x01
    2cb8:	28 83       	st	Y, r18
    2cba:	3a c0       	rjmp	.+116    	; 0x2d30 <malloc+0x128>
    2cbc:	20 91 28 02 	lds	r18, 0x0228
    2cc0:	30 91 29 02 	lds	r19, 0x0229
    2cc4:	23 2b       	or	r18, r19
    2cc6:	41 f4       	brne	.+16     	; 0x2cd8 <malloc+0xd0>
    2cc8:	20 91 02 02 	lds	r18, 0x0202
    2ccc:	30 91 03 02 	lds	r19, 0x0203
    2cd0:	30 93 29 02 	sts	0x0229, r19
    2cd4:	20 93 28 02 	sts	0x0228, r18
    2cd8:	20 91 00 02 	lds	r18, 0x0200
    2cdc:	30 91 01 02 	lds	r19, 0x0201
    2ce0:	21 15       	cp	r18, r1
    2ce2:	31 05       	cpc	r19, r1
    2ce4:	41 f4       	brne	.+16     	; 0x2cf6 <malloc+0xee>
    2ce6:	2d b7       	in	r18, 0x3d	; 61
    2ce8:	3e b7       	in	r19, 0x3e	; 62
    2cea:	40 91 04 02 	lds	r20, 0x0204
    2cee:	50 91 05 02 	lds	r21, 0x0205
    2cf2:	24 1b       	sub	r18, r20
    2cf4:	35 0b       	sbc	r19, r21
    2cf6:	e0 91 28 02 	lds	r30, 0x0228
    2cfa:	f0 91 29 02 	lds	r31, 0x0229
    2cfe:	e2 17       	cp	r30, r18
    2d00:	f3 07       	cpc	r31, r19
    2d02:	a0 f4       	brcc	.+40     	; 0x2d2c <malloc+0x124>
    2d04:	2e 1b       	sub	r18, r30
    2d06:	3f 0b       	sbc	r19, r31
    2d08:	28 17       	cp	r18, r24
    2d0a:	39 07       	cpc	r19, r25
    2d0c:	78 f0       	brcs	.+30     	; 0x2d2c <malloc+0x124>
    2d0e:	ac 01       	movw	r20, r24
    2d10:	4e 5f       	subi	r20, 0xFE	; 254
    2d12:	5f 4f       	sbci	r21, 0xFF	; 255
    2d14:	24 17       	cp	r18, r20
    2d16:	35 07       	cpc	r19, r21
    2d18:	48 f0       	brcs	.+18     	; 0x2d2c <malloc+0x124>
    2d1a:	4e 0f       	add	r20, r30
    2d1c:	5f 1f       	adc	r21, r31
    2d1e:	50 93 29 02 	sts	0x0229, r21
    2d22:	40 93 28 02 	sts	0x0228, r20
    2d26:	81 93       	st	Z+, r24
    2d28:	91 93       	st	Z+, r25
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <malloc+0x128>
    2d2c:	e0 e0       	ldi	r30, 0x00	; 0
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	cf 01       	movw	r24, r30
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	08 95       	ret

00002d38 <free>:
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <free+0xa>
    2d40:	87 c0       	rjmp	.+270    	; 0x2e50 <free+0x118>
    2d42:	fc 01       	movw	r30, r24
    2d44:	32 97       	sbiw	r30, 0x02	; 2
    2d46:	13 82       	std	Z+3, r1	; 0x03
    2d48:	12 82       	std	Z+2, r1	; 0x02
    2d4a:	c0 91 2a 02 	lds	r28, 0x022A
    2d4e:	d0 91 2b 02 	lds	r29, 0x022B
    2d52:	20 97       	sbiw	r28, 0x00	; 0
    2d54:	81 f4       	brne	.+32     	; 0x2d76 <free+0x3e>
    2d56:	20 81       	ld	r18, Z
    2d58:	31 81       	ldd	r19, Z+1	; 0x01
    2d5a:	28 0f       	add	r18, r24
    2d5c:	39 1f       	adc	r19, r25
    2d5e:	80 91 28 02 	lds	r24, 0x0228
    2d62:	90 91 29 02 	lds	r25, 0x0229
    2d66:	82 17       	cp	r24, r18
    2d68:	93 07       	cpc	r25, r19
    2d6a:	79 f5       	brne	.+94     	; 0x2dca <free+0x92>
    2d6c:	f0 93 29 02 	sts	0x0229, r31
    2d70:	e0 93 28 02 	sts	0x0228, r30
    2d74:	6d c0       	rjmp	.+218    	; 0x2e50 <free+0x118>
    2d76:	de 01       	movw	r26, r28
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	ae 17       	cp	r26, r30
    2d7e:	bf 07       	cpc	r27, r31
    2d80:	50 f4       	brcc	.+20     	; 0x2d96 <free+0x5e>
    2d82:	12 96       	adiw	r26, 0x02	; 2
    2d84:	4d 91       	ld	r20, X+
    2d86:	5c 91       	ld	r21, X
    2d88:	13 97       	sbiw	r26, 0x03	; 3
    2d8a:	9d 01       	movw	r18, r26
    2d8c:	41 15       	cp	r20, r1
    2d8e:	51 05       	cpc	r21, r1
    2d90:	09 f1       	breq	.+66     	; 0x2dd4 <free+0x9c>
    2d92:	da 01       	movw	r26, r20
    2d94:	f3 cf       	rjmp	.-26     	; 0x2d7c <free+0x44>
    2d96:	b3 83       	std	Z+3, r27	; 0x03
    2d98:	a2 83       	std	Z+2, r26	; 0x02
    2d9a:	40 81       	ld	r20, Z
    2d9c:	51 81       	ldd	r21, Z+1	; 0x01
    2d9e:	84 0f       	add	r24, r20
    2da0:	95 1f       	adc	r25, r21
    2da2:	8a 17       	cp	r24, r26
    2da4:	9b 07       	cpc	r25, r27
    2da6:	71 f4       	brne	.+28     	; 0x2dc4 <free+0x8c>
    2da8:	8d 91       	ld	r24, X+
    2daa:	9c 91       	ld	r25, X
    2dac:	11 97       	sbiw	r26, 0x01	; 1
    2dae:	84 0f       	add	r24, r20
    2db0:	95 1f       	adc	r25, r21
    2db2:	02 96       	adiw	r24, 0x02	; 2
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	12 96       	adiw	r26, 0x02	; 2
    2dba:	8d 91       	ld	r24, X+
    2dbc:	9c 91       	ld	r25, X
    2dbe:	13 97       	sbiw	r26, 0x03	; 3
    2dc0:	93 83       	std	Z+3, r25	; 0x03
    2dc2:	82 83       	std	Z+2, r24	; 0x02
    2dc4:	21 15       	cp	r18, r1
    2dc6:	31 05       	cpc	r19, r1
    2dc8:	29 f4       	brne	.+10     	; 0x2dd4 <free+0x9c>
    2dca:	f0 93 2b 02 	sts	0x022B, r31
    2dce:	e0 93 2a 02 	sts	0x022A, r30
    2dd2:	3e c0       	rjmp	.+124    	; 0x2e50 <free+0x118>
    2dd4:	d9 01       	movw	r26, r18
    2dd6:	13 96       	adiw	r26, 0x03	; 3
    2dd8:	fc 93       	st	X, r31
    2dda:	ee 93       	st	-X, r30
    2ddc:	12 97       	sbiw	r26, 0x02	; 2
    2dde:	4d 91       	ld	r20, X+
    2de0:	5d 91       	ld	r21, X+
    2de2:	a4 0f       	add	r26, r20
    2de4:	b5 1f       	adc	r27, r21
    2de6:	ea 17       	cp	r30, r26
    2de8:	fb 07       	cpc	r31, r27
    2dea:	79 f4       	brne	.+30     	; 0x2e0a <free+0xd2>
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	84 0f       	add	r24, r20
    2df2:	95 1f       	adc	r25, r21
    2df4:	02 96       	adiw	r24, 0x02	; 2
    2df6:	d9 01       	movw	r26, r18
    2df8:	11 96       	adiw	r26, 0x01	; 1
    2dfa:	9c 93       	st	X, r25
    2dfc:	8e 93       	st	-X, r24
    2dfe:	82 81       	ldd	r24, Z+2	; 0x02
    2e00:	93 81       	ldd	r25, Z+3	; 0x03
    2e02:	13 96       	adiw	r26, 0x03	; 3
    2e04:	9c 93       	st	X, r25
    2e06:	8e 93       	st	-X, r24
    2e08:	12 97       	sbiw	r26, 0x02	; 2
    2e0a:	e0 e0       	ldi	r30, 0x00	; 0
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	9b 81       	ldd	r25, Y+3	; 0x03
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	19 f0       	breq	.+6      	; 0x2e1c <free+0xe4>
    2e16:	fe 01       	movw	r30, r28
    2e18:	ec 01       	movw	r28, r24
    2e1a:	f9 cf       	rjmp	.-14     	; 0x2e0e <free+0xd6>
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	02 96       	adiw	r24, 0x02	; 2
    2e20:	28 81       	ld	r18, Y
    2e22:	39 81       	ldd	r19, Y+1	; 0x01
    2e24:	82 0f       	add	r24, r18
    2e26:	93 1f       	adc	r25, r19
    2e28:	20 91 28 02 	lds	r18, 0x0228
    2e2c:	30 91 29 02 	lds	r19, 0x0229
    2e30:	28 17       	cp	r18, r24
    2e32:	39 07       	cpc	r19, r25
    2e34:	69 f4       	brne	.+26     	; 0x2e50 <free+0x118>
    2e36:	30 97       	sbiw	r30, 0x00	; 0
    2e38:	29 f4       	brne	.+10     	; 0x2e44 <free+0x10c>
    2e3a:	10 92 2b 02 	sts	0x022B, r1
    2e3e:	10 92 2a 02 	sts	0x022A, r1
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <free+0x110>
    2e44:	13 82       	std	Z+3, r1	; 0x03
    2e46:	12 82       	std	Z+2, r1	; 0x02
    2e48:	d0 93 29 02 	sts	0x0229, r29
    2e4c:	c0 93 28 02 	sts	0x0228, r28
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	08 95       	ret

00002e56 <strnlen_P>:
    2e56:	fc 01       	movw	r30, r24
    2e58:	05 90       	lpm	r0, Z+
    2e5a:	61 50       	subi	r22, 0x01	; 1
    2e5c:	70 40       	sbci	r23, 0x00	; 0
    2e5e:	01 10       	cpse	r0, r1
    2e60:	d8 f7       	brcc	.-10     	; 0x2e58 <strnlen_P+0x2>
    2e62:	80 95       	com	r24
    2e64:	90 95       	com	r25
    2e66:	8e 0f       	add	r24, r30
    2e68:	9f 1f       	adc	r25, r31
    2e6a:	08 95       	ret

00002e6c <memset>:
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <memset+0x6>
    2e70:	6d 93       	st	X+, r22
    2e72:	41 50       	subi	r20, 0x01	; 1
    2e74:	50 40       	sbci	r21, 0x00	; 0
    2e76:	e0 f7       	brcc	.-8      	; 0x2e70 <memset+0x4>
    2e78:	08 95       	ret

00002e7a <strnlen>:
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	61 50       	subi	r22, 0x01	; 1
    2e7e:	70 40       	sbci	r23, 0x00	; 0
    2e80:	01 90       	ld	r0, Z+
    2e82:	01 10       	cpse	r0, r1
    2e84:	d8 f7       	brcc	.-10     	; 0x2e7c <strnlen+0x2>
    2e86:	80 95       	com	r24
    2e88:	90 95       	com	r25
    2e8a:	8e 0f       	add	r24, r30
    2e8c:	9f 1f       	adc	r25, r31
    2e8e:	08 95       	ret

00002e90 <fputc>:
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	18 2f       	mov	r17, r24
    2e9a:	09 2f       	mov	r16, r25
    2e9c:	eb 01       	movw	r28, r22
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	81 fd       	sbrc	r24, 1
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <fputc+0x1a>
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
    2ea6:	9f ef       	ldi	r25, 0xFF	; 255
    2ea8:	20 c0       	rjmp	.+64     	; 0x2eea <fputc+0x5a>
    2eaa:	82 ff       	sbrs	r24, 2
    2eac:	10 c0       	rjmp	.+32     	; 0x2ece <fputc+0x3e>
    2eae:	4e 81       	ldd	r20, Y+6	; 0x06
    2eb0:	5f 81       	ldd	r21, Y+7	; 0x07
    2eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb6:	42 17       	cp	r20, r18
    2eb8:	53 07       	cpc	r21, r19
    2eba:	7c f4       	brge	.+30     	; 0x2eda <fputc+0x4a>
    2ebc:	e8 81       	ld	r30, Y
    2ebe:	f9 81       	ldd	r31, Y+1	; 0x01
    2ec0:	9f 01       	movw	r18, r30
    2ec2:	2f 5f       	subi	r18, 0xFF	; 255
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	39 83       	std	Y+1, r19	; 0x01
    2ec8:	28 83       	st	Y, r18
    2eca:	10 83       	st	Z, r17
    2ecc:	06 c0       	rjmp	.+12     	; 0x2eda <fputc+0x4a>
    2ece:	e8 85       	ldd	r30, Y+8	; 0x08
    2ed0:	f9 85       	ldd	r31, Y+9	; 0x09
    2ed2:	81 2f       	mov	r24, r17
    2ed4:	19 95       	eicall
    2ed6:	89 2b       	or	r24, r25
    2ed8:	29 f7       	brne	.-54     	; 0x2ea4 <fputc+0x14>
    2eda:	2e 81       	ldd	r18, Y+6	; 0x06
    2edc:	3f 81       	ldd	r19, Y+7	; 0x07
    2ede:	2f 5f       	subi	r18, 0xFF	; 255
    2ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee2:	3f 83       	std	Y+7, r19	; 0x07
    2ee4:	2e 83       	std	Y+6, r18	; 0x06
    2ee6:	81 2f       	mov	r24, r17
    2ee8:	90 2f       	mov	r25, r16
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	1f 91       	pop	r17
    2ef0:	0f 91       	pop	r16
    2ef2:	08 95       	ret

00002ef4 <__ultoa_invert>:
    2ef4:	fa 01       	movw	r30, r20
    2ef6:	aa 27       	eor	r26, r26
    2ef8:	28 30       	cpi	r18, 0x08	; 8
    2efa:	51 f1       	breq	.+84     	; 0x2f50 <__ultoa_invert+0x5c>
    2efc:	20 31       	cpi	r18, 0x10	; 16
    2efe:	81 f1       	breq	.+96     	; 0x2f60 <__ultoa_invert+0x6c>
    2f00:	e8 94       	clt
    2f02:	6f 93       	push	r22
    2f04:	6e 7f       	andi	r22, 0xFE	; 254
    2f06:	6e 5f       	subi	r22, 0xFE	; 254
    2f08:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0e:	af 4f       	sbci	r26, 0xFF	; 255
    2f10:	b1 e0       	ldi	r27, 0x01	; 1
    2f12:	3e d0       	rcall	.+124    	; 0x2f90 <__ultoa_invert+0x9c>
    2f14:	b4 e0       	ldi	r27, 0x04	; 4
    2f16:	3c d0       	rcall	.+120    	; 0x2f90 <__ultoa_invert+0x9c>
    2f18:	67 0f       	add	r22, r23
    2f1a:	78 1f       	adc	r23, r24
    2f1c:	89 1f       	adc	r24, r25
    2f1e:	9a 1f       	adc	r25, r26
    2f20:	a1 1d       	adc	r26, r1
    2f22:	68 0f       	add	r22, r24
    2f24:	79 1f       	adc	r23, r25
    2f26:	8a 1f       	adc	r24, r26
    2f28:	91 1d       	adc	r25, r1
    2f2a:	a1 1d       	adc	r26, r1
    2f2c:	6a 0f       	add	r22, r26
    2f2e:	71 1d       	adc	r23, r1
    2f30:	81 1d       	adc	r24, r1
    2f32:	91 1d       	adc	r25, r1
    2f34:	a1 1d       	adc	r26, r1
    2f36:	20 d0       	rcall	.+64     	; 0x2f78 <__ultoa_invert+0x84>
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <__ultoa_invert+0x48>
    2f3a:	68 94       	set
    2f3c:	3f 91       	pop	r19
    2f3e:	2a e0       	ldi	r18, 0x0A	; 10
    2f40:	26 9f       	mul	r18, r22
    2f42:	11 24       	eor	r1, r1
    2f44:	30 19       	sub	r19, r0
    2f46:	30 5d       	subi	r19, 0xD0	; 208
    2f48:	31 93       	st	Z+, r19
    2f4a:	de f6       	brtc	.-74     	; 0x2f02 <__ultoa_invert+0xe>
    2f4c:	cf 01       	movw	r24, r30
    2f4e:	08 95       	ret
    2f50:	46 2f       	mov	r20, r22
    2f52:	47 70       	andi	r20, 0x07	; 7
    2f54:	40 5d       	subi	r20, 0xD0	; 208
    2f56:	41 93       	st	Z+, r20
    2f58:	b3 e0       	ldi	r27, 0x03	; 3
    2f5a:	0f d0       	rcall	.+30     	; 0x2f7a <__ultoa_invert+0x86>
    2f5c:	c9 f7       	brne	.-14     	; 0x2f50 <__ultoa_invert+0x5c>
    2f5e:	f6 cf       	rjmp	.-20     	; 0x2f4c <__ultoa_invert+0x58>
    2f60:	46 2f       	mov	r20, r22
    2f62:	4f 70       	andi	r20, 0x0F	; 15
    2f64:	40 5d       	subi	r20, 0xD0	; 208
    2f66:	4a 33       	cpi	r20, 0x3A	; 58
    2f68:	18 f0       	brcs	.+6      	; 0x2f70 <__ultoa_invert+0x7c>
    2f6a:	49 5d       	subi	r20, 0xD9	; 217
    2f6c:	31 fd       	sbrc	r19, 1
    2f6e:	40 52       	subi	r20, 0x20	; 32
    2f70:	41 93       	st	Z+, r20
    2f72:	02 d0       	rcall	.+4      	; 0x2f78 <__ultoa_invert+0x84>
    2f74:	a9 f7       	brne	.-22     	; 0x2f60 <__ultoa_invert+0x6c>
    2f76:	ea cf       	rjmp	.-44     	; 0x2f4c <__ultoa_invert+0x58>
    2f78:	b4 e0       	ldi	r27, 0x04	; 4
    2f7a:	a6 95       	lsr	r26
    2f7c:	97 95       	ror	r25
    2f7e:	87 95       	ror	r24
    2f80:	77 95       	ror	r23
    2f82:	67 95       	ror	r22
    2f84:	ba 95       	dec	r27
    2f86:	c9 f7       	brne	.-14     	; 0x2f7a <__ultoa_invert+0x86>
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	61 05       	cpc	r22, r1
    2f8c:	71 05       	cpc	r23, r1
    2f8e:	08 95       	ret
    2f90:	9b 01       	movw	r18, r22
    2f92:	ac 01       	movw	r20, r24
    2f94:	0a 2e       	mov	r0, r26
    2f96:	06 94       	lsr	r0
    2f98:	57 95       	ror	r21
    2f9a:	47 95       	ror	r20
    2f9c:	37 95       	ror	r19
    2f9e:	27 95       	ror	r18
    2fa0:	ba 95       	dec	r27
    2fa2:	c9 f7       	brne	.-14     	; 0x2f96 <__ultoa_invert+0xa2>
    2fa4:	62 0f       	add	r22, r18
    2fa6:	73 1f       	adc	r23, r19
    2fa8:	84 1f       	adc	r24, r20
    2faa:	95 1f       	adc	r25, r21
    2fac:	a0 1d       	adc	r26, r0
    2fae:	08 95       	ret

00002fb0 <_exit>:
    2fb0:	f8 94       	cli

00002fb2 <__stop_program>:
    2fb2:	ff cf       	rjmp	.-2      	; 0x2fb2 <__stop_program>
